
Parcial1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a04  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08005b18  08005b18  00015b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e68  08005e68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e68  08005e68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e68  08005e68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08005ee0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08005ee0  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a58  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001847  00000000  00000000  00028af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d69  00000000  00000000  0002b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a367  00000000  00000000  00043419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087882  00000000  00000000  0004d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000d5054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005afc 	.word	0x08005afc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005afc 	.word	0x08005afc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fmul>:
 8000b2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b34:	bf1e      	ittt	ne
 8000b36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b3a:	ea92 0f0c 	teqne	r2, ip
 8000b3e:	ea93 0f0c 	teqne	r3, ip
 8000b42:	d06f      	beq.n	8000c24 <__aeabi_fmul+0xf8>
 8000b44:	441a      	add	r2, r3
 8000b46:	ea80 0c01 	eor.w	ip, r0, r1
 8000b4a:	0240      	lsls	r0, r0, #9
 8000b4c:	bf18      	it	ne
 8000b4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b52:	d01e      	beq.n	8000b92 <__aeabi_fmul+0x66>
 8000b54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b60:	fba0 3101 	umull	r3, r1, r0, r1
 8000b64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b6c:	bf3e      	ittt	cc
 8000b6e:	0049      	lslcc	r1, r1, #1
 8000b70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b74:	005b      	lslcc	r3, r3, #1
 8000b76:	ea40 0001 	orr.w	r0, r0, r1
 8000b7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b7e:	2afd      	cmp	r2, #253	; 0xfd
 8000b80:	d81d      	bhi.n	8000bbe <__aeabi_fmul+0x92>
 8000b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8a:	bf08      	it	eq
 8000b8c:	f020 0001 	biceq.w	r0, r0, #1
 8000b90:	4770      	bx	lr
 8000b92:	f090 0f00 	teq	r0, #0
 8000b96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b9a:	bf08      	it	eq
 8000b9c:	0249      	lsleq	r1, r1, #9
 8000b9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ba2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba6:	3a7f      	subs	r2, #127	; 0x7f
 8000ba8:	bfc2      	ittt	gt
 8000baa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bb2:	4770      	bxgt	lr
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	3a01      	subs	r2, #1
 8000bbe:	dc5d      	bgt.n	8000c7c <__aeabi_fmul+0x150>
 8000bc0:	f112 0f19 	cmn.w	r2, #25
 8000bc4:	bfdc      	itt	le
 8000bc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bca:	4770      	bxle	lr
 8000bcc:	f1c2 0200 	rsb	r2, r2, #0
 8000bd0:	0041      	lsls	r1, r0, #1
 8000bd2:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd6:	f1c2 0220 	rsb	r2, r2, #32
 8000bda:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bde:	ea5f 0031 	movs.w	r0, r1, rrx
 8000be2:	f140 0000 	adc.w	r0, r0, #0
 8000be6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bea:	bf08      	it	eq
 8000bec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf0:	4770      	bx	lr
 8000bf2:	f092 0f00 	teq	r2, #0
 8000bf6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bfa:	bf02      	ittt	eq
 8000bfc:	0040      	lsleq	r0, r0, #1
 8000bfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c02:	3a01      	subeq	r2, #1
 8000c04:	d0f9      	beq.n	8000bfa <__aeabi_fmul+0xce>
 8000c06:	ea40 000c 	orr.w	r0, r0, ip
 8000c0a:	f093 0f00 	teq	r3, #0
 8000c0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0049      	lsleq	r1, r1, #1
 8000c16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c1a:	3b01      	subeq	r3, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fmul+0xe6>
 8000c1e:	ea41 010c 	orr.w	r1, r1, ip
 8000c22:	e78f      	b.n	8000b44 <__aeabi_fmul+0x18>
 8000c24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c28:	ea92 0f0c 	teq	r2, ip
 8000c2c:	bf18      	it	ne
 8000c2e:	ea93 0f0c 	teqne	r3, ip
 8000c32:	d00a      	beq.n	8000c4a <__aeabi_fmul+0x11e>
 8000c34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c38:	bf18      	it	ne
 8000c3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c3e:	d1d8      	bne.n	8000bf2 <__aeabi_fmul+0xc6>
 8000c40:	ea80 0001 	eor.w	r0, r0, r1
 8000c44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f090 0f00 	teq	r0, #0
 8000c4e:	bf17      	itett	ne
 8000c50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c54:	4608      	moveq	r0, r1
 8000c56:	f091 0f00 	teqne	r1, #0
 8000c5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c5e:	d014      	beq.n	8000c8a <__aeabi_fmul+0x15e>
 8000c60:	ea92 0f0c 	teq	r2, ip
 8000c64:	d101      	bne.n	8000c6a <__aeabi_fmul+0x13e>
 8000c66:	0242      	lsls	r2, r0, #9
 8000c68:	d10f      	bne.n	8000c8a <__aeabi_fmul+0x15e>
 8000c6a:	ea93 0f0c 	teq	r3, ip
 8000c6e:	d103      	bne.n	8000c78 <__aeabi_fmul+0x14c>
 8000c70:	024b      	lsls	r3, r1, #9
 8000c72:	bf18      	it	ne
 8000c74:	4608      	movne	r0, r1
 8000c76:	d108      	bne.n	8000c8a <__aeabi_fmul+0x15e>
 8000c78:	ea80 0001 	eor.w	r0, r0, r1
 8000c7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fdiv>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d069      	beq.n	8000d80 <__aeabi_fdiv+0xec>
 8000cac:	eba2 0203 	sub.w	r2, r2, r3
 8000cb0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb4:	0249      	lsls	r1, r1, #9
 8000cb6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cba:	d037      	beq.n	8000d2c <__aeabi_fdiv+0x98>
 8000cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cc0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	bf38      	it	cc
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cd6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	bf24      	itt	cs
 8000cde:	1a5b      	subcs	r3, r3, r1
 8000ce0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce8:	bf24      	itt	cs
 8000cea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cf2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf6:	bf24      	itt	cs
 8000cf8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	bf18      	it	ne
 8000d12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d16:	d1e0      	bne.n	8000cda <__aeabi_fdiv+0x46>
 8000d18:	2afd      	cmp	r2, #253	; 0xfd
 8000d1a:	f63f af50 	bhi.w	8000bbe <__aeabi_fmul+0x92>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d34:	327f      	adds	r2, #127	; 0x7f
 8000d36:	bfc2      	ittt	gt
 8000d38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d40:	4770      	bxgt	lr
 8000d42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	e737      	b.n	8000bbe <__aeabi_fmul+0x92>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fdiv+0xc2>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fdiv+0xda>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e795      	b.n	8000cac <__aeabi_fdiv+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	d108      	bne.n	8000d9c <__aeabi_fdiv+0x108>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	f47f af7d 	bne.w	8000c8a <__aeabi_fmul+0x15e>
 8000d90:	ea93 0f0c 	teq	r3, ip
 8000d94:	f47f af70 	bne.w	8000c78 <__aeabi_fmul+0x14c>
 8000d98:	4608      	mov	r0, r1
 8000d9a:	e776      	b.n	8000c8a <__aeabi_fmul+0x15e>
 8000d9c:	ea93 0f0c 	teq	r3, ip
 8000da0:	d104      	bne.n	8000dac <__aeabi_fdiv+0x118>
 8000da2:	024b      	lsls	r3, r1, #9
 8000da4:	f43f af4c 	beq.w	8000c40 <__aeabi_fmul+0x114>
 8000da8:	4608      	mov	r0, r1
 8000daa:	e76e      	b.n	8000c8a <__aeabi_fmul+0x15e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1ca      	bne.n	8000d4e <__aeabi_fdiv+0xba>
 8000db8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dbc:	f47f af5c 	bne.w	8000c78 <__aeabi_fmul+0x14c>
 8000dc0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dc4:	f47f af3c 	bne.w	8000c40 <__aeabi_fmul+0x114>
 8000dc8:	e75f      	b.n	8000c8a <__aeabi_fmul+0x15e>
 8000dca:	bf00      	nop

08000dcc <__gesf2>:
 8000dcc:	f04f 3cff 	mov.w	ip, #4294967295
 8000dd0:	e006      	b.n	8000de0 <__cmpsf2+0x4>
 8000dd2:	bf00      	nop

08000dd4 <__lesf2>:
 8000dd4:	f04f 0c01 	mov.w	ip, #1
 8000dd8:	e002      	b.n	8000de0 <__cmpsf2+0x4>
 8000dda:	bf00      	nop

08000ddc <__cmpsf2>:
 8000ddc:	f04f 0c01 	mov.w	ip, #1
 8000de0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000df0:	bf18      	it	ne
 8000df2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000df6:	d011      	beq.n	8000e1c <__cmpsf2+0x40>
 8000df8:	b001      	add	sp, #4
 8000dfa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dfe:	bf18      	it	ne
 8000e00:	ea90 0f01 	teqne	r0, r1
 8000e04:	bf58      	it	pl
 8000e06:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e0a:	bf88      	it	hi
 8000e0c:	17c8      	asrhi	r0, r1, #31
 8000e0e:	bf38      	it	cc
 8000e10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e14:	bf18      	it	ne
 8000e16:	f040 0001 	orrne.w	r0, r0, #1
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e20:	d102      	bne.n	8000e28 <__cmpsf2+0x4c>
 8000e22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e26:	d105      	bne.n	8000e34 <__cmpsf2+0x58>
 8000e28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e2c:	d1e4      	bne.n	8000df8 <__cmpsf2+0x1c>
 8000e2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e32:	d0e1      	beq.n	8000df8 <__cmpsf2+0x1c>
 8000e34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <__aeabi_cfrcmple>:
 8000e3c:	4684      	mov	ip, r0
 8000e3e:	4608      	mov	r0, r1
 8000e40:	4661      	mov	r1, ip
 8000e42:	e7ff      	b.n	8000e44 <__aeabi_cfcmpeq>

08000e44 <__aeabi_cfcmpeq>:
 8000e44:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e46:	f7ff ffc9 	bl	8000ddc <__cmpsf2>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	bf48      	it	mi
 8000e4e:	f110 0f00 	cmnmi.w	r0, #0
 8000e52:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e54 <__aeabi_fcmpeq>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff fff4 	bl	8000e44 <__aeabi_cfcmpeq>
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2001      	moveq	r0, #1
 8000e60:	2000      	movne	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_fcmplt>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffea 	bl	8000e44 <__aeabi_cfcmpeq>
 8000e70:	bf34      	ite	cc
 8000e72:	2001      	movcc	r0, #1
 8000e74:	2000      	movcs	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_fcmple>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff ffe0 	bl	8000e44 <__aeabi_cfcmpeq>
 8000e84:	bf94      	ite	ls
 8000e86:	2001      	movls	r0, #1
 8000e88:	2000      	movhi	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmpge>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffd2 	bl	8000e3c <__aeabi_cfrcmple>
 8000e98:	bf94      	ite	ls
 8000e9a:	2001      	movls	r0, #1
 8000e9c:	2000      	movhi	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmpgt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffc8 	bl	8000e3c <__aeabi_cfrcmple>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f000 feb8 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 fa66 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 fb4a 	bl	800155c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ec8:	f000 faa8 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ecc:	f000 faf8 	bl	80014c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initLCD();
 8000ed0:	f000 fca6 	bl	8001820 <initLCD>
  HAL_TIM_Base_Start(&htim2);
 8000ed4:	48ba      	ldr	r0, [pc, #744]	; (80011c0 <main+0x308>)
 8000ed6:	f001 fe0b 	bl	8002af0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000eda:	48ba      	ldr	r0, [pc, #744]	; (80011c4 <main+0x30c>)
 8000edc:	f001 fe4c 	bl	8002b78 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(frecuencia == 0){
 8000ee0:	4bb9      	ldr	r3, [pc, #740]	; (80011c8 <main+0x310>)
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f7ff fd53 	bl	8000998 <__aeabi_dcmpeq>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d019      	beq.n	8000f2c <main+0x74>
		HAL_GPIO_WritePin(Salida_GPIO_Port, Salida_Pin, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2102      	movs	r1, #2
 8000efc:	48b3      	ldr	r0, [pc, #716]	; (80011cc <main+0x314>)
 8000efe:	f001 f9a7 	bl	8002250 <HAL_GPIO_WritePin>
		comando(clear,0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fbcd 	bl	80016a4 <comando>
		HAL_Delay(500);
 8000f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0e:	f000 fef1 	bl	8001cf4 <HAL_Delay>
		HAL_GPIO_WritePin(Salida_GPIO_Port, Salida_Pin, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	48ad      	ldr	r0, [pc, #692]	; (80011cc <main+0x314>)
 8000f18:	f001 f99a 	bl	8002250 <HAL_GPIO_WritePin>
		E_cadena("Midiendo");
 8000f1c:	48ac      	ldr	r0, [pc, #688]	; (80011d0 <main+0x318>)
 8000f1e:	f000 fcb0 	bl	8001882 <E_cadena>
		HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 fee5 	bl	8001cf4 <HAL_Delay>
 8000f2a:	e7d9      	b.n	8000ee0 <main+0x28>
	}else{
		comando(clear,0);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fbb8 	bl	80016a4 <comando>
		E_cadena("Listo");
 8000f34:	48a7      	ldr	r0, [pc, #668]	; (80011d4 <main+0x31c>)
 8000f36:	f000 fca4 	bl	8001882 <E_cadena>
		HAL_Delay(2000);
 8000f3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f3e:	f000 fed9 	bl	8001cf4 <HAL_Delay>
		L=1/(4.0*(pi*pi)*(frecuencia*frecuencia)*C);
 8000f42:	a195      	add	r1, pc, #596	; (adr r1, 8001198 <main+0x2e0>)
 8000f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f48:	a393      	add	r3, pc, #588	; (adr r3, 8001198 <main+0x2e0>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff fabb 	bl	80004c8 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b9e      	ldr	r3, [pc, #632]	; (80011d8 <main+0x320>)
 8000f60:	f7ff fab2 	bl	80004c8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	4b96      	ldr	r3, [pc, #600]	; (80011c8 <main+0x310>)
 8000f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f72:	4b95      	ldr	r3, [pc, #596]	; (80011c8 <main+0x310>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff faa6 	bl	80004c8 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4620      	mov	r0, r4
 8000f82:	4629      	mov	r1, r5
 8000f84:	f7ff faa0 	bl	80004c8 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	a383      	add	r3, pc, #524	; (adr r3, 80011a0 <main+0x2e8>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fa97 	bl	80004c8 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	498e      	ldr	r1, [pc, #568]	; (80011dc <main+0x324>)
 8000fa4:	f7ff fbba 	bl	800071c <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd6c 	bl	8000a8c <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <main+0x328>)
 8000fb8:	6013      	str	r3, [r2, #0]
		comando(clear,0);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fb71 	bl	80016a4 <comando>
		E_cadena("F: ");
 8000fc2:	4888      	ldr	r0, [pc, #544]	; (80011e4 <main+0x32c>)
 8000fc4:	f000 fc5d 	bl	8001882 <E_cadena>
		if(frecuencia<1000){
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <main+0x310>)
 8000fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b85      	ldr	r3, [pc, #532]	; (80011e8 <main+0x330>)
 8000fd4:	f7ff fcea 	bl	80009ac <__aeabi_dcmplt>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d01e      	beq.n	800101c <main+0x164>
			E_cadena(itoa(frecuencia, tex, 10));
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <main+0x310>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd30 	bl	8000a4c <__aeabi_d2uiz>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220a      	movs	r2, #10
 8000ff0:	497e      	ldr	r1, [pc, #504]	; (80011ec <main+0x334>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 f9ba 	bl	800336c <itoa>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc41 	bl	8001882 <E_cadena>
			E_cadena(" Hz");
 8001000:	487b      	ldr	r0, [pc, #492]	; (80011f0 <main+0x338>)
 8001002:	f000 fc3e 	bl	8001882 <E_cadena>
			comando(linea2, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	20c0      	movs	r0, #192	; 0xc0
 800100a:	f000 fb4b 	bl	80016a4 <comando>
			HAL_Delay(200);
 800100e:	20c8      	movs	r0, #200	; 0xc8
 8001010:	f000 fe70 	bl	8001cf4 <HAL_Delay>
			E_cadena("L: ");
 8001014:	4877      	ldr	r0, [pc, #476]	; (80011f4 <main+0x33c>)
 8001016:	f000 fc34 	bl	8001882 <E_cadena>
 800101a:	e074      	b.n	8001106 <main+0x24e>
		}else if(frecuencia>=1000 && frecuencia<100000){
 800101c:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <main+0x310>)
 800101e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b70      	ldr	r3, [pc, #448]	; (80011e8 <main+0x330>)
 8001028:	f7ff fcd4 	bl	80009d4 <__aeabi_dcmpge>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d02f      	beq.n	8001092 <main+0x1da>
 8001032:	4b65      	ldr	r3, [pc, #404]	; (80011c8 <main+0x310>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	a35b      	add	r3, pc, #364	; (adr r3, 80011a8 <main+0x2f0>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff fcb5 	bl	80009ac <__aeabi_dcmplt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d024      	beq.n	8001092 <main+0x1da>
			frecuencia=frecuencia/1000;
 8001048:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <main+0x310>)
 800104a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b65      	ldr	r3, [pc, #404]	; (80011e8 <main+0x330>)
 8001054:	f7ff fb62 	bl	800071c <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	495a      	ldr	r1, [pc, #360]	; (80011c8 <main+0x310>)
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
			E_cadena(itoa(frecuencia, tex, 10));
 8001062:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <main+0x310>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fcee 	bl	8000a4c <__aeabi_d2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	220a      	movs	r2, #10
 8001074:	495d      	ldr	r1, [pc, #372]	; (80011ec <main+0x334>)
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f978 	bl	800336c <itoa>
 800107c:	4603      	mov	r3, r0
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fbff 	bl	8001882 <E_cadena>
			E_cadena(" kHz");
 8001084:	485c      	ldr	r0, [pc, #368]	; (80011f8 <main+0x340>)
 8001086:	f000 fbfc 	bl	8001882 <E_cadena>
			E_cadena("L: ");
 800108a:	485a      	ldr	r0, [pc, #360]	; (80011f4 <main+0x33c>)
 800108c:	f000 fbf9 	bl	8001882 <E_cadena>
 8001090:	e039      	b.n	8001106 <main+0x24e>
		}else if(frecuencia>=100000 && frecuencia<100000000){
 8001092:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <main+0x310>)
 8001094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001098:	a343      	add	r3, pc, #268	; (adr r3, 80011a8 <main+0x2f0>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fc99 	bl	80009d4 <__aeabi_dcmpge>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02e      	beq.n	8001106 <main+0x24e>
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <main+0x310>)
 80010aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ae:	a340      	add	r3, pc, #256	; (adr r3, 80011b0 <main+0x2f8>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fc7a 	bl	80009ac <__aeabi_dcmplt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d023      	beq.n	8001106 <main+0x24e>
			frecuencia=frecuencia/1000000;
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <main+0x310>)
 80010c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c4:	a33c      	add	r3, pc, #240	; (adr r3, 80011b8 <main+0x300>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fb27 	bl	800071c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	493d      	ldr	r1, [pc, #244]	; (80011c8 <main+0x310>)
 80010d4:	e9c1 2300 	strd	r2, r3, [r1]
			E_cadena(itoa(frecuencia, tex, 10));
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <main+0x310>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fcb3 	bl	8000a4c <__aeabi_d2uiz>
 80010e6:	4603      	mov	r3, r0
 80010e8:	220a      	movs	r2, #10
 80010ea:	4940      	ldr	r1, [pc, #256]	; (80011ec <main+0x334>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 f93d 	bl	800336c <itoa>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fbc4 	bl	8001882 <E_cadena>
			E_cadena(" MHz");
 80010fa:	4840      	ldr	r0, [pc, #256]	; (80011fc <main+0x344>)
 80010fc:	f000 fbc1 	bl	8001882 <E_cadena>
			E_cadena("L: ");
 8001100:	483c      	ldr	r0, [pc, #240]	; (80011f4 <main+0x33c>)
 8001102:	f000 fbbe 	bl	8001882 <E_cadena>
		}
		if(L>1000){
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <main+0x328>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	493d      	ldr	r1, [pc, #244]	; (8001200 <main+0x348>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fec9 	bl	8000ea4 <__aeabi_fcmpgt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01a      	beq.n	800114e <main+0x296>
			L=L/1000;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <main+0x328>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4938      	ldr	r1, [pc, #224]	; (8001200 <main+0x348>)
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fdb8 	bl	8000c94 <__aeabi_fdiv>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <main+0x328>)
 800112a:	601a      	str	r2, [r3, #0]
			E_cadena(gcvt (L,5,tex2));
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <main+0x328>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f971 	bl	8000418 <__aeabi_f2d>
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <main+0x34c>)
 8001138:	2205      	movs	r2, #5
 800113a:	f002 f8b1 	bl	80032a0 <gcvt>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fb9e 	bl	8001882 <E_cadena>
			E_cadena(" kH");
 8001146:	4830      	ldr	r0, [pc, #192]	; (8001208 <main+0x350>)
 8001148:	f000 fb9b 	bl	8001882 <E_cadena>
 800114c:	e0fd      	b.n	800134a <main+0x492>
		}else if(L<100 && L>=1){
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <main+0x328>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	492e      	ldr	r1, [pc, #184]	; (800120c <main+0x354>)
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe87 	bl	8000e68 <__aeabi_fcmplt>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d059      	beq.n	8001214 <main+0x35c>
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <main+0x328>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe91 	bl	8000e90 <__aeabi_fcmpge>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d04f      	beq.n	8001214 <main+0x35c>
			E_cadena(gcvt (L,6,tex2));
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <main+0x328>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f94d 	bl	8000418 <__aeabi_f2d>
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <main+0x34c>)
 8001180:	2206      	movs	r2, #6
 8001182:	f002 f88d 	bl	80032a0 <gcvt>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fb7a 	bl	8001882 <E_cadena>
			E_cadena(" H");
 800118e:	4820      	ldr	r0, [pc, #128]	; (8001210 <main+0x358>)
 8001190:	f000 fb77 	bl	8001882 <E_cadena>
		}else if(L<100 && L>=1){
 8001194:	e0d9      	b.n	800134a <main+0x492>
 8001196:	bf00      	nop
 8001198:	fc8b007a 	.word	0xfc8b007a
 800119c:	400921fa 	.word	0x400921fa
 80011a0:	c46da516 	.word	0xc46da516
 80011a4:	3eb26bdf 	.word	0x3eb26bdf
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40f86a00 	.word	0x40f86a00
 80011b0:	00000000 	.word	0x00000000
 80011b4:	4197d784 	.word	0x4197d784
 80011b8:	00000000 	.word	0x00000000
 80011bc:	412e8480 	.word	0x412e8480
 80011c0:	2000008c 	.word	0x2000008c
 80011c4:	200000d4 	.word	0x200000d4
 80011c8:	20000128 	.word	0x20000128
 80011cc:	40010800 	.word	0x40010800
 80011d0:	08005b18 	.word	0x08005b18
 80011d4:	08005b24 	.word	0x08005b24
 80011d8:	40100000 	.word	0x40100000
 80011dc:	3ff00000 	.word	0x3ff00000
 80011e0:	20000198 	.word	0x20000198
 80011e4:	08005b2c 	.word	0x08005b2c
 80011e8:	408f4000 	.word	0x408f4000
 80011ec:	20000130 	.word	0x20000130
 80011f0:	08005b30 	.word	0x08005b30
 80011f4:	08005b34 	.word	0x08005b34
 80011f8:	08005b38 	.word	0x08005b38
 80011fc:	08005b40 	.word	0x08005b40
 8001200:	447a0000 	.word	0x447a0000
 8001204:	20000164 	.word	0x20000164
 8001208:	08005b48 	.word	0x08005b48
 800120c:	42c80000 	.word	0x42c80000
 8001210:	08005b4c 	.word	0x08005b4c
		}else if(L<1 && L>=0.009){
 8001214:	4b56      	ldr	r3, [pc, #344]	; (8001370 <main+0x4b8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe23 	bl	8000e68 <__aeabi_fcmplt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d027      	beq.n	8001278 <main+0x3c0>
 8001228:	4b51      	ldr	r3, [pc, #324]	; (8001370 <main+0x4b8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8f3 	bl	8000418 <__aeabi_f2d>
 8001232:	a349      	add	r3, pc, #292	; (adr r3, 8001358 <main+0x4a0>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff fbcc 	bl	80009d4 <__aeabi_dcmpge>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d01a      	beq.n	8001278 <main+0x3c0>
			L=L*1000;
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <main+0x4b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	494b      	ldr	r1, [pc, #300]	; (8001374 <main+0x4bc>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc6f 	bl	8000b2c <__aeabi_fmul>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <main+0x4b8>)
 8001254:	601a      	str	r2, [r3, #0]
			E_cadena(gcvt (L,6,tex2));
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <main+0x4b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f8dc 	bl	8000418 <__aeabi_f2d>
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <main+0x4c0>)
 8001262:	2206      	movs	r2, #6
 8001264:	f002 f81c 	bl	80032a0 <gcvt>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fb09 	bl	8001882 <E_cadena>
			E_cadena(" mH");
 8001270:	4842      	ldr	r0, [pc, #264]	; (800137c <main+0x4c4>)
 8001272:	f000 fb06 	bl	8001882 <E_cadena>
		}else if(L<1 && L>=0.009){
 8001276:	e068      	b.n	800134a <main+0x492>
		}else if(L<0.009 && L>=0.000009){
 8001278:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <main+0x4b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f8cb 	bl	8000418 <__aeabi_f2d>
 8001282:	a335      	add	r3, pc, #212	; (adr r3, 8001358 <main+0x4a0>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff fb90 	bl	80009ac <__aeabi_dcmplt>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d027      	beq.n	80012e2 <main+0x42a>
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <main+0x4b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8be 	bl	8000418 <__aeabi_f2d>
 800129c:	a330      	add	r3, pc, #192	; (adr r3, 8001360 <main+0x4a8>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff fb97 	bl	80009d4 <__aeabi_dcmpge>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01a      	beq.n	80012e2 <main+0x42a>
			L=L*1000000;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <main+0x4b8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4933      	ldr	r1, [pc, #204]	; (8001380 <main+0x4c8>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fc3a 	bl	8000b2c <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <main+0x4b8>)
 80012be:	601a      	str	r2, [r3, #0]
			E_cadena(gcvt (L,6,tex2));
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <main+0x4b8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8a7 	bl	8000418 <__aeabi_f2d>
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <main+0x4c0>)
 80012cc:	2206      	movs	r2, #6
 80012ce:	f001 ffe7 	bl	80032a0 <gcvt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fad4 	bl	8001882 <E_cadena>
			E_cadena(" uH");
 80012da:	482a      	ldr	r0, [pc, #168]	; (8001384 <main+0x4cc>)
 80012dc:	f000 fad1 	bl	8001882 <E_cadena>
		}else if(L<0.009 && L>=0.000009){
 80012e0:	e033      	b.n	800134a <main+0x492>
		}else if(L<0.000009 && L>=0.000000009){
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <main+0x4b8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f896 	bl	8000418 <__aeabi_f2d>
 80012ec:	a31c      	add	r3, pc, #112	; (adr r3, 8001360 <main+0x4a8>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fb5b 	bl	80009ac <__aeabi_dcmplt>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d026      	beq.n	800134a <main+0x492>
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <main+0x4b8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f889 	bl	8000418 <__aeabi_f2d>
 8001306:	a318      	add	r3, pc, #96	; (adr r3, 8001368 <main+0x4b0>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fb62 	bl	80009d4 <__aeabi_dcmpge>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d019      	beq.n	800134a <main+0x492>
			L=L*1000000000;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <main+0x4b8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	491b      	ldr	r1, [pc, #108]	; (8001388 <main+0x4d0>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc05 	bl	8000b2c <__aeabi_fmul>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <main+0x4b8>)
 8001328:	601a      	str	r2, [r3, #0]
			E_cadena(gcvt (L,6,tex2));
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <main+0x4b8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f872 	bl	8000418 <__aeabi_f2d>
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <main+0x4c0>)
 8001336:	2206      	movs	r2, #6
 8001338:	f001 ffb2 	bl	80032a0 <gcvt>
 800133c:	4603      	mov	r3, r0
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fa9f 	bl	8001882 <E_cadena>
			E_cadena(" nH");
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <main+0x4d4>)
 8001346:	f000 fa9c 	bl	8001882 <E_cadena>
		}
		HAL_Delay(1500);
 800134a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800134e:	f000 fcd1 	bl	8001cf4 <HAL_Delay>
	if(frecuencia == 0){
 8001352:	e5c5      	b.n	8000ee0 <main+0x28>
 8001354:	f3af 8000 	nop.w
 8001358:	8d4fdf3b 	.word	0x8d4fdf3b
 800135c:	3f826e97 	.word	0x3f826e97
 8001360:	94ccab3f 	.word	0x94ccab3f
 8001364:	3ee2dfd6 	.word	0x3ee2dfd6
 8001368:	652bb167 	.word	0x652bb167
 800136c:	3e4353cd 	.word	0x3e4353cd
 8001370:	20000198 	.word	0x20000198
 8001374:	447a0000 	.word	0x447a0000
 8001378:	20000164 	.word	0x20000164
 800137c:	08005b50 	.word	0x08005b50
 8001380:	49742400 	.word	0x49742400
 8001384:	08005b54 	.word	0x08005b54
 8001388:	4e6e6b28 	.word	0x4e6e6b28
 800138c:	08005b58 	.word	0x08005b58

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 ffe6 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 ff51 	bl	8002280 <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e4:	f000 fa64 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2302      	movs	r3, #2
 80013ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f001 f9be 	bl	8002784 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800140e:	f000 fa4f 	bl	80018b0 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	; 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <MX_TIM2_Init+0xa0>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_TIM2_Init+0xa0>)
 8001442:	2201      	movs	r2, #1
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM2_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_TIM2_Init+0xa0>)
 800144e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM2_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM2_Init+0xa0>)
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <MX_TIM2_Init+0xa0>)
 8001462:	f001 faf5 	bl	8002a50 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800146c:	f000 fa20 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001474:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM2_Init+0xa0>)
 800148a:	f001 fcc9 	bl	8002e20 <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 fa0c 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM2_Init+0xa0>)
 80014a6:	f001 fe91 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80014b0:	f000 f9fe 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000008c 	.word	0x2000008c

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_TIM3_Init+0x94>)
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <MX_TIM3_Init+0x98>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_TIM3_Init+0x94>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM3_Init+0x94>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_TIM3_Init+0x94>)
 80014f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_TIM3_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM3_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001502:	4814      	ldr	r0, [pc, #80]	; (8001554 <MX_TIM3_Init+0x94>)
 8001504:	f001 faa4 	bl	8002a50 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f9cf 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_TIM3_Init+0x94>)
 8001520:	f001 fc7e 	bl	8002e20 <HAL_TIM_ConfigClockSource>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f9c1 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_TIM3_Init+0x94>)
 800153c:	f001 fe46 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001546:	f000 f9b3 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000d4 	.word	0x200000d4
 8001558:	40000400 	.word	0x40000400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_GPIO_Init+0xb4>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <MX_GPIO_Init+0xb4>)
 8001576:	f043 0320 	orr.w	r3, r3, #32
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_GPIO_Init+0xb4>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_GPIO_Init+0xb4>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <MX_GPIO_Init+0xb4>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_GPIO_Init+0xb4>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_GPIO_Init+0xb4>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <MX_GPIO_Init+0xb4>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_GPIO_Init+0xb4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Salida_GPIO_Port, Salida_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2102      	movs	r1, #2
 80015bc:	4815      	ldr	r0, [pc, #84]	; (8001614 <MX_GPIO_Init+0xb8>)
 80015be:	f000 fe47 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|RS_Pin|D4_Pin|D5_Pin
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80015c8:	4813      	ldr	r0, [pc, #76]	; (8001618 <MX_GPIO_Init+0xbc>)
 80015ca:	f000 fe41 	bl	8002250 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Salida_Pin */
  GPIO_InitStruct.Pin = Salida_Pin;
 80015ce:	2302      	movs	r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2302      	movs	r3, #2
 80015dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Salida_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_GPIO_Init+0xb8>)
 80015e6:	f000 fcb7 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RS_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin|D4_Pin|D5_Pin
 80015ea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015ee:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_GPIO_Init+0xbc>)
 8001604:	f000 fca8 	bl	8001f58 <HAL_GPIO_Init>

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	40010800 	.word	0x40010800
 8001618:	40010c00 	.word	0x40010c00

0800161c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12d      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0x6e>
		contador=TIM2->CNT;
 800162e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe fecd 	bl	80003d4 <__aeabi_ui2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
		frecuencia=(1/(1/contador))*2;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	4913      	ldr	r1, [pc, #76]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001650:	f7ff f864 	bl	800071c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	f04f 0000 	mov.w	r0, #0
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800165e:	f7ff f85d 	bl	800071c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	f7fe fd75 	bl	800015c <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	490a      	ldr	r1, [pc, #40]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001678:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CNT=0;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT=0;
 8001682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
	}
	//HAL_GPIO_TogglePin(GPIOA, LED_Pin);
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40000400 	.word	0x40000400
 8001698:	20000120 	.word	0x20000120
 800169c:	3ff00000 	.word	0x3ff00000
 80016a0:	20000128 	.word	0x20000128

080016a4 <comando>:

void comando(unsigned char cmd, unsigned char rs){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71bb      	strb	r3, [r7, #6]
	unsigned char t1,t2,i;
	HAL_GPIO_WritePin(GPIOB, RS_Pin, rs);
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	461a      	mov	r2, r3
 80016b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016bc:	4857      	ldr	r0, [pc, #348]	; (800181c <comando+0x178>)
 80016be:	f000 fdc7 	bl	8002250 <HAL_GPIO_WritePin>
	t1=(cmd>>4)&0x0F;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<4;i++){
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
 80016cc:	e038      	b.n	8001740 <comando+0x9c>
		t2=t1&0x01;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	737b      	strb	r3, [r7, #13]
		switch(i){
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d82b      	bhi.n	8001734 <comando+0x90>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <comando+0x40>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	08001705 	.word	0x08001705
 80016ec:	08001715 	.word	0x08001715
 80016f0:	08001725 	.word	0x08001725
		case 0:
			HAL_GPIO_WritePin(GPIOB, D4_Pin, t2);
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fc:	4847      	ldr	r0, [pc, #284]	; (800181c <comando+0x178>)
 80016fe:	f000 fda7 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 8001702:	e017      	b.n	8001734 <comando+0x90>
		case 1:
			HAL_GPIO_WritePin(GPIOB, D5_Pin, t2);
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	461a      	mov	r2, r3
 8001708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170c:	4843      	ldr	r0, [pc, #268]	; (800181c <comando+0x178>)
 800170e:	f000 fd9f 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 8001712:	e00f      	b.n	8001734 <comando+0x90>
		case 2:
			HAL_GPIO_WritePin(GPIOB, D6_Pin, t2);
 8001714:	7b7b      	ldrb	r3, [r7, #13]
 8001716:	461a      	mov	r2, r3
 8001718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171c:	483f      	ldr	r0, [pc, #252]	; (800181c <comando+0x178>)
 800171e:	f000 fd97 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 8001722:	e007      	b.n	8001734 <comando+0x90>
		case 3:
			HAL_GPIO_WritePin(GPIOB, D7_Pin, t2);
 8001724:	7b7b      	ldrb	r3, [r7, #13]
 8001726:	461a      	mov	r2, r3
 8001728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172c:	483b      	ldr	r0, [pc, #236]	; (800181c <comando+0x178>)
 800172e:	f000 fd8f 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 8001732:	bf00      	nop
		}
		t1=t1>>1;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<4;i++){
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	3301      	adds	r3, #1
 800173e:	73bb      	strb	r3, [r7, #14]
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d9c3      	bls.n	80016ce <comando+0x2a>
	}
	HAL_GPIO_WritePin(GPIOB, E_Pin, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174c:	4833      	ldr	r0, [pc, #204]	; (800181c <comando+0x178>)
 800174e:	f000 fd7f 	bl	8002250 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001752:	2002      	movs	r0, #2
 8001754:	f000 face 	bl	8001cf4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, E_Pin, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800175e:	482f      	ldr	r0, [pc, #188]	; (800181c <comando+0x178>)
 8001760:	f000 fd76 	bl	8002250 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f000 fac5 	bl	8001cf4 <HAL_Delay>
	t1=cmd&0x0F;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<4;i++){
 8001772:	2300      	movs	r3, #0
 8001774:	73bb      	strb	r3, [r7, #14]
 8001776:	e037      	b.n	80017e8 <comando+0x144>
			t2=t1&0x01;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	737b      	strb	r3, [r7, #13]
		switch(i){
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d82a      	bhi.n	80017dc <comando+0x138>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <comando+0xe8>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017ad 	.word	0x080017ad
 8001794:	080017bd 	.word	0x080017bd
 8001798:	080017cd 	.word	0x080017cd
		case 0:
			HAL_GPIO_WritePin(GPIOB, D4_Pin, t2);
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	461a      	mov	r2, r3
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	481d      	ldr	r0, [pc, #116]	; (800181c <comando+0x178>)
 80017a6:	f000 fd53 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 80017aa:	e017      	b.n	80017dc <comando+0x138>
		case 1:
			HAL_GPIO_WritePin(GPIOB, D5_Pin, t2);
 80017ac:	7b7b      	ldrb	r3, [r7, #13]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b4:	4819      	ldr	r0, [pc, #100]	; (800181c <comando+0x178>)
 80017b6:	f000 fd4b 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 80017ba:	e00f      	b.n	80017dc <comando+0x138>
		case 2:
			HAL_GPIO_WritePin(GPIOB, D6_Pin, t2);
 80017bc:	7b7b      	ldrb	r3, [r7, #13]
 80017be:	461a      	mov	r2, r3
 80017c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c4:	4815      	ldr	r0, [pc, #84]	; (800181c <comando+0x178>)
 80017c6:	f000 fd43 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 80017ca:	e007      	b.n	80017dc <comando+0x138>
		case 3:
			HAL_GPIO_WritePin(GPIOB, D7_Pin, t2);
 80017cc:	7b7b      	ldrb	r3, [r7, #13]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d4:	4811      	ldr	r0, [pc, #68]	; (800181c <comando+0x178>)
 80017d6:	f000 fd3b 	bl	8002250 <HAL_GPIO_WritePin>
		break;
 80017da:	bf00      	nop
		}
			t1=t1>>1;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<4;i++){
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73bb      	strb	r3, [r7, #14]
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d9c4      	bls.n	8001778 <comando+0xd4>
		}
		HAL_GPIO_WritePin(GPIOB, E_Pin, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <comando+0x178>)
 80017f6:	f000 fd2b 	bl	8002250 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 80017fa:	2002      	movs	r0, #2
 80017fc:	f000 fa7a 	bl	8001cf4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, E_Pin, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <comando+0x178>)
 8001808:	f000 fd22 	bl	8002250 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f000 fa71 	bl	8001cf4 <HAL_Delay>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010c00 	.word	0x40010c00

08001820 <initLCD>:

void initLCD(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
		HAL_Delay(40);
 8001824:	2028      	movs	r0, #40	; 0x28
 8001826:	f000 fa65 	bl	8001cf4 <HAL_Delay>
	comando(0x02,0);
 800182a:	2100      	movs	r1, #0
 800182c:	2002      	movs	r0, #2
 800182e:	f7ff ff39 	bl	80016a4 <comando>
		HAL_Delay(2);
 8001832:	2002      	movs	r0, #2
 8001834:	f000 fa5e 	bl	8001cf4 <HAL_Delay>
	comando(0x28,0);
 8001838:	2100      	movs	r1, #0
 800183a:	2028      	movs	r0, #40	; 0x28
 800183c:	f7ff ff32 	bl	80016a4 <comando>
		HAL_Delay(2);
 8001840:	2002      	movs	r0, #2
 8001842:	f000 fa57 	bl	8001cf4 <HAL_Delay>
	comando(0x01,0);
 8001846:	2100      	movs	r1, #0
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ff2b 	bl	80016a4 <comando>
		HAL_Delay(2);
 800184e:	2002      	movs	r0, #2
 8001850:	f000 fa50 	bl	8001cf4 <HAL_Delay>
	comando(0x0C,0);
 8001854:	2100      	movs	r1, #0
 8001856:	200c      	movs	r0, #12
 8001858:	f7ff ff24 	bl	80016a4 <comando>
		HAL_Delay(2);
 800185c:	2002      	movs	r0, #2
 800185e:	f000 fa49 	bl	8001cf4 <HAL_Delay>
	comando(0x06,0);
 8001862:	2100      	movs	r1, #0
 8001864:	2006      	movs	r0, #6
 8001866:	f7ff ff1d 	bl	80016a4 <comando>
		HAL_Delay(2);
 800186a:	2002      	movs	r0, #2
 800186c:	f000 fa42 	bl	8001cf4 <HAL_Delay>
	comando(0x80,0);
 8001870:	2100      	movs	r1, #0
 8001872:	2080      	movs	r0, #128	; 0x80
 8001874:	f7ff ff16 	bl	80016a4 <comando>
		HAL_Delay(5);
 8001878:	2005      	movs	r0, #5
 800187a:	f000 fa3b 	bl	8001cf4 <HAL_Delay>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <E_cadena>:

void E_cadena(unsigned char *pal){
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	while(*pal){
 800188a:	e008      	b.n	800189e <E_cadena+0x1c>
		comando(*pal,1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff06 	bl	80016a4 <comando>
		pal++;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3301      	adds	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
	while(*pal){
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f2      	bne.n	800188c <E_cadena+0xa>
	}
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <Error_Handler+0x8>
	...

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_MspInit+0x5c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_MspInit+0x5c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_MspInit+0x5c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_MspInit+0x60>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_MspInit+0x60>)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193e:	d12c      	bne.n	800199a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4619      	mov	r1, r3
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001984:	f000 fae8 	bl	8001f58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	201c      	movs	r0, #28
 800198e:	f000 faac 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001992:	201c      	movs	r0, #28
 8001994:	f000 fac5 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001998:	e018      	b.n	80019cc <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_TIM_Base_MspInit+0xbc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d113      	bne.n	80019cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	61d3      	str	r3, [r2, #28]
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_TIM_Base_MspInit+0xb4>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	201d      	movs	r0, #29
 80019c2:	f000 fa92 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019c6:	201d      	movs	r0, #29
 80019c8:	f000 faab 	bl	8001f22 <HAL_NVIC_EnableIRQ>
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010800 	.word	0x40010800
 80019dc:	40000400 	.word	0x40000400

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a26:	f000 f949 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <TIM2_IRQHandler+0x10>)
 8001a36:	f001 f8eb 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000008c 	.word	0x2000008c

08001a44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <TIM3_IRQHandler+0x10>)
 8001a4a:	f001 f8e1 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200000d4 	.word	0x200000d4

08001a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <_kill>:

int _kill(int pid, int sig)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a70:	f001 fc3a 	bl	80032e8 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2216      	movs	r2, #22
 8001a78:	601a      	str	r2, [r3, #0]
	return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_exit>:

void _exit (int status)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffe7 	bl	8001a66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a98:	e7fe      	b.n	8001a98 <_exit+0x12>

08001a9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00a      	b.n	8001ac2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aac:	f3af 8000 	nop.w
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	60ba      	str	r2, [r7, #8]
 8001ab8:	b2ca      	uxtb	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbf0      	blt.n	8001aac <_read+0x12>
	}

return len;
 8001aca:	687b      	ldr	r3, [r7, #4]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e009      	b.n	8001afa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	60ba      	str	r2, [r7, #8]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbf1      	blt.n	8001ae6 <_write+0x12>
	}
	return len;
 8001b02:	687b      	ldr	r3, [r7, #4]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_close>:

int _close(int file)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	605a      	str	r2, [r3, #4]
	return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <_isatty>:

int _isatty(int file)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f001 fba4 	bl	80032e8 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20002800 	.word	0x20002800
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	2000019c 	.word	0x2000019c
 8001bd4:	200001b8 	.word	0x200001b8

08001bd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c0a:	f7ff ffe5 	bl	8001bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f001 fb71 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c12:	f7ff f951 	bl	8000eb8 <main>
  bx lr
 8001c16:	4770      	bx	lr
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c20:	08005e70 	.word	0x08005e70
  ldr r2, =_sbss
 8001c24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c28:	200001b4 	.word	0x200001b4

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x28>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x28>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f947 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fe36 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f95f 	bl	8001f3e <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f927 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_IncTick+0x20>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	200001a0 	.word	0x200001a0

08001ce0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_GetTick+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	200001a0 	.word	0x200001a0

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffe0 	bl	8001ce0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <__NVIC_EnableIRQ+0x34>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff90 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff2d 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff42 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff90 	bl	8001e2c <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5f 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff35 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa2 	bl	8001e90 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e161      	b.n	8002230 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 8150 	bne.w	800222a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a97      	ldr	r2, [pc, #604]	; (80021ec <HAL_GPIO_Init+0x294>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d05e      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001f94:	4a95      	ldr	r2, [pc, #596]	; (80021ec <HAL_GPIO_Init+0x294>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d875      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a95      	ldr	r2, [pc, #596]	; (80021f0 <HAL_GPIO_Init+0x298>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d058      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fa0:	4a93      	ldr	r2, [pc, #588]	; (80021f0 <HAL_GPIO_Init+0x298>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d86f      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fa6:	4a93      	ldr	r2, [pc, #588]	; (80021f4 <HAL_GPIO_Init+0x29c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d052      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fac:	4a91      	ldr	r2, [pc, #580]	; (80021f4 <HAL_GPIO_Init+0x29c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d869      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fb2:	4a91      	ldr	r2, [pc, #580]	; (80021f8 <HAL_GPIO_Init+0x2a0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04c      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a8f      	ldr	r2, [pc, #572]	; (80021f8 <HAL_GPIO_Init+0x2a0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d863      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fbe:	4a8f      	ldr	r2, [pc, #572]	; (80021fc <HAL_GPIO_Init+0x2a4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d046      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fc4:	4a8d      	ldr	r2, [pc, #564]	; (80021fc <HAL_GPIO_Init+0x2a4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d85d      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d82a      	bhi.n	8002024 <HAL_GPIO_Init+0xcc>
 8001fce:	2b12      	cmp	r3, #18
 8001fd0:	d859      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <HAL_GPIO_Init+0x80>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08002053 	.word	0x08002053
 8001fdc:	0800202d 	.word	0x0800202d
 8001fe0:	0800203f 	.word	0x0800203f
 8001fe4:	08002081 	.word	0x08002081
 8001fe8:	08002087 	.word	0x08002087
 8001fec:	08002087 	.word	0x08002087
 8001ff0:	08002087 	.word	0x08002087
 8001ff4:	08002087 	.word	0x08002087
 8001ff8:	08002087 	.word	0x08002087
 8001ffc:	08002087 	.word	0x08002087
 8002000:	08002087 	.word	0x08002087
 8002004:	08002087 	.word	0x08002087
 8002008:	08002087 	.word	0x08002087
 800200c:	08002087 	.word	0x08002087
 8002010:	08002087 	.word	0x08002087
 8002014:	08002087 	.word	0x08002087
 8002018:	08002087 	.word	0x08002087
 800201c:	08002035 	.word	0x08002035
 8002020:	08002049 	.word	0x08002049
 8002024:	4a76      	ldr	r2, [pc, #472]	; (8002200 <HAL_GPIO_Init+0x2a8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800202a:	e02c      	b.n	8002086 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e029      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	3304      	adds	r3, #4
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e024      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	3308      	adds	r3, #8
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e01f      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	330c      	adds	r3, #12
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e01a      	b.n	8002088 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800205a:	2304      	movs	r3, #4
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e013      	b.n	8002088 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	611a      	str	r2, [r3, #16]
          break;
 8002072:	e009      	b.n	8002088 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	615a      	str	r2, [r3, #20]
          break;
 800207e:	e003      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x130>
          break;
 8002086:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	d801      	bhi.n	8002092 <HAL_GPIO_Init+0x13a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	e001      	b.n	8002096 <HAL_GPIO_Init+0x13e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d802      	bhi.n	80020a4 <HAL_GPIO_Init+0x14c>
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x152>
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3b08      	subs	r3, #8
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	210f      	movs	r1, #15
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	6a39      	ldr	r1, [r7, #32]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80a9 	beq.w	800222a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020f0:	4a45      	ldr	r2, [pc, #276]	; (8002208 <HAL_GPIO_Init+0x2b0>)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <HAL_GPIO_Init+0x2b4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1e0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <HAL_GPIO_Init+0x2bc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1d8>
 800212c:	2302      	movs	r3, #2
 800212e:	e004      	b.n	800213a <HAL_GPIO_Init+0x1e2>
 8002130:	2303      	movs	r3, #3
 8002132:	e002      	b.n	800213a <HAL_GPIO_Init+0x1e2>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_GPIO_Init+0x1e2>
 8002138:	2300      	movs	r3, #0
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	f002 0203 	and.w	r2, r2, #3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4093      	lsls	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214a:	492f      	ldr	r1, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x2b0>)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	492b      	ldr	r1, [pc, #172]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4927      	ldr	r1, [pc, #156]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 800217c:	4013      	ands	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4921      	ldr	r1, [pc, #132]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	491d      	ldr	r1, [pc, #116]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4917      	ldr	r1, [pc, #92]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4913      	ldr	r1, [pc, #76]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01f      	beq.n	800221c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	490d      	ldr	r1, [pc, #52]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
 80021e8:	e01f      	b.n	800222a <HAL_GPIO_Init+0x2d2>
 80021ea:	bf00      	nop
 80021ec:	10320000 	.word	0x10320000
 80021f0:	10310000 	.word	0x10310000
 80021f4:	10220000 	.word	0x10220000
 80021f8:	10210000 	.word	0x10210000
 80021fc:	10120000 	.word	0x10120000
 8002200:	10110000 	.word	0x10110000
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	40010800 	.word	0x40010800
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40011000 	.word	0x40011000
 8002218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_GPIO_Init+0x2f4>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	43db      	mvns	r3, r3
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <HAL_GPIO_Init+0x2f4>)
 8002226:	4013      	ands	r3, r2
 8002228:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	3301      	adds	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f ae96 	bne.w	8001f6c <HAL_GPIO_Init+0x14>
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	372c      	adds	r7, #44	; 0x2c
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e272      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ac:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d112      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
 80022b8:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d10b      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	4b89      	ldr	r3, [pc, #548]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06c      	beq.n	80023ac <HAL_RCC_OscConfig+0x12c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d168      	bne.n	80023ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e24c      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x76>
 80022e8:	4b80      	ldr	r3, [pc, #512]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a7f      	ldr	r2, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e02e      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x98>
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a77      	ldr	r2, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0xbc>
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 800233c:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fcc0 	bl	8001ce0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fcbc 	bl	8001ce0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e200      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xe4>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fcac 	bl	8001ce0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff fca8 	bl	8001ce0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1ec      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x10c>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c6:	4b49      	ldr	r3, [pc, #292]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c0      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4939      	ldr	r1, [pc, #228]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fc61 	bl	8001ce0 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fc5d 	bl	8001ce0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a1      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fc40 	bl	8001ce0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff fc3c 	bl	8001ce0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e180      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d03a      	beq.n	8002504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fc20 	bl	8001ce0 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff fc1c 	bl	8001ce0 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e160      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f000 faa6 	bl	8002a14 <RCC_Delay>
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7ff fc06 	bl	8001ce0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d6:	e00f      	b.n	80024f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7ff fc02 	bl	8001ce0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e146      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	42420000 	.word	0x42420000
 80024f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e9      	bne.n	80024d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a6 	beq.w	800265e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10d      	bne.n	800253e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a87      	ldr	r2, [pc, #540]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b85      	ldr	r3, [pc, #532]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7e      	ldr	r2, [pc, #504]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7ff fbc3 	bl	8001ce0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7ff fbbf 	bl	8001ce0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e103      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x312>
 8002584:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e02d      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x334>
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a66      	ldr	r2, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	e01c      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x356>
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025d6:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a5a      	ldr	r2, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	4b58      	ldr	r3, [pc, #352]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff fb73 	bl	8001ce0 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7ff fb6f 	bl	8001ce0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0b1      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ee      	beq.n	80025fe <HAL_RCC_OscConfig+0x37e>
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff fb5d 	bl	8001ce0 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff fb59 	bl	8001ce0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e09b      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	4b40      	ldr	r3, [pc, #256]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ee      	bne.n	800262a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8087 	beq.w	8002776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d061      	beq.n	8002738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d146      	bne.n	800270a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff fb2d 	bl	8001ce0 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff fb29 	bl	8001ce0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e06d      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4921      	ldr	r1, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a19      	ldr	r1, [r3, #32]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	430b      	orrs	r3, r1
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7ff fafd 	bl	8001ce0 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7ff faf9 	bl	8001ce0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e03d      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x46a>
 8002708:	e035      	b.n	8002776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fae6 	bl	8001ce0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fae2 	bl	8001ce0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e026      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x498>
 8002736:	e01e      	b.n	8002776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e019      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x500>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0d0      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d910      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4965      	ldr	r1, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d040      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d115      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e073      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06b      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 0203 	bic.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4936      	ldr	r1, [pc, #216]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002874:	f7ff fa34 	bl	8001ce0 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	e00a      	b.n	8002892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287c:	f7ff fa30 	bl	8001ce0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e053      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 020c 	and.w	r2, r3, #12
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d1eb      	bne.n	800287c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d210      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4922      	ldr	r1, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4602      	mov	r2, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1cc>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1d0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f992 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000
 8002948:	40021000 	.word	0x40021000
 800294c:	08005b6c 	.word	0x08005b6c
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b490      	push	{r4, r7}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xac>)
 8002960:	1d3c      	adds	r4, r7, #4
 8002962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002968:	f240 2301 	movw	r3, #513	; 0x201
 800296c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x40>
 8002992:	2b08      	cmp	r3, #8
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x46>
 8002996:	e02b      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 800299a:	623b      	str	r3, [r7, #32]
      break;
 800299c:	e02b      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3328      	adds	r3, #40	; 0x28
 80029a8:	443b      	add	r3, r7
 80029aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	0c5b      	lsrs	r3, r3, #17
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	3328      	adds	r3, #40	; 0x28
 80029c6:	443b      	add	r3, r7
 80029c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	e004      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	623b      	str	r3, [r7, #32]
      break;
 80029ee:	e002      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029f2:	623b      	str	r3, [r7, #32]
      break;
 80029f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc90      	pop	{r4, r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	08005b5c 	.word	0x08005b5c
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	007a1200 	.word	0x007a1200
 8002a10:	003d0900 	.word	0x003d0900

08002a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <RCC_Delay+0x34>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <RCC_Delay+0x38>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a5b      	lsrs	r3, r3, #9
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a30:	bf00      	nop
  }
  while (Delay --);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <RCC_Delay+0x1c>
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e041      	b.n	8002ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe ff52 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f000 faae 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d001      	beq.n	8002b08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e02d      	b.n	8002b64 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_TIM_Base_Start+0x80>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_TIM_Base_Start+0x3e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d004      	beq.n	8002b2e <HAL_TIM_Base_Start+0x3e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_TIM_Base_Start+0x84>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d111      	bne.n	8002b52 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	d010      	beq.n	8002b62 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	e007      	b.n	8002b62 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400

08002b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d001      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e035      	b.n	8002bfc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIM_Base_Start_IT+0x90>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_TIM_Base_Start_IT+0x94>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d111      	bne.n	8002bea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d010      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0202 	mvn.w	r2, #2
 8002c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f9b1 	bl	8002fba <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9a4 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9b3 	bl	8002fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0204 	mvn.w	r2, #4
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f987 	bl	8002fba <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f97a 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f989 	bl	8002fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0208 	mvn.w	r2, #8
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f95d 	bl	8002fba <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f950 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f95f 	bl	8002fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0210 	mvn.w	r2, #16
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f933 	bl	8002fba <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f926 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f935 	bl	8002fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0201 	mvn.w	r2, #1
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe fc44 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa67 	bl	800328e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8f9 	bl	8002fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0220 	mvn.w	r2, #32
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa32 	bl	800327c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIM_ConfigClockSource+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0b3      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x180>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e70:	d03e      	beq.n	8002ef0 <HAL_TIM_ConfigClockSource+0xd0>
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	f200 8087 	bhi.w	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7e:	f000 8085 	beq.w	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e86:	d87f      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002e88:	2b70      	cmp	r3, #112	; 0x70
 8002e8a:	d01a      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xa2>
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d87b      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	d050      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x116>
 8002e94:	2b60      	cmp	r3, #96	; 0x60
 8002e96:	d877      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002e98:	2b50      	cmp	r3, #80	; 0x50
 8002e9a:	d03c      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0xf6>
 8002e9c:	2b50      	cmp	r3, #80	; 0x50
 8002e9e:	d873      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d058      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x136>
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d86f      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002ea8:	2b30      	cmp	r3, #48	; 0x30
 8002eaa:	d064      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x156>
 8002eac:	2b30      	cmp	r3, #48	; 0x30
 8002eae:	d86b      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d060      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x156>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d867      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05c      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x156>
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d05a      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ec0:	e062      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f000 f95c 	bl	800318e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	609a      	str	r2, [r3, #8]
      break;
 8002eee:	e04e      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f000 f945 	bl	800318e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f12:	609a      	str	r2, [r3, #8]
      break;
 8002f14:	e03b      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f000 f8bc 	bl	80030a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2150      	movs	r1, #80	; 0x50
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f913 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f34:	e02b      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 f8da 	bl	80030fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2160      	movs	r1, #96	; 0x60
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f903 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f54:	e01b      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 f89c 	bl	80030a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f8f3 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002f74:	e00b      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f000 f8ea 	bl	800315a <TIM_ITRx_SetConfig>
        break;
 8002f86:	e002      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a25      	ldr	r2, [pc, #148]	; (8003098 <TIM_Base_SetConfig+0xa8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x28>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x28>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <TIM_Base_SetConfig+0xac>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <TIM_Base_SetConfig+0xa8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0x52>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x52>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <TIM_Base_SetConfig+0xac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <TIM_Base_SetConfig+0xa8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400

080030a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 030a 	bic.w	r3, r3, #10
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f023 0210 	bic.w	r2, r3, #16
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	f043 0307 	orr.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	609a      	str	r2, [r3, #8]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e041      	b.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d004      	beq.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10c      	bne.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400

0800327c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <gcvt>:
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	461c      	mov	r4, r3
 80032a4:	4615      	mov	r5, r2
 80032a6:	2300      	movs	r3, #0
 80032a8:	2200      	movs	r2, #0
 80032aa:	b085      	sub	sp, #20
 80032ac:	4606      	mov	r6, r0
 80032ae:	460f      	mov	r7, r1
 80032b0:	f7fd fb7c 	bl	80009ac <__aeabi_dcmplt>
 80032b4:	4623      	mov	r3, r4
 80032b6:	b118      	cbz	r0, 80032c0 <gcvt+0x20>
 80032b8:	222d      	movs	r2, #45	; 0x2d
 80032ba:	3d01      	subs	r5, #1
 80032bc:	f803 2b01 	strb.w	r2, [r3], #1
 80032c0:	2267      	movs	r2, #103	; 0x67
 80032c2:	2100      	movs	r1, #0
 80032c4:	e9cd 5300 	strd	r5, r3, [sp]
 80032c8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80032cc:	4905      	ldr	r1, [pc, #20]	; (80032e4 <gcvt+0x44>)
 80032ce:	4632      	mov	r2, r6
 80032d0:	463b      	mov	r3, r7
 80032d2:	6808      	ldr	r0, [r1, #0]
 80032d4:	f000 f910 	bl	80034f8 <_gcvt>
 80032d8:	2800      	cmp	r0, #0
 80032da:	bf14      	ite	ne
 80032dc:	4620      	movne	r0, r4
 80032de:	2000      	moveq	r0, #0
 80032e0:	b005      	add	sp, #20
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e4:	2000000c 	.word	0x2000000c

080032e8 <__errno>:
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <__errno+0x8>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	2600      	movs	r6, #0
 80032f8:	4d0c      	ldr	r5, [pc, #48]	; (800332c <__libc_init_array+0x38>)
 80032fa:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	f002 fbfa 	bl	8005afc <_init>
 8003308:	2600      	movs	r6, #0
 800330a:	4d0a      	ldr	r5, [pc, #40]	; (8003334 <__libc_init_array+0x40>)
 800330c:	4c0a      	ldr	r4, [pc, #40]	; (8003338 <__libc_init_array+0x44>)
 800330e:	1b64      	subs	r4, r4, r5
 8003310:	10a4      	asrs	r4, r4, #2
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f855 3b04 	ldr.w	r3, [r5], #4
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f855 3b04 	ldr.w	r3, [r5], #4
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	08005e68 	.word	0x08005e68
 8003330:	08005e68 	.word	0x08005e68
 8003334:	08005e68 	.word	0x08005e68
 8003338:	08005e6c 	.word	0x08005e6c

0800333c <__itoa>:
 800333c:	1e93      	subs	r3, r2, #2
 800333e:	2b22      	cmp	r3, #34	; 0x22
 8003340:	b510      	push	{r4, lr}
 8003342:	460c      	mov	r4, r1
 8003344:	d904      	bls.n	8003350 <__itoa+0x14>
 8003346:	2300      	movs	r3, #0
 8003348:	461c      	mov	r4, r3
 800334a:	700b      	strb	r3, [r1, #0]
 800334c:	4620      	mov	r0, r4
 800334e:	bd10      	pop	{r4, pc}
 8003350:	2a0a      	cmp	r2, #10
 8003352:	d109      	bne.n	8003368 <__itoa+0x2c>
 8003354:	2800      	cmp	r0, #0
 8003356:	da07      	bge.n	8003368 <__itoa+0x2c>
 8003358:	232d      	movs	r3, #45	; 0x2d
 800335a:	700b      	strb	r3, [r1, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	4240      	negs	r0, r0
 8003360:	4421      	add	r1, r4
 8003362:	f000 f80d 	bl	8003380 <__utoa>
 8003366:	e7f1      	b.n	800334c <__itoa+0x10>
 8003368:	2100      	movs	r1, #0
 800336a:	e7f9      	b.n	8003360 <__itoa+0x24>

0800336c <itoa>:
 800336c:	f7ff bfe6 	b.w	800333c <__itoa>

08003370 <memset>:
 8003370:	4603      	mov	r3, r0
 8003372:	4402      	add	r2, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <__utoa>:
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	4605      	mov	r5, r0
 8003386:	460b      	mov	r3, r1
 8003388:	466e      	mov	r6, sp
 800338a:	4c1d      	ldr	r4, [pc, #116]	; (8003400 <__utoa+0x80>)
 800338c:	f104 0c20 	add.w	ip, r4, #32
 8003390:	4637      	mov	r7, r6
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	6861      	ldr	r1, [r4, #4]
 8003396:	3408      	adds	r4, #8
 8003398:	c703      	stmia	r7!, {r0, r1}
 800339a:	4564      	cmp	r4, ip
 800339c:	463e      	mov	r6, r7
 800339e:	d1f7      	bne.n	8003390 <__utoa+0x10>
 80033a0:	7921      	ldrb	r1, [r4, #4]
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	7139      	strb	r1, [r7, #4]
 80033a6:	1e91      	subs	r1, r2, #2
 80033a8:	2922      	cmp	r1, #34	; 0x22
 80033aa:	6038      	str	r0, [r7, #0]
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	d904      	bls.n	80033bc <__utoa+0x3c>
 80033b2:	7019      	strb	r1, [r3, #0]
 80033b4:	460b      	mov	r3, r1
 80033b6:	4618      	mov	r0, r3
 80033b8:	b00b      	add	sp, #44	; 0x2c
 80033ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033bc:	1e58      	subs	r0, r3, #1
 80033be:	4684      	mov	ip, r0
 80033c0:	fbb5 f7f2 	udiv	r7, r5, r2
 80033c4:	fb02 5617 	mls	r6, r2, r7, r5
 80033c8:	3628      	adds	r6, #40	; 0x28
 80033ca:	446e      	add	r6, sp
 80033cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80033d0:	460c      	mov	r4, r1
 80033d2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80033d6:	462e      	mov	r6, r5
 80033d8:	42b2      	cmp	r2, r6
 80033da:	463d      	mov	r5, r7
 80033dc:	f101 0101 	add.w	r1, r1, #1
 80033e0:	d9ee      	bls.n	80033c0 <__utoa+0x40>
 80033e2:	2200      	movs	r2, #0
 80033e4:	545a      	strb	r2, [r3, r1]
 80033e6:	1919      	adds	r1, r3, r4
 80033e8:	1aa5      	subs	r5, r4, r2
 80033ea:	42aa      	cmp	r2, r5
 80033ec:	dae3      	bge.n	80033b6 <__utoa+0x36>
 80033ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80033f2:	780e      	ldrb	r6, [r1, #0]
 80033f4:	3201      	adds	r2, #1
 80033f6:	7006      	strb	r6, [r0, #0]
 80033f8:	f801 5901 	strb.w	r5, [r1], #-1
 80033fc:	e7f4      	b.n	80033e8 <__utoa+0x68>
 80033fe:	bf00      	nop
 8003400:	08005b80 	.word	0x08005b80

08003404 <print_e>:
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	b08b      	sub	sp, #44	; 0x2c
 8003408:	460d      	mov	r5, r1
 800340a:	a908      	add	r1, sp, #32
 800340c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800340e:	9104      	str	r1, [sp, #16]
 8003410:	a907      	add	r1, sp, #28
 8003412:	9103      	str	r1, [sp, #12]
 8003414:	a909      	add	r1, sp, #36	; 0x24
 8003416:	9102      	str	r1, [sp, #8]
 8003418:	1c71      	adds	r1, r6, #1
 800341a:	9101      	str	r1, [sp, #4]
 800341c:	2102      	movs	r1, #2
 800341e:	9100      	str	r1, [sp, #0]
 8003420:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8003424:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003426:	f000 fe2f 	bl	8004088 <_dtoa_r>
 800342a:	f242 730f 	movw	r3, #9999	; 0x270f
 800342e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003430:	4601      	mov	r1, r0
 8003432:	429a      	cmp	r2, r3
 8003434:	d104      	bne.n	8003440 <print_e+0x3c>
 8003436:	4628      	mov	r0, r5
 8003438:	f000 fd74 	bl	8003f24 <strcpy>
 800343c:	b00b      	add	sp, #44	; 0x2c
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003440:	462b      	mov	r3, r5
 8003442:	7800      	ldrb	r0, [r0, #0]
 8003444:	2e00      	cmp	r6, #0
 8003446:	f803 0b01 	strb.w	r0, [r3], #1
 800344a:	bfc8      	it	gt
 800344c:	2401      	movgt	r4, #1
 800344e:	202e      	movs	r0, #46	; 0x2e
 8003450:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003454:	b10d      	cbz	r5, 800345a <print_e+0x56>
 8003456:	2e00      	cmp	r6, #0
 8003458:	dc37      	bgt.n	80034ca <print_e+0xc6>
 800345a:	2f67      	cmp	r7, #103	; 0x67
 800345c:	d046      	beq.n	80034ec <print_e+0xe8>
 800345e:	2f47      	cmp	r7, #71	; 0x47
 8003460:	d046      	beq.n	80034f0 <print_e+0xec>
 8003462:	212e      	movs	r1, #46	; 0x2e
 8003464:	2030      	movs	r0, #48	; 0x30
 8003466:	2e00      	cmp	r6, #0
 8003468:	dc38      	bgt.n	80034dc <print_e+0xd8>
 800346a:	1e51      	subs	r1, r2, #1
 800346c:	2900      	cmp	r1, #0
 800346e:	bfa8      	it	ge
 8003470:	222b      	movge	r2, #43	; 0x2b
 8003472:	4618      	mov	r0, r3
 8003474:	9109      	str	r1, [sp, #36]	; 0x24
 8003476:	bfbe      	ittt	lt
 8003478:	212d      	movlt	r1, #45	; 0x2d
 800347a:	f1c2 0201 	rsblt	r2, r2, #1
 800347e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8003480:	f800 7b02 	strb.w	r7, [r0], #2
 8003484:	bfa8      	it	ge
 8003486:	705a      	strbge	r2, [r3, #1]
 8003488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800348a:	bfb8      	it	lt
 800348c:	7059      	strblt	r1, [r3, #1]
 800348e:	2a63      	cmp	r2, #99	; 0x63
 8003490:	dd0b      	ble.n	80034aa <print_e+0xa6>
 8003492:	2164      	movs	r1, #100	; 0x64
 8003494:	fb92 f1f1 	sdiv	r1, r2, r1
 8003498:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800349c:	1cd8      	adds	r0, r3, #3
 800349e:	709c      	strb	r4, [r3, #2]
 80034a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80034a4:	fb03 2201 	mla	r2, r3, r1, r2
 80034a8:	9209      	str	r2, [sp, #36]	; 0x24
 80034aa:	220a      	movs	r2, #10
 80034ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ae:	fb93 f2f2 	sdiv	r2, r3, r2
 80034b2:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80034b6:	7001      	strb	r1, [r0, #0]
 80034b8:	f06f 0109 	mvn.w	r1, #9
 80034bc:	fb01 3302 	mla	r3, r1, r2, r3
 80034c0:	3330      	adds	r3, #48	; 0x30
 80034c2:	7043      	strb	r3, [r0, #1]
 80034c4:	2300      	movs	r3, #0
 80034c6:	7083      	strb	r3, [r0, #2]
 80034c8:	e7b8      	b.n	800343c <print_e+0x38>
 80034ca:	b10c      	cbz	r4, 80034d0 <print_e+0xcc>
 80034cc:	f803 0b01 	strb.w	r0, [r3], #1
 80034d0:	780c      	ldrb	r4, [r1, #0]
 80034d2:	3e01      	subs	r6, #1
 80034d4:	f803 4b01 	strb.w	r4, [r3], #1
 80034d8:	2400      	movs	r4, #0
 80034da:	e7b9      	b.n	8003450 <print_e+0x4c>
 80034dc:	b10c      	cbz	r4, 80034e2 <print_e+0xde>
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	2400      	movs	r4, #0
 80034e4:	f803 0b01 	strb.w	r0, [r3], #1
 80034e8:	3e01      	subs	r6, #1
 80034ea:	e7bc      	b.n	8003466 <print_e+0x62>
 80034ec:	2765      	movs	r7, #101	; 0x65
 80034ee:	e7bc      	b.n	800346a <print_e+0x66>
 80034f0:	2745      	movs	r7, #69	; 0x45
 80034f2:	e7ba      	b.n	800346a <print_e+0x66>
 80034f4:	0000      	movs	r0, r0
	...

080034f8 <_gcvt>:
 80034f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034fc:	4690      	mov	r8, r2
 80034fe:	461c      	mov	r4, r3
 8003500:	b08b      	sub	sp, #44	; 0x2c
 8003502:	4681      	mov	r9, r0
 8003504:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8003508:	2200      	movs	r2, #0
 800350a:	2300      	movs	r3, #0
 800350c:	4640      	mov	r0, r8
 800350e:	4621      	mov	r1, r4
 8003510:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003512:	f7fd fa4b 	bl	80009ac <__aeabi_dcmplt>
 8003516:	b108      	cbz	r0, 800351c <_gcvt+0x24>
 8003518:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800351c:	2200      	movs	r2, #0
 800351e:	2300      	movs	r3, #0
 8003520:	4640      	mov	r0, r8
 8003522:	4621      	mov	r1, r4
 8003524:	f7fd fa38 	bl	8000998 <__aeabi_dcmpeq>
 8003528:	b138      	cbz	r0, 800353a <_gcvt+0x42>
 800352a:	2330      	movs	r3, #48	; 0x30
 800352c:	702b      	strb	r3, [r5, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	706b      	strb	r3, [r5, #1]
 8003532:	4628      	mov	r0, r5
 8003534:	b00b      	add	sp, #44	; 0x2c
 8003536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800353a:	4640      	mov	r0, r8
 800353c:	a34c      	add	r3, pc, #304	; (adr r3, 8003670 <_gcvt+0x178>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	4621      	mov	r1, r4
 8003544:	f7fd fa3c 	bl	80009c0 <__aeabi_dcmple>
 8003548:	b160      	cbz	r0, 8003564 <_gcvt+0x6c>
 800354a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800354e:	3f01      	subs	r7, #1
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	4642      	mov	r2, r8
 8003554:	4623      	mov	r3, r4
 8003556:	4629      	mov	r1, r5
 8003558:	4648      	mov	r0, r9
 800355a:	9602      	str	r6, [sp, #8]
 800355c:	9700      	str	r7, [sp, #0]
 800355e:	f7ff ff51 	bl	8003404 <print_e>
 8003562:	e7e6      	b.n	8003532 <_gcvt+0x3a>
 8003564:	4638      	mov	r0, r7
 8003566:	f000 fc09 	bl	8003d7c <_mprec_log10>
 800356a:	4642      	mov	r2, r8
 800356c:	4623      	mov	r3, r4
 800356e:	f7fd fa27 	bl	80009c0 <__aeabi_dcmple>
 8003572:	2800      	cmp	r0, #0
 8003574:	d1e9      	bne.n	800354a <_gcvt+0x52>
 8003576:	ab09      	add	r3, sp, #36	; 0x24
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	ab08      	add	r3, sp, #32
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	ab07      	add	r3, sp, #28
 8003580:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003584:	2302      	movs	r3, #2
 8003586:	4642      	mov	r2, r8
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4648      	mov	r0, r9
 800358c:	4623      	mov	r3, r4
 800358e:	f000 fd7b 	bl	8004088 <_dtoa_r>
 8003592:	f242 730f 	movw	r3, #9999	; 0x270f
 8003596:	9a07      	ldr	r2, [sp, #28]
 8003598:	4601      	mov	r1, r0
 800359a:	429a      	cmp	r2, r3
 800359c:	d00f      	beq.n	80035be <_gcvt+0xc6>
 800359e:	462b      	mov	r3, r5
 80035a0:	442f      	add	r7, r5
 80035a2:	4608      	mov	r0, r1
 80035a4:	f811 cb01 	ldrb.w	ip, [r1], #1
 80035a8:	9a07      	ldr	r2, [sp, #28]
 80035aa:	1afc      	subs	r4, r7, r3
 80035ac:	f1bc 0f00 	cmp.w	ip, #0
 80035b0:	d001      	beq.n	80035b6 <_gcvt+0xbe>
 80035b2:	2a00      	cmp	r2, #0
 80035b4:	dc07      	bgt.n	80035c6 <_gcvt+0xce>
 80035b6:	2100      	movs	r1, #0
 80035b8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80035bc:	e00c      	b.n	80035d8 <_gcvt+0xe0>
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 fcb0 	bl	8003f24 <strcpy>
 80035c4:	e7b5      	b.n	8003532 <_gcvt+0x3a>
 80035c6:	3a01      	subs	r2, #1
 80035c8:	f803 cb01 	strb.w	ip, [r3], #1
 80035cc:	9207      	str	r2, [sp, #28]
 80035ce:	e7e8      	b.n	80035a2 <_gcvt+0xaa>
 80035d0:	2101      	movs	r1, #1
 80035d2:	f803 cb01 	strb.w	ip, [r3], #1
 80035d6:	3c01      	subs	r4, #1
 80035d8:	2a00      	cmp	r2, #0
 80035da:	4617      	mov	r7, r2
 80035dc:	dc2a      	bgt.n	8003634 <_gcvt+0x13c>
 80035de:	b101      	cbz	r1, 80035e2 <_gcvt+0xea>
 80035e0:	9207      	str	r2, [sp, #28]
 80035e2:	b90e      	cbnz	r6, 80035e8 <_gcvt+0xf0>
 80035e4:	7802      	ldrb	r2, [r0, #0]
 80035e6:	b312      	cbz	r2, 800362e <_gcvt+0x136>
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	bf04      	itt	eq
 80035ec:	2230      	moveq	r2, #48	; 0x30
 80035ee:	f803 2b01 	strbeq.w	r2, [r3], #1
 80035f2:	222e      	movs	r2, #46	; 0x2e
 80035f4:	4619      	mov	r1, r3
 80035f6:	2700      	movs	r7, #0
 80035f8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	9a07      	ldr	r2, [sp, #28]
 8003600:	eba2 0c03 	sub.w	ip, r2, r3
 8003604:	eb1c 0f01 	cmn.w	ip, r1
 8003608:	d41c      	bmi.n	8003644 <_gcvt+0x14c>
 800360a:	2a00      	cmp	r2, #0
 800360c:	f1c2 0100 	rsb	r1, r2, #0
 8003610:	bfc8      	it	gt
 8003612:	2100      	movgt	r1, #0
 8003614:	f101 0c01 	add.w	ip, r1, #1
 8003618:	4463      	add	r3, ip
 800361a:	440a      	add	r2, r1
 800361c:	b107      	cbz	r7, 8003620 <_gcvt+0x128>
 800361e:	9207      	str	r2, [sp, #28]
 8003620:	1e42      	subs	r2, r0, #1
 8003622:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003626:	b109      	cbz	r1, 800362c <_gcvt+0x134>
 8003628:	2c00      	cmp	r4, #0
 800362a:	dc0f      	bgt.n	800364c <_gcvt+0x154>
 800362c:	b9de      	cbnz	r6, 8003666 <_gcvt+0x16e>
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e77e      	b.n	8003532 <_gcvt+0x3a>
 8003634:	2c00      	cmp	r4, #0
 8003636:	f102 32ff 	add.w	r2, r2, #4294967295
 800363a:	dcc9      	bgt.n	80035d0 <_gcvt+0xd8>
 800363c:	2900      	cmp	r1, #0
 800363e:	d0d0      	beq.n	80035e2 <_gcvt+0xea>
 8003640:	9707      	str	r7, [sp, #28]
 8003642:	e7ce      	b.n	80035e2 <_gcvt+0xea>
 8003644:	2701      	movs	r7, #1
 8003646:	f801 ef01 	strb.w	lr, [r1, #1]!
 800364a:	e7db      	b.n	8003604 <_gcvt+0x10c>
 800364c:	f803 1b01 	strb.w	r1, [r3], #1
 8003650:	3c01      	subs	r4, #1
 8003652:	e7e6      	b.n	8003622 <_gcvt+0x12a>
 8003654:	f802 6b01 	strb.w	r6, [r2], #1
 8003658:	1a81      	subs	r1, r0, r2
 800365a:	2900      	cmp	r1, #0
 800365c:	dcfa      	bgt.n	8003654 <_gcvt+0x15c>
 800365e:	2c00      	cmp	r4, #0
 8003660:	bfa8      	it	ge
 8003662:	191b      	addge	r3, r3, r4
 8003664:	e7e3      	b.n	800362e <_gcvt+0x136>
 8003666:	461a      	mov	r2, r3
 8003668:	2630      	movs	r6, #48	; 0x30
 800366a:	1918      	adds	r0, r3, r4
 800366c:	e7f4      	b.n	8003658 <_gcvt+0x160>
 800366e:	bf00      	nop
 8003670:	eb1c432d 	.word	0xeb1c432d
 8003674:	3f1a36e2 	.word	0x3f1a36e2

08003678 <_Balloc>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800367c:	4604      	mov	r4, r0
 800367e:	460d      	mov	r5, r1
 8003680:	b976      	cbnz	r6, 80036a0 <_Balloc+0x28>
 8003682:	2010      	movs	r0, #16
 8003684:	f001 fb00 	bl	8004c88 <malloc>
 8003688:	4602      	mov	r2, r0
 800368a:	6260      	str	r0, [r4, #36]	; 0x24
 800368c:	b920      	cbnz	r0, 8003698 <_Balloc+0x20>
 800368e:	2166      	movs	r1, #102	; 0x66
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <_Balloc+0x78>)
 8003692:	4818      	ldr	r0, [pc, #96]	; (80036f4 <_Balloc+0x7c>)
 8003694:	f000 fc4e 	bl	8003f34 <__assert_func>
 8003698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800369c:	6006      	str	r6, [r0, #0]
 800369e:	60c6      	str	r6, [r0, #12]
 80036a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80036a2:	68f3      	ldr	r3, [r6, #12]
 80036a4:	b183      	cbz	r3, 80036c8 <_Balloc+0x50>
 80036a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80036ae:	b9b8      	cbnz	r0, 80036e0 <_Balloc+0x68>
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f605 	lsl.w	r6, r1, r5
 80036b6:	1d72      	adds	r2, r6, #5
 80036b8:	4620      	mov	r0, r4
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	f000 fb7a 	bl	8003db4 <_calloc_r>
 80036c0:	b160      	cbz	r0, 80036dc <_Balloc+0x64>
 80036c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80036c6:	e00e      	b.n	80036e6 <_Balloc+0x6e>
 80036c8:	2221      	movs	r2, #33	; 0x21
 80036ca:	2104      	movs	r1, #4
 80036cc:	4620      	mov	r0, r4
 80036ce:	f000 fb71 	bl	8003db4 <_calloc_r>
 80036d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d4:	60f0      	str	r0, [r6, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e4      	bne.n	80036a6 <_Balloc+0x2e>
 80036dc:	2000      	movs	r0, #0
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	6802      	ldr	r2, [r0, #0]
 80036e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80036e6:	2300      	movs	r3, #0
 80036e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80036ec:	e7f7      	b.n	80036de <_Balloc+0x66>
 80036ee:	bf00      	nop
 80036f0:	08005ba5 	.word	0x08005ba5
 80036f4:	08005bbc 	.word	0x08005bbc

080036f8 <_Bfree>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80036fc:	4605      	mov	r5, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	b976      	cbnz	r6, 8003720 <_Bfree+0x28>
 8003702:	2010      	movs	r0, #16
 8003704:	f001 fac0 	bl	8004c88 <malloc>
 8003708:	4602      	mov	r2, r0
 800370a:	6268      	str	r0, [r5, #36]	; 0x24
 800370c:	b920      	cbnz	r0, 8003718 <_Bfree+0x20>
 800370e:	218a      	movs	r1, #138	; 0x8a
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <_Bfree+0x3c>)
 8003712:	4809      	ldr	r0, [pc, #36]	; (8003738 <_Bfree+0x40>)
 8003714:	f000 fc0e 	bl	8003f34 <__assert_func>
 8003718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800371c:	6006      	str	r6, [r0, #0]
 800371e:	60c6      	str	r6, [r0, #12]
 8003720:	b13c      	cbz	r4, 8003732 <_Bfree+0x3a>
 8003722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003724:	6862      	ldr	r2, [r4, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800372c:	6021      	str	r1, [r4, #0]
 800372e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	08005ba5 	.word	0x08005ba5
 8003738:	08005bbc 	.word	0x08005bbc

0800373c <__multadd>:
 800373c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003740:	4607      	mov	r7, r0
 8003742:	460c      	mov	r4, r1
 8003744:	461e      	mov	r6, r3
 8003746:	2000      	movs	r0, #0
 8003748:	690d      	ldr	r5, [r1, #16]
 800374a:	f101 0c14 	add.w	ip, r1, #20
 800374e:	f8dc 3000 	ldr.w	r3, [ip]
 8003752:	3001      	adds	r0, #1
 8003754:	b299      	uxth	r1, r3
 8003756:	fb02 6101 	mla	r1, r2, r1, r6
 800375a:	0c1e      	lsrs	r6, r3, #16
 800375c:	0c0b      	lsrs	r3, r1, #16
 800375e:	fb02 3306 	mla	r3, r2, r6, r3
 8003762:	b289      	uxth	r1, r1
 8003764:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003768:	4285      	cmp	r5, r0
 800376a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800376e:	f84c 1b04 	str.w	r1, [ip], #4
 8003772:	dcec      	bgt.n	800374e <__multadd+0x12>
 8003774:	b30e      	cbz	r6, 80037ba <__multadd+0x7e>
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	42ab      	cmp	r3, r5
 800377a:	dc19      	bgt.n	80037b0 <__multadd+0x74>
 800377c:	6861      	ldr	r1, [r4, #4]
 800377e:	4638      	mov	r0, r7
 8003780:	3101      	adds	r1, #1
 8003782:	f7ff ff79 	bl	8003678 <_Balloc>
 8003786:	4680      	mov	r8, r0
 8003788:	b928      	cbnz	r0, 8003796 <__multadd+0x5a>
 800378a:	4602      	mov	r2, r0
 800378c:	21b5      	movs	r1, #181	; 0xb5
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <__multadd+0x84>)
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <__multadd+0x88>)
 8003792:	f000 fbcf 	bl	8003f34 <__assert_func>
 8003796:	6922      	ldr	r2, [r4, #16]
 8003798:	f104 010c 	add.w	r1, r4, #12
 800379c:	3202      	adds	r2, #2
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	300c      	adds	r0, #12
 80037a2:	f001 fa79 	bl	8004c98 <memcpy>
 80037a6:	4621      	mov	r1, r4
 80037a8:	4638      	mov	r0, r7
 80037aa:	f7ff ffa5 	bl	80036f8 <_Bfree>
 80037ae:	4644      	mov	r4, r8
 80037b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80037b4:	3501      	adds	r5, #1
 80037b6:	615e      	str	r6, [r3, #20]
 80037b8:	6125      	str	r5, [r4, #16]
 80037ba:	4620      	mov	r0, r4
 80037bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c0:	08005c18 	.word	0x08005c18
 80037c4:	08005bbc 	.word	0x08005bbc

080037c8 <__hi0bits>:
 80037c8:	0c02      	lsrs	r2, r0, #16
 80037ca:	0412      	lsls	r2, r2, #16
 80037cc:	4603      	mov	r3, r0
 80037ce:	b9ca      	cbnz	r2, 8003804 <__hi0bits+0x3c>
 80037d0:	0403      	lsls	r3, r0, #16
 80037d2:	2010      	movs	r0, #16
 80037d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80037d8:	bf04      	itt	eq
 80037da:	021b      	lsleq	r3, r3, #8
 80037dc:	3008      	addeq	r0, #8
 80037de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80037e2:	bf04      	itt	eq
 80037e4:	011b      	lsleq	r3, r3, #4
 80037e6:	3004      	addeq	r0, #4
 80037e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80037ec:	bf04      	itt	eq
 80037ee:	009b      	lsleq	r3, r3, #2
 80037f0:	3002      	addeq	r0, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db05      	blt.n	8003802 <__hi0bits+0x3a>
 80037f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80037fa:	f100 0001 	add.w	r0, r0, #1
 80037fe:	bf08      	it	eq
 8003800:	2020      	moveq	r0, #32
 8003802:	4770      	bx	lr
 8003804:	2000      	movs	r0, #0
 8003806:	e7e5      	b.n	80037d4 <__hi0bits+0xc>

08003808 <__lo0bits>:
 8003808:	6803      	ldr	r3, [r0, #0]
 800380a:	4602      	mov	r2, r0
 800380c:	f013 0007 	ands.w	r0, r3, #7
 8003810:	d00b      	beq.n	800382a <__lo0bits+0x22>
 8003812:	07d9      	lsls	r1, r3, #31
 8003814:	d421      	bmi.n	800385a <__lo0bits+0x52>
 8003816:	0798      	lsls	r0, r3, #30
 8003818:	bf49      	itett	mi
 800381a:	085b      	lsrmi	r3, r3, #1
 800381c:	089b      	lsrpl	r3, r3, #2
 800381e:	2001      	movmi	r0, #1
 8003820:	6013      	strmi	r3, [r2, #0]
 8003822:	bf5c      	itt	pl
 8003824:	2002      	movpl	r0, #2
 8003826:	6013      	strpl	r3, [r2, #0]
 8003828:	4770      	bx	lr
 800382a:	b299      	uxth	r1, r3
 800382c:	b909      	cbnz	r1, 8003832 <__lo0bits+0x2a>
 800382e:	2010      	movs	r0, #16
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2d9      	uxtb	r1, r3
 8003834:	b909      	cbnz	r1, 800383a <__lo0bits+0x32>
 8003836:	3008      	adds	r0, #8
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	0719      	lsls	r1, r3, #28
 800383c:	bf04      	itt	eq
 800383e:	091b      	lsreq	r3, r3, #4
 8003840:	3004      	addeq	r0, #4
 8003842:	0799      	lsls	r1, r3, #30
 8003844:	bf04      	itt	eq
 8003846:	089b      	lsreq	r3, r3, #2
 8003848:	3002      	addeq	r0, #2
 800384a:	07d9      	lsls	r1, r3, #31
 800384c:	d403      	bmi.n	8003856 <__lo0bits+0x4e>
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	f100 0001 	add.w	r0, r0, #1
 8003854:	d003      	beq.n	800385e <__lo0bits+0x56>
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4770      	bx	lr
 800385a:	2000      	movs	r0, #0
 800385c:	4770      	bx	lr
 800385e:	2020      	movs	r0, #32
 8003860:	4770      	bx	lr
	...

08003864 <__i2b>:
 8003864:	b510      	push	{r4, lr}
 8003866:	460c      	mov	r4, r1
 8003868:	2101      	movs	r1, #1
 800386a:	f7ff ff05 	bl	8003678 <_Balloc>
 800386e:	4602      	mov	r2, r0
 8003870:	b928      	cbnz	r0, 800387e <__i2b+0x1a>
 8003872:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <__i2b+0x24>)
 8003878:	4804      	ldr	r0, [pc, #16]	; (800388c <__i2b+0x28>)
 800387a:	f000 fb5b 	bl	8003f34 <__assert_func>
 800387e:	2301      	movs	r3, #1
 8003880:	6144      	str	r4, [r0, #20]
 8003882:	6103      	str	r3, [r0, #16]
 8003884:	bd10      	pop	{r4, pc}
 8003886:	bf00      	nop
 8003888:	08005c18 	.word	0x08005c18
 800388c:	08005bbc 	.word	0x08005bbc

08003890 <__multiply>:
 8003890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003894:	4691      	mov	r9, r2
 8003896:	690a      	ldr	r2, [r1, #16]
 8003898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800389c:	460c      	mov	r4, r1
 800389e:	429a      	cmp	r2, r3
 80038a0:	bfbe      	ittt	lt
 80038a2:	460b      	movlt	r3, r1
 80038a4:	464c      	movlt	r4, r9
 80038a6:	4699      	movlt	r9, r3
 80038a8:	6927      	ldr	r7, [r4, #16]
 80038aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80038ae:	68a3      	ldr	r3, [r4, #8]
 80038b0:	6861      	ldr	r1, [r4, #4]
 80038b2:	eb07 060a 	add.w	r6, r7, sl
 80038b6:	42b3      	cmp	r3, r6
 80038b8:	b085      	sub	sp, #20
 80038ba:	bfb8      	it	lt
 80038bc:	3101      	addlt	r1, #1
 80038be:	f7ff fedb 	bl	8003678 <_Balloc>
 80038c2:	b930      	cbnz	r0, 80038d2 <__multiply+0x42>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f240 115d 	movw	r1, #349	; 0x15d
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <__multiply+0x148>)
 80038cc:	4843      	ldr	r0, [pc, #268]	; (80039dc <__multiply+0x14c>)
 80038ce:	f000 fb31 	bl	8003f34 <__assert_func>
 80038d2:	f100 0514 	add.w	r5, r0, #20
 80038d6:	462b      	mov	r3, r5
 80038d8:	2200      	movs	r2, #0
 80038da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80038de:	4543      	cmp	r3, r8
 80038e0:	d321      	bcc.n	8003926 <__multiply+0x96>
 80038e2:	f104 0314 	add.w	r3, r4, #20
 80038e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80038ea:	f109 0314 	add.w	r3, r9, #20
 80038ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80038f2:	9202      	str	r2, [sp, #8]
 80038f4:	1b3a      	subs	r2, r7, r4
 80038f6:	3a15      	subs	r2, #21
 80038f8:	f022 0203 	bic.w	r2, r2, #3
 80038fc:	3204      	adds	r2, #4
 80038fe:	f104 0115 	add.w	r1, r4, #21
 8003902:	428f      	cmp	r7, r1
 8003904:	bf38      	it	cc
 8003906:	2204      	movcc	r2, #4
 8003908:	9201      	str	r2, [sp, #4]
 800390a:	9a02      	ldr	r2, [sp, #8]
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	429a      	cmp	r2, r3
 8003910:	d80c      	bhi.n	800392c <__multiply+0x9c>
 8003912:	2e00      	cmp	r6, #0
 8003914:	dd03      	ble.n	800391e <__multiply+0x8e>
 8003916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800391a:	2b00      	cmp	r3, #0
 800391c:	d059      	beq.n	80039d2 <__multiply+0x142>
 800391e:	6106      	str	r6, [r0, #16]
 8003920:	b005      	add	sp, #20
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	f843 2b04 	str.w	r2, [r3], #4
 800392a:	e7d8      	b.n	80038de <__multiply+0x4e>
 800392c:	f8b3 a000 	ldrh.w	sl, [r3]
 8003930:	f1ba 0f00 	cmp.w	sl, #0
 8003934:	d023      	beq.n	800397e <__multiply+0xee>
 8003936:	46a9      	mov	r9, r5
 8003938:	f04f 0c00 	mov.w	ip, #0
 800393c:	f104 0e14 	add.w	lr, r4, #20
 8003940:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003944:	f8d9 1000 	ldr.w	r1, [r9]
 8003948:	fa1f fb82 	uxth.w	fp, r2
 800394c:	b289      	uxth	r1, r1
 800394e:	fb0a 110b 	mla	r1, sl, fp, r1
 8003952:	4461      	add	r1, ip
 8003954:	f8d9 c000 	ldr.w	ip, [r9]
 8003958:	0c12      	lsrs	r2, r2, #16
 800395a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800395e:	fb0a c202 	mla	r2, sl, r2, ip
 8003962:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003966:	b289      	uxth	r1, r1
 8003968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800396c:	4577      	cmp	r7, lr
 800396e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003972:	f849 1b04 	str.w	r1, [r9], #4
 8003976:	d8e3      	bhi.n	8003940 <__multiply+0xb0>
 8003978:	9a01      	ldr	r2, [sp, #4]
 800397a:	f845 c002 	str.w	ip, [r5, r2]
 800397e:	9a03      	ldr	r2, [sp, #12]
 8003980:	3304      	adds	r3, #4
 8003982:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003986:	f1b9 0f00 	cmp.w	r9, #0
 800398a:	d020      	beq.n	80039ce <__multiply+0x13e>
 800398c:	46ae      	mov	lr, r5
 800398e:	f04f 0a00 	mov.w	sl, #0
 8003992:	6829      	ldr	r1, [r5, #0]
 8003994:	f104 0c14 	add.w	ip, r4, #20
 8003998:	f8bc b000 	ldrh.w	fp, [ip]
 800399c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80039a0:	b289      	uxth	r1, r1
 80039a2:	fb09 220b 	mla	r2, r9, fp, r2
 80039a6:	4492      	add	sl, r2
 80039a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80039ac:	f84e 1b04 	str.w	r1, [lr], #4
 80039b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80039b4:	f8be 1000 	ldrh.w	r1, [lr]
 80039b8:	0c12      	lsrs	r2, r2, #16
 80039ba:	fb09 1102 	mla	r1, r9, r2, r1
 80039be:	4567      	cmp	r7, ip
 80039c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80039c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80039c8:	d8e6      	bhi.n	8003998 <__multiply+0x108>
 80039ca:	9a01      	ldr	r2, [sp, #4]
 80039cc:	50a9      	str	r1, [r5, r2]
 80039ce:	3504      	adds	r5, #4
 80039d0:	e79b      	b.n	800390a <__multiply+0x7a>
 80039d2:	3e01      	subs	r6, #1
 80039d4:	e79d      	b.n	8003912 <__multiply+0x82>
 80039d6:	bf00      	nop
 80039d8:	08005c18 	.word	0x08005c18
 80039dc:	08005bbc 	.word	0x08005bbc

080039e0 <__pow5mult>:
 80039e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e4:	4615      	mov	r5, r2
 80039e6:	f012 0203 	ands.w	r2, r2, #3
 80039ea:	4606      	mov	r6, r0
 80039ec:	460f      	mov	r7, r1
 80039ee:	d007      	beq.n	8003a00 <__pow5mult+0x20>
 80039f0:	4c25      	ldr	r4, [pc, #148]	; (8003a88 <__pow5mult+0xa8>)
 80039f2:	3a01      	subs	r2, #1
 80039f4:	2300      	movs	r3, #0
 80039f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80039fa:	f7ff fe9f 	bl	800373c <__multadd>
 80039fe:	4607      	mov	r7, r0
 8003a00:	10ad      	asrs	r5, r5, #2
 8003a02:	d03d      	beq.n	8003a80 <__pow5mult+0xa0>
 8003a04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a06:	b97c      	cbnz	r4, 8003a28 <__pow5mult+0x48>
 8003a08:	2010      	movs	r0, #16
 8003a0a:	f001 f93d 	bl	8004c88 <malloc>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6270      	str	r0, [r6, #36]	; 0x24
 8003a12:	b928      	cbnz	r0, 8003a20 <__pow5mult+0x40>
 8003a14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <__pow5mult+0xac>)
 8003a1a:	481d      	ldr	r0, [pc, #116]	; (8003a90 <__pow5mult+0xb0>)
 8003a1c:	f000 fa8a 	bl	8003f34 <__assert_func>
 8003a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a24:	6004      	str	r4, [r0, #0]
 8003a26:	60c4      	str	r4, [r0, #12]
 8003a28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a30:	b94c      	cbnz	r4, 8003a46 <__pow5mult+0x66>
 8003a32:	f240 2171 	movw	r1, #625	; 0x271
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff ff14 	bl	8003864 <__i2b>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4604      	mov	r4, r0
 8003a40:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a44:	6003      	str	r3, [r0, #0]
 8003a46:	f04f 0900 	mov.w	r9, #0
 8003a4a:	07eb      	lsls	r3, r5, #31
 8003a4c:	d50a      	bpl.n	8003a64 <__pow5mult+0x84>
 8003a4e:	4639      	mov	r1, r7
 8003a50:	4622      	mov	r2, r4
 8003a52:	4630      	mov	r0, r6
 8003a54:	f7ff ff1c 	bl	8003890 <__multiply>
 8003a58:	4680      	mov	r8, r0
 8003a5a:	4639      	mov	r1, r7
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f7ff fe4b 	bl	80036f8 <_Bfree>
 8003a62:	4647      	mov	r7, r8
 8003a64:	106d      	asrs	r5, r5, #1
 8003a66:	d00b      	beq.n	8003a80 <__pow5mult+0xa0>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	b938      	cbnz	r0, 8003a7c <__pow5mult+0x9c>
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4621      	mov	r1, r4
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff ff0d 	bl	8003890 <__multiply>
 8003a76:	6020      	str	r0, [r4, #0]
 8003a78:	f8c0 9000 	str.w	r9, [r0]
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e7e4      	b.n	8003a4a <__pow5mult+0x6a>
 8003a80:	4638      	mov	r0, r7
 8003a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a86:	bf00      	nop
 8003a88:	08005d20 	.word	0x08005d20
 8003a8c:	08005ba5 	.word	0x08005ba5
 8003a90:	08005bbc 	.word	0x08005bbc

08003a94 <__lshift>:
 8003a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a98:	460c      	mov	r4, r1
 8003a9a:	4607      	mov	r7, r0
 8003a9c:	4691      	mov	r9, r2
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	6849      	ldr	r1, [r1, #4]
 8003aa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003aa6:	68a3      	ldr	r3, [r4, #8]
 8003aa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003aac:	f108 0601 	add.w	r6, r8, #1
 8003ab0:	42b3      	cmp	r3, r6
 8003ab2:	db0b      	blt.n	8003acc <__lshift+0x38>
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f7ff fddf 	bl	8003678 <_Balloc>
 8003aba:	4605      	mov	r5, r0
 8003abc:	b948      	cbnz	r0, 8003ad2 <__lshift+0x3e>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <__lshift+0xd8>)
 8003ac6:	482a      	ldr	r0, [pc, #168]	; (8003b70 <__lshift+0xdc>)
 8003ac8:	f000 fa34 	bl	8003f34 <__assert_func>
 8003acc:	3101      	adds	r1, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__lshift+0x1c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f100 0114 	add.w	r1, r0, #20
 8003ad8:	f100 0210 	add.w	r2, r0, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	4553      	cmp	r3, sl
 8003ae0:	db37      	blt.n	8003b52 <__lshift+0xbe>
 8003ae2:	6920      	ldr	r0, [r4, #16]
 8003ae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ae8:	f104 0314 	add.w	r3, r4, #20
 8003aec:	f019 091f 	ands.w	r9, r9, #31
 8003af0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003af4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003af8:	d02f      	beq.n	8003b5a <__lshift+0xc6>
 8003afa:	468a      	mov	sl, r1
 8003afc:	f04f 0c00 	mov.w	ip, #0
 8003b00:	f1c9 0e20 	rsb	lr, r9, #32
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	fa02 f209 	lsl.w	r2, r2, r9
 8003b0a:	ea42 020c 	orr.w	r2, r2, ip
 8003b0e:	f84a 2b04 	str.w	r2, [sl], #4
 8003b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b16:	4298      	cmp	r0, r3
 8003b18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003b1c:	d8f2      	bhi.n	8003b04 <__lshift+0x70>
 8003b1e:	1b03      	subs	r3, r0, r4
 8003b20:	3b15      	subs	r3, #21
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	3304      	adds	r3, #4
 8003b28:	f104 0215 	add.w	r2, r4, #21
 8003b2c:	4290      	cmp	r0, r2
 8003b2e:	bf38      	it	cc
 8003b30:	2304      	movcc	r3, #4
 8003b32:	f841 c003 	str.w	ip, [r1, r3]
 8003b36:	f1bc 0f00 	cmp.w	ip, #0
 8003b3a:	d001      	beq.n	8003b40 <__lshift+0xac>
 8003b3c:	f108 0602 	add.w	r6, r8, #2
 8003b40:	3e01      	subs	r6, #1
 8003b42:	4638      	mov	r0, r7
 8003b44:	4621      	mov	r1, r4
 8003b46:	612e      	str	r6, [r5, #16]
 8003b48:	f7ff fdd6 	bl	80036f8 <_Bfree>
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8003b56:	3301      	adds	r3, #1
 8003b58:	e7c1      	b.n	8003ade <__lshift+0x4a>
 8003b5a:	3904      	subs	r1, #4
 8003b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b60:	4298      	cmp	r0, r3
 8003b62:	f841 2f04 	str.w	r2, [r1, #4]!
 8003b66:	d8f9      	bhi.n	8003b5c <__lshift+0xc8>
 8003b68:	e7ea      	b.n	8003b40 <__lshift+0xac>
 8003b6a:	bf00      	nop
 8003b6c:	08005c18 	.word	0x08005c18
 8003b70:	08005bbc 	.word	0x08005bbc

08003b74 <__mcmp>:
 8003b74:	4603      	mov	r3, r0
 8003b76:	690a      	ldr	r2, [r1, #16]
 8003b78:	6900      	ldr	r0, [r0, #16]
 8003b7a:	b530      	push	{r4, r5, lr}
 8003b7c:	1a80      	subs	r0, r0, r2
 8003b7e:	d10d      	bne.n	8003b9c <__mcmp+0x28>
 8003b80:	3314      	adds	r3, #20
 8003b82:	3114      	adds	r1, #20
 8003b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b94:	4295      	cmp	r5, r2
 8003b96:	d002      	beq.n	8003b9e <__mcmp+0x2a>
 8003b98:	d304      	bcc.n	8003ba4 <__mcmp+0x30>
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	bd30      	pop	{r4, r5, pc}
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	d3f4      	bcc.n	8003b8c <__mcmp+0x18>
 8003ba2:	e7fb      	b.n	8003b9c <__mcmp+0x28>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	e7f8      	b.n	8003b9c <__mcmp+0x28>
	...

08003bac <__mdiff>:
 8003bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	4607      	mov	r7, r0
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	4614      	mov	r4, r2
 8003bba:	f7ff ffdb 	bl	8003b74 <__mcmp>
 8003bbe:	1e06      	subs	r6, r0, #0
 8003bc0:	d111      	bne.n	8003be6 <__mdiff+0x3a>
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7ff fd57 	bl	8003678 <_Balloc>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	b928      	cbnz	r0, 8003bda <__mdiff+0x2e>
 8003bce:	f240 2132 	movw	r1, #562	; 0x232
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <__mdiff+0x110>)
 8003bd4:	483a      	ldr	r0, [pc, #232]	; (8003cc0 <__mdiff+0x114>)
 8003bd6:	f000 f9ad 	bl	8003f34 <__assert_func>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003be0:	4610      	mov	r0, r2
 8003be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be6:	bfa4      	itt	ge
 8003be8:	4623      	movge	r3, r4
 8003bea:	462c      	movge	r4, r5
 8003bec:	4638      	mov	r0, r7
 8003bee:	6861      	ldr	r1, [r4, #4]
 8003bf0:	bfa6      	itte	ge
 8003bf2:	461d      	movge	r5, r3
 8003bf4:	2600      	movge	r6, #0
 8003bf6:	2601      	movlt	r6, #1
 8003bf8:	f7ff fd3e 	bl	8003678 <_Balloc>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	b918      	cbnz	r0, 8003c08 <__mdiff+0x5c>
 8003c00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <__mdiff+0x110>)
 8003c06:	e7e5      	b.n	8003bd4 <__mdiff+0x28>
 8003c08:	f102 0814 	add.w	r8, r2, #20
 8003c0c:	46c2      	mov	sl, r8
 8003c0e:	f04f 0c00 	mov.w	ip, #0
 8003c12:	6927      	ldr	r7, [r4, #16]
 8003c14:	60c6      	str	r6, [r0, #12]
 8003c16:	692e      	ldr	r6, [r5, #16]
 8003c18:	f104 0014 	add.w	r0, r4, #20
 8003c1c:	f105 0914 	add.w	r9, r5, #20
 8003c20:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8003c24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003c28:	3410      	adds	r4, #16
 8003c2a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8003c2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8003c32:	fa1f f18b 	uxth.w	r1, fp
 8003c36:	448c      	add	ip, r1
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	ebac 0101 	sub.w	r1, ip, r1
 8003c40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003c44:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003c48:	b289      	uxth	r1, r1
 8003c4a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003c4e:	454e      	cmp	r6, r9
 8003c50:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003c54:	f84a 3b04 	str.w	r3, [sl], #4
 8003c58:	d8e7      	bhi.n	8003c2a <__mdiff+0x7e>
 8003c5a:	1b73      	subs	r3, r6, r5
 8003c5c:	3b15      	subs	r3, #21
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	3515      	adds	r5, #21
 8003c64:	3304      	adds	r3, #4
 8003c66:	42ae      	cmp	r6, r5
 8003c68:	bf38      	it	cc
 8003c6a:	2304      	movcc	r3, #4
 8003c6c:	4418      	add	r0, r3
 8003c6e:	4443      	add	r3, r8
 8003c70:	461e      	mov	r6, r3
 8003c72:	4605      	mov	r5, r0
 8003c74:	4575      	cmp	r5, lr
 8003c76:	d30e      	bcc.n	8003c96 <__mdiff+0xea>
 8003c78:	f10e 0103 	add.w	r1, lr, #3
 8003c7c:	1a09      	subs	r1, r1, r0
 8003c7e:	f021 0103 	bic.w	r1, r1, #3
 8003c82:	3803      	subs	r0, #3
 8003c84:	4586      	cmp	lr, r0
 8003c86:	bf38      	it	cc
 8003c88:	2100      	movcc	r1, #0
 8003c8a:	4419      	add	r1, r3
 8003c8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003c90:	b18b      	cbz	r3, 8003cb6 <__mdiff+0x10a>
 8003c92:	6117      	str	r7, [r2, #16]
 8003c94:	e7a4      	b.n	8003be0 <__mdiff+0x34>
 8003c96:	f855 8b04 	ldr.w	r8, [r5], #4
 8003c9a:	fa1f f188 	uxth.w	r1, r8
 8003c9e:	4461      	add	r1, ip
 8003ca0:	140c      	asrs	r4, r1, #16
 8003ca2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003ca6:	b289      	uxth	r1, r1
 8003ca8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003cac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003cb0:	f846 1b04 	str.w	r1, [r6], #4
 8003cb4:	e7de      	b.n	8003c74 <__mdiff+0xc8>
 8003cb6:	3f01      	subs	r7, #1
 8003cb8:	e7e8      	b.n	8003c8c <__mdiff+0xe0>
 8003cba:	bf00      	nop
 8003cbc:	08005c18 	.word	0x08005c18
 8003cc0:	08005bbc 	.word	0x08005bbc

08003cc4 <__d2b>:
 8003cc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003cc8:	2101      	movs	r1, #1
 8003cca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003cce:	4690      	mov	r8, r2
 8003cd0:	461d      	mov	r5, r3
 8003cd2:	f7ff fcd1 	bl	8003678 <_Balloc>
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	b930      	cbnz	r0, 8003ce8 <__d2b+0x24>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	f240 310a 	movw	r1, #778	; 0x30a
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <__d2b+0xb0>)
 8003ce2:	4825      	ldr	r0, [pc, #148]	; (8003d78 <__d2b+0xb4>)
 8003ce4:	f000 f926 	bl	8003f34 <__assert_func>
 8003ce8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003cec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003cf0:	bb2d      	cbnz	r5, 8003d3e <__d2b+0x7a>
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	f1b8 0300 	subs.w	r3, r8, #0
 8003cf8:	d026      	beq.n	8003d48 <__d2b+0x84>
 8003cfa:	4668      	mov	r0, sp
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f7ff fd83 	bl	8003808 <__lo0bits>
 8003d02:	9900      	ldr	r1, [sp, #0]
 8003d04:	b1f0      	cbz	r0, 8003d44 <__d2b+0x80>
 8003d06:	9a01      	ldr	r2, [sp, #4]
 8003d08:	f1c0 0320 	rsb	r3, r0, #32
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	430b      	orrs	r3, r1
 8003d12:	40c2      	lsrs	r2, r0
 8003d14:	6163      	str	r3, [r4, #20]
 8003d16:	9201      	str	r2, [sp, #4]
 8003d18:	9b01      	ldr	r3, [sp, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf14      	ite	ne
 8003d1e:	2102      	movne	r1, #2
 8003d20:	2101      	moveq	r1, #1
 8003d22:	61a3      	str	r3, [r4, #24]
 8003d24:	6121      	str	r1, [r4, #16]
 8003d26:	b1c5      	cbz	r5, 8003d5a <__d2b+0x96>
 8003d28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003d2c:	4405      	add	r5, r0
 8003d2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003d32:	603d      	str	r5, [r7, #0]
 8003d34:	6030      	str	r0, [r6, #0]
 8003d36:	4620      	mov	r0, r4
 8003d38:	b002      	add	sp, #8
 8003d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d42:	e7d6      	b.n	8003cf2 <__d2b+0x2e>
 8003d44:	6161      	str	r1, [r4, #20]
 8003d46:	e7e7      	b.n	8003d18 <__d2b+0x54>
 8003d48:	a801      	add	r0, sp, #4
 8003d4a:	f7ff fd5d 	bl	8003808 <__lo0bits>
 8003d4e:	2101      	movs	r1, #1
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	6121      	str	r1, [r4, #16]
 8003d54:	6163      	str	r3, [r4, #20]
 8003d56:	3020      	adds	r0, #32
 8003d58:	e7e5      	b.n	8003d26 <__d2b+0x62>
 8003d5a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8003d5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003d62:	6038      	str	r0, [r7, #0]
 8003d64:	6918      	ldr	r0, [r3, #16]
 8003d66:	f7ff fd2f 	bl	80037c8 <__hi0bits>
 8003d6a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8003d6e:	6031      	str	r1, [r6, #0]
 8003d70:	e7e1      	b.n	8003d36 <__d2b+0x72>
 8003d72:	bf00      	nop
 8003d74:	08005c18 	.word	0x08005c18
 8003d78:	08005bbc 	.word	0x08005bbc

08003d7c <_mprec_log10>:
 8003d7c:	2817      	cmp	r0, #23
 8003d7e:	b5d0      	push	{r4, r6, r7, lr}
 8003d80:	4604      	mov	r4, r0
 8003d82:	dc05      	bgt.n	8003d90 <_mprec_log10+0x14>
 8003d84:	4808      	ldr	r0, [pc, #32]	; (8003da8 <_mprec_log10+0x2c>)
 8003d86:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003d8a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d8e:	bdd0      	pop	{r4, r6, r7, pc}
 8003d90:	2000      	movs	r0, #0
 8003d92:	2600      	movs	r6, #0
 8003d94:	4905      	ldr	r1, [pc, #20]	; (8003dac <_mprec_log10+0x30>)
 8003d96:	4f06      	ldr	r7, [pc, #24]	; (8003db0 <_mprec_log10+0x34>)
 8003d98:	4632      	mov	r2, r6
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	f7fc fb94 	bl	80004c8 <__aeabi_dmul>
 8003da0:	3c01      	subs	r4, #1
 8003da2:	d1f9      	bne.n	8003d98 <_mprec_log10+0x1c>
 8003da4:	e7f3      	b.n	8003d8e <_mprec_log10+0x12>
 8003da6:	bf00      	nop
 8003da8:	08005c58 	.word	0x08005c58
 8003dac:	3ff00000 	.word	0x3ff00000
 8003db0:	40240000 	.word	0x40240000

08003db4 <_calloc_r>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	fba1 5402 	umull	r5, r4, r1, r2
 8003dba:	b934      	cbnz	r4, 8003dca <_calloc_r+0x16>
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f000 f82d 	bl	8003e1c <_malloc_r>
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	b928      	cbnz	r0, 8003dd2 <_calloc_r+0x1e>
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
 8003dca:	220c      	movs	r2, #12
 8003dcc:	2600      	movs	r6, #0
 8003dce:	6002      	str	r2, [r0, #0]
 8003dd0:	e7f9      	b.n	8003dc6 <_calloc_r+0x12>
 8003dd2:	462a      	mov	r2, r5
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	f7ff facb 	bl	8003370 <memset>
 8003dda:	e7f4      	b.n	8003dc6 <_calloc_r+0x12>

08003ddc <sbrk_aligned>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4e0e      	ldr	r6, [pc, #56]	; (8003e18 <sbrk_aligned+0x3c>)
 8003de0:	460c      	mov	r4, r1
 8003de2:	6831      	ldr	r1, [r6, #0]
 8003de4:	4605      	mov	r5, r0
 8003de6:	b911      	cbnz	r1, 8003dee <sbrk_aligned+0x12>
 8003de8:	f000 f88c 	bl	8003f04 <_sbrk_r>
 8003dec:	6030      	str	r0, [r6, #0]
 8003dee:	4621      	mov	r1, r4
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 f887 	bl	8003f04 <_sbrk_r>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	d00a      	beq.n	8003e10 <sbrk_aligned+0x34>
 8003dfa:	1cc4      	adds	r4, r0, #3
 8003dfc:	f024 0403 	bic.w	r4, r4, #3
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d007      	beq.n	8003e14 <sbrk_aligned+0x38>
 8003e04:	1a21      	subs	r1, r4, r0
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f87c 	bl	8003f04 <_sbrk_r>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d101      	bne.n	8003e14 <sbrk_aligned+0x38>
 8003e10:	f04f 34ff 	mov.w	r4, #4294967295
 8003e14:	4620      	mov	r0, r4
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	200001a8 	.word	0x200001a8

08003e1c <_malloc_r>:
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	1ccd      	adds	r5, r1, #3
 8003e22:	f025 0503 	bic.w	r5, r5, #3
 8003e26:	3508      	adds	r5, #8
 8003e28:	2d0c      	cmp	r5, #12
 8003e2a:	bf38      	it	cc
 8003e2c:	250c      	movcc	r5, #12
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	4607      	mov	r7, r0
 8003e32:	db01      	blt.n	8003e38 <_malloc_r+0x1c>
 8003e34:	42a9      	cmp	r1, r5
 8003e36:	d905      	bls.n	8003e44 <_malloc_r+0x28>
 8003e38:	230c      	movs	r3, #12
 8003e3a:	2600      	movs	r6, #0
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e44:	4e2e      	ldr	r6, [pc, #184]	; (8003f00 <_malloc_r+0xe4>)
 8003e46:	f000 ff35 	bl	8004cb4 <__malloc_lock>
 8003e4a:	6833      	ldr	r3, [r6, #0]
 8003e4c:	461c      	mov	r4, r3
 8003e4e:	bb34      	cbnz	r4, 8003e9e <_malloc_r+0x82>
 8003e50:	4629      	mov	r1, r5
 8003e52:	4638      	mov	r0, r7
 8003e54:	f7ff ffc2 	bl	8003ddc <sbrk_aligned>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	d14d      	bne.n	8003efa <_malloc_r+0xde>
 8003e5e:	6834      	ldr	r4, [r6, #0]
 8003e60:	4626      	mov	r6, r4
 8003e62:	2e00      	cmp	r6, #0
 8003e64:	d140      	bne.n	8003ee8 <_malloc_r+0xcc>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	eb04 0803 	add.w	r8, r4, r3
 8003e70:	f000 f848 	bl	8003f04 <_sbrk_r>
 8003e74:	4580      	cmp	r8, r0
 8003e76:	d13a      	bne.n	8003eee <_malloc_r+0xd2>
 8003e78:	6821      	ldr	r1, [r4, #0]
 8003e7a:	3503      	adds	r5, #3
 8003e7c:	1a6d      	subs	r5, r5, r1
 8003e7e:	f025 0503 	bic.w	r5, r5, #3
 8003e82:	3508      	adds	r5, #8
 8003e84:	2d0c      	cmp	r5, #12
 8003e86:	bf38      	it	cc
 8003e88:	250c      	movcc	r5, #12
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7ff ffa5 	bl	8003ddc <sbrk_aligned>
 8003e92:	3001      	adds	r0, #1
 8003e94:	d02b      	beq.n	8003eee <_malloc_r+0xd2>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	442b      	add	r3, r5
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	e00e      	b.n	8003ebc <_malloc_r+0xa0>
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	1b52      	subs	r2, r2, r5
 8003ea2:	d41e      	bmi.n	8003ee2 <_malloc_r+0xc6>
 8003ea4:	2a0b      	cmp	r2, #11
 8003ea6:	d916      	bls.n	8003ed6 <_malloc_r+0xba>
 8003ea8:	1961      	adds	r1, r4, r5
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	6025      	str	r5, [r4, #0]
 8003eae:	bf18      	it	ne
 8003eb0:	6059      	strne	r1, [r3, #4]
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	bf08      	it	eq
 8003eb6:	6031      	streq	r1, [r6, #0]
 8003eb8:	5162      	str	r2, [r4, r5]
 8003eba:	604b      	str	r3, [r1, #4]
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f104 060b 	add.w	r6, r4, #11
 8003ec2:	f000 fefd 	bl	8004cc0 <__malloc_unlock>
 8003ec6:	f026 0607 	bic.w	r6, r6, #7
 8003eca:	1d23      	adds	r3, r4, #4
 8003ecc:	1af2      	subs	r2, r6, r3
 8003ece:	d0b6      	beq.n	8003e3e <_malloc_r+0x22>
 8003ed0:	1b9b      	subs	r3, r3, r6
 8003ed2:	50a3      	str	r3, [r4, r2]
 8003ed4:	e7b3      	b.n	8003e3e <_malloc_r+0x22>
 8003ed6:	6862      	ldr	r2, [r4, #4]
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	bf0c      	ite	eq
 8003edc:	6032      	streq	r2, [r6, #0]
 8003ede:	605a      	strne	r2, [r3, #4]
 8003ee0:	e7ec      	b.n	8003ebc <_malloc_r+0xa0>
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	6864      	ldr	r4, [r4, #4]
 8003ee6:	e7b2      	b.n	8003e4e <_malloc_r+0x32>
 8003ee8:	4634      	mov	r4, r6
 8003eea:	6876      	ldr	r6, [r6, #4]
 8003eec:	e7b9      	b.n	8003e62 <_malloc_r+0x46>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	f000 fee4 	bl	8004cc0 <__malloc_unlock>
 8003ef8:	e7a1      	b.n	8003e3e <_malloc_r+0x22>
 8003efa:	6025      	str	r5, [r4, #0]
 8003efc:	e7de      	b.n	8003ebc <_malloc_r+0xa0>
 8003efe:	bf00      	nop
 8003f00:	200001a4 	.word	0x200001a4

08003f04 <_sbrk_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	2300      	movs	r3, #0
 8003f08:	4d05      	ldr	r5, [pc, #20]	; (8003f20 <_sbrk_r+0x1c>)
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	f7fd fe2c 	bl	8001b6c <_sbrk>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_sbrk_r+0x1a>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_sbrk_r+0x1a>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	200001ac 	.word	0x200001ac

08003f24 <strcpy>:
 8003f24:	4603      	mov	r3, r0
 8003f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f2a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	d1f9      	bne.n	8003f26 <strcpy+0x2>
 8003f32:	4770      	bx	lr

08003f34 <__assert_func>:
 8003f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f36:	4614      	mov	r4, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <__assert_func+0x2c>)
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d8      	ldr	r0, [r3, #12]
 8003f42:	b14c      	cbz	r4, 8003f58 <__assert_func+0x24>
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <__assert_func+0x30>)
 8003f46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f4a:	9100      	str	r1, [sp, #0]
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	4906      	ldr	r1, [pc, #24]	; (8003f68 <__assert_func+0x34>)
 8003f50:	f000 fe88 	bl	8004c64 <fiprintf>
 8003f54:	f001 fab0 	bl	80054b8 <abort>
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <__assert_func+0x38>)
 8003f5a:	461c      	mov	r4, r3
 8003f5c:	e7f3      	b.n	8003f46 <__assert_func+0x12>
 8003f5e:	bf00      	nop
 8003f60:	2000000c 	.word	0x2000000c
 8003f64:	08005d2c 	.word	0x08005d2c
 8003f68:	08005d39 	.word	0x08005d39
 8003f6c:	08005d67 	.word	0x08005d67

08003f70 <quorem>:
 8003f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	6903      	ldr	r3, [r0, #16]
 8003f76:	690c      	ldr	r4, [r1, #16]
 8003f78:	4607      	mov	r7, r0
 8003f7a:	42a3      	cmp	r3, r4
 8003f7c:	f2c0 8082 	blt.w	8004084 <quorem+0x114>
 8003f80:	3c01      	subs	r4, #1
 8003f82:	f100 0514 	add.w	r5, r0, #20
 8003f86:	f101 0814 	add.w	r8, r1, #20
 8003f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fa8:	d331      	bcc.n	800400e <quorem+0x9e>
 8003faa:	f04f 0e00 	mov.w	lr, #0
 8003fae:	4640      	mov	r0, r8
 8003fb0:	46ac      	mov	ip, r5
 8003fb2:	46f2      	mov	sl, lr
 8003fb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003fb8:	b293      	uxth	r3, r2
 8003fba:	fb06 e303 	mla	r3, r6, r3, lr
 8003fbe:	0c12      	lsrs	r2, r2, #16
 8003fc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	fb06 e202 	mla	r2, r6, r2, lr
 8003fca:	ebaa 0303 	sub.w	r3, sl, r3
 8003fce:	f8dc a000 	ldr.w	sl, [ip]
 8003fd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fd6:	fa1f fa8a 	uxth.w	sl, sl
 8003fda:	4453      	add	r3, sl
 8003fdc:	f8dc a000 	ldr.w	sl, [ip]
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003fe6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ff0:	4581      	cmp	r9, r0
 8003ff2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8003ffa:	d2db      	bcs.n	8003fb4 <quorem+0x44>
 8003ffc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004000:	b92b      	cbnz	r3, 800400e <quorem+0x9e>
 8004002:	9b01      	ldr	r3, [sp, #4]
 8004004:	3b04      	subs	r3, #4
 8004006:	429d      	cmp	r5, r3
 8004008:	461a      	mov	r2, r3
 800400a:	d32f      	bcc.n	800406c <quorem+0xfc>
 800400c:	613c      	str	r4, [r7, #16]
 800400e:	4638      	mov	r0, r7
 8004010:	f7ff fdb0 	bl	8003b74 <__mcmp>
 8004014:	2800      	cmp	r0, #0
 8004016:	db25      	blt.n	8004064 <quorem+0xf4>
 8004018:	4628      	mov	r0, r5
 800401a:	f04f 0c00 	mov.w	ip, #0
 800401e:	3601      	adds	r6, #1
 8004020:	f858 1b04 	ldr.w	r1, [r8], #4
 8004024:	f8d0 e000 	ldr.w	lr, [r0]
 8004028:	b28b      	uxth	r3, r1
 800402a:	ebac 0303 	sub.w	r3, ip, r3
 800402e:	fa1f f28e 	uxth.w	r2, lr
 8004032:	4413      	add	r3, r2
 8004034:	0c0a      	lsrs	r2, r1, #16
 8004036:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800403a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800403e:	b29b      	uxth	r3, r3
 8004040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004044:	45c1      	cmp	r9, r8
 8004046:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800404a:	f840 3b04 	str.w	r3, [r0], #4
 800404e:	d2e7      	bcs.n	8004020 <quorem+0xb0>
 8004050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004054:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004058:	b922      	cbnz	r2, 8004064 <quorem+0xf4>
 800405a:	3b04      	subs	r3, #4
 800405c:	429d      	cmp	r5, r3
 800405e:	461a      	mov	r2, r3
 8004060:	d30a      	bcc.n	8004078 <quorem+0x108>
 8004062:	613c      	str	r4, [r7, #16]
 8004064:	4630      	mov	r0, r6
 8004066:	b003      	add	sp, #12
 8004068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	3b04      	subs	r3, #4
 8004070:	2a00      	cmp	r2, #0
 8004072:	d1cb      	bne.n	800400c <quorem+0x9c>
 8004074:	3c01      	subs	r4, #1
 8004076:	e7c6      	b.n	8004006 <quorem+0x96>
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	3b04      	subs	r3, #4
 800407c:	2a00      	cmp	r2, #0
 800407e:	d1f0      	bne.n	8004062 <quorem+0xf2>
 8004080:	3c01      	subs	r4, #1
 8004082:	e7eb      	b.n	800405c <quorem+0xec>
 8004084:	2000      	movs	r0, #0
 8004086:	e7ee      	b.n	8004066 <quorem+0xf6>

08004088 <_dtoa_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	4616      	mov	r6, r2
 800408e:	461f      	mov	r7, r3
 8004090:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004092:	b099      	sub	sp, #100	; 0x64
 8004094:	4605      	mov	r5, r0
 8004096:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800409a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800409e:	b974      	cbnz	r4, 80040be <_dtoa_r+0x36>
 80040a0:	2010      	movs	r0, #16
 80040a2:	f000 fdf1 	bl	8004c88 <malloc>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6268      	str	r0, [r5, #36]	; 0x24
 80040aa:	b920      	cbnz	r0, 80040b6 <_dtoa_r+0x2e>
 80040ac:	21ea      	movs	r1, #234	; 0xea
 80040ae:	4ba8      	ldr	r3, [pc, #672]	; (8004350 <_dtoa_r+0x2c8>)
 80040b0:	48a8      	ldr	r0, [pc, #672]	; (8004354 <_dtoa_r+0x2cc>)
 80040b2:	f7ff ff3f 	bl	8003f34 <__assert_func>
 80040b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80040ba:	6004      	str	r4, [r0, #0]
 80040bc:	60c4      	str	r4, [r0, #12]
 80040be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	b151      	cbz	r1, 80040da <_dtoa_r+0x52>
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	2301      	movs	r3, #1
 80040c8:	4093      	lsls	r3, r2
 80040ca:	604a      	str	r2, [r1, #4]
 80040cc:	608b      	str	r3, [r1, #8]
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7ff fb12 	bl	80036f8 <_Bfree>
 80040d4:	2200      	movs	r2, #0
 80040d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	1e3b      	subs	r3, r7, #0
 80040dc:	bfaf      	iteee	ge
 80040de:	2300      	movge	r3, #0
 80040e0:	2201      	movlt	r2, #1
 80040e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80040e6:	9305      	strlt	r3, [sp, #20]
 80040e8:	bfa8      	it	ge
 80040ea:	f8c8 3000 	strge.w	r3, [r8]
 80040ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80040f2:	4b99      	ldr	r3, [pc, #612]	; (8004358 <_dtoa_r+0x2d0>)
 80040f4:	bfb8      	it	lt
 80040f6:	f8c8 2000 	strlt.w	r2, [r8]
 80040fa:	ea33 0309 	bics.w	r3, r3, r9
 80040fe:	d119      	bne.n	8004134 <_dtoa_r+0xac>
 8004100:	f242 730f 	movw	r3, #9999	; 0x270f
 8004104:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800410c:	4333      	orrs	r3, r6
 800410e:	f000 857f 	beq.w	8004c10 <_dtoa_r+0xb88>
 8004112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004114:	b953      	cbnz	r3, 800412c <_dtoa_r+0xa4>
 8004116:	4b91      	ldr	r3, [pc, #580]	; (800435c <_dtoa_r+0x2d4>)
 8004118:	e022      	b.n	8004160 <_dtoa_r+0xd8>
 800411a:	4b91      	ldr	r3, [pc, #580]	; (8004360 <_dtoa_r+0x2d8>)
 800411c:	9303      	str	r3, [sp, #12]
 800411e:	3308      	adds	r3, #8
 8004120:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	9803      	ldr	r0, [sp, #12]
 8004126:	b019      	add	sp, #100	; 0x64
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	4b8b      	ldr	r3, [pc, #556]	; (800435c <_dtoa_r+0x2d4>)
 800412e:	9303      	str	r3, [sp, #12]
 8004130:	3303      	adds	r3, #3
 8004132:	e7f5      	b.n	8004120 <_dtoa_r+0x98>
 8004134:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004138:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800413c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004140:	2200      	movs	r2, #0
 8004142:	2300      	movs	r3, #0
 8004144:	f7fc fc28 	bl	8000998 <__aeabi_dcmpeq>
 8004148:	4680      	mov	r8, r0
 800414a:	b158      	cbz	r0, 8004164 <_dtoa_r+0xdc>
 800414c:	2301      	movs	r3, #1
 800414e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8558 	beq.w	8004c0a <_dtoa_r+0xb82>
 800415a:	4882      	ldr	r0, [pc, #520]	; (8004364 <_dtoa_r+0x2dc>)
 800415c:	6018      	str	r0, [r3, #0]
 800415e:	1e43      	subs	r3, r0, #1
 8004160:	9303      	str	r3, [sp, #12]
 8004162:	e7df      	b.n	8004124 <_dtoa_r+0x9c>
 8004164:	ab16      	add	r3, sp, #88	; 0x58
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	ab17      	add	r3, sp, #92	; 0x5c
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4628      	mov	r0, r5
 800416e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004172:	f7ff fda7 	bl	8003cc4 <__d2b>
 8004176:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800417a:	4683      	mov	fp, r0
 800417c:	2c00      	cmp	r4, #0
 800417e:	d07f      	beq.n	8004280 <_dtoa_r+0x1f8>
 8004180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004186:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800418a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800418e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004192:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004196:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800419a:	2200      	movs	r2, #0
 800419c:	4b72      	ldr	r3, [pc, #456]	; (8004368 <_dtoa_r+0x2e0>)
 800419e:	f7fb ffdb 	bl	8000158 <__aeabi_dsub>
 80041a2:	a365      	add	r3, pc, #404	; (adr r3, 8004338 <_dtoa_r+0x2b0>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fc f98e 	bl	80004c8 <__aeabi_dmul>
 80041ac:	a364      	add	r3, pc, #400	; (adr r3, 8004340 <_dtoa_r+0x2b8>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fb ffd3 	bl	800015c <__adddf3>
 80041b6:	4606      	mov	r6, r0
 80041b8:	4620      	mov	r0, r4
 80041ba:	460f      	mov	r7, r1
 80041bc:	f7fc f91a 	bl	80003f4 <__aeabi_i2d>
 80041c0:	a361      	add	r3, pc, #388	; (adr r3, 8004348 <_dtoa_r+0x2c0>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f7fc f97f 	bl	80004c8 <__aeabi_dmul>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4630      	mov	r0, r6
 80041d0:	4639      	mov	r1, r7
 80041d2:	f7fb ffc3 	bl	800015c <__adddf3>
 80041d6:	4606      	mov	r6, r0
 80041d8:	460f      	mov	r7, r1
 80041da:	f7fc fc0f 	bl	80009fc <__aeabi_d2iz>
 80041de:	2200      	movs	r2, #0
 80041e0:	4682      	mov	sl, r0
 80041e2:	2300      	movs	r3, #0
 80041e4:	4630      	mov	r0, r6
 80041e6:	4639      	mov	r1, r7
 80041e8:	f7fc fbe0 	bl	80009ac <__aeabi_dcmplt>
 80041ec:	b148      	cbz	r0, 8004202 <_dtoa_r+0x17a>
 80041ee:	4650      	mov	r0, sl
 80041f0:	f7fc f900 	bl	80003f4 <__aeabi_i2d>
 80041f4:	4632      	mov	r2, r6
 80041f6:	463b      	mov	r3, r7
 80041f8:	f7fc fbce 	bl	8000998 <__aeabi_dcmpeq>
 80041fc:	b908      	cbnz	r0, 8004202 <_dtoa_r+0x17a>
 80041fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004202:	f1ba 0f16 	cmp.w	sl, #22
 8004206:	d858      	bhi.n	80042ba <_dtoa_r+0x232>
 8004208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <_dtoa_r+0x2e4>)
 800420e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc fbc9 	bl	80009ac <__aeabi_dcmplt>
 800421a:	2800      	cmp	r0, #0
 800421c:	d04f      	beq.n	80042be <_dtoa_r+0x236>
 800421e:	2300      	movs	r3, #0
 8004220:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004224:	930f      	str	r3, [sp, #60]	; 0x3c
 8004226:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004228:	1b1c      	subs	r4, r3, r4
 800422a:	1e63      	subs	r3, r4, #1
 800422c:	9309      	str	r3, [sp, #36]	; 0x24
 800422e:	bf49      	itett	mi
 8004230:	f1c4 0301 	rsbmi	r3, r4, #1
 8004234:	2300      	movpl	r3, #0
 8004236:	9306      	strmi	r3, [sp, #24]
 8004238:	2300      	movmi	r3, #0
 800423a:	bf54      	ite	pl
 800423c:	9306      	strpl	r3, [sp, #24]
 800423e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004240:	f1ba 0f00 	cmp.w	sl, #0
 8004244:	db3d      	blt.n	80042c2 <_dtoa_r+0x23a>
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800424c:	4453      	add	r3, sl
 800424e:	9309      	str	r3, [sp, #36]	; 0x24
 8004250:	2300      	movs	r3, #0
 8004252:	930a      	str	r3, [sp, #40]	; 0x28
 8004254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004256:	2b09      	cmp	r3, #9
 8004258:	f200 808c 	bhi.w	8004374 <_dtoa_r+0x2ec>
 800425c:	2b05      	cmp	r3, #5
 800425e:	bfc4      	itt	gt
 8004260:	3b04      	subgt	r3, #4
 8004262:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004266:	bfc8      	it	gt
 8004268:	2400      	movgt	r4, #0
 800426a:	f1a3 0302 	sub.w	r3, r3, #2
 800426e:	bfd8      	it	le
 8004270:	2401      	movle	r4, #1
 8004272:	2b03      	cmp	r3, #3
 8004274:	f200 808a 	bhi.w	800438c <_dtoa_r+0x304>
 8004278:	e8df f003 	tbb	[pc, r3]
 800427c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004280:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004284:	441c      	add	r4, r3
 8004286:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800428a:	2b20      	cmp	r3, #32
 800428c:	bfc3      	ittte	gt
 800428e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004292:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004296:	fa09 f303 	lslgt.w	r3, r9, r3
 800429a:	f1c3 0320 	rsble	r3, r3, #32
 800429e:	bfc6      	itte	gt
 80042a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80042a4:	4318      	orrgt	r0, r3
 80042a6:	fa06 f003 	lslle.w	r0, r6, r3
 80042aa:	f7fc f893 	bl	80003d4 <__aeabi_ui2d>
 80042ae:	2301      	movs	r3, #1
 80042b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80042b4:	3c01      	subs	r4, #1
 80042b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80042b8:	e76f      	b.n	800419a <_dtoa_r+0x112>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7b2      	b.n	8004224 <_dtoa_r+0x19c>
 80042be:	900f      	str	r0, [sp, #60]	; 0x3c
 80042c0:	e7b1      	b.n	8004226 <_dtoa_r+0x19e>
 80042c2:	9b06      	ldr	r3, [sp, #24]
 80042c4:	eba3 030a 	sub.w	r3, r3, sl
 80042c8:	9306      	str	r3, [sp, #24]
 80042ca:	f1ca 0300 	rsb	r3, sl, #0
 80042ce:	930a      	str	r3, [sp, #40]	; 0x28
 80042d0:	2300      	movs	r3, #0
 80042d2:	930e      	str	r3, [sp, #56]	; 0x38
 80042d4:	e7be      	b.n	8004254 <_dtoa_r+0x1cc>
 80042d6:	2300      	movs	r3, #0
 80042d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80042da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	dc58      	bgt.n	8004392 <_dtoa_r+0x30a>
 80042e0:	f04f 0901 	mov.w	r9, #1
 80042e4:	464b      	mov	r3, r9
 80042e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80042ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80042ee:	2200      	movs	r2, #0
 80042f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80042f2:	6042      	str	r2, [r0, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	f102 0614 	add.w	r6, r2, #20
 80042fa:	429e      	cmp	r6, r3
 80042fc:	6841      	ldr	r1, [r0, #4]
 80042fe:	d94e      	bls.n	800439e <_dtoa_r+0x316>
 8004300:	4628      	mov	r0, r5
 8004302:	f7ff f9b9 	bl	8003678 <_Balloc>
 8004306:	9003      	str	r0, [sp, #12]
 8004308:	2800      	cmp	r0, #0
 800430a:	d14c      	bne.n	80043a6 <_dtoa_r+0x31e>
 800430c:	4602      	mov	r2, r0
 800430e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <_dtoa_r+0x2e8>)
 8004314:	e6cc      	b.n	80040b0 <_dtoa_r+0x28>
 8004316:	2301      	movs	r3, #1
 8004318:	e7de      	b.n	80042d8 <_dtoa_r+0x250>
 800431a:	2300      	movs	r3, #0
 800431c:	930b      	str	r3, [sp, #44]	; 0x2c
 800431e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004320:	eb0a 0903 	add.w	r9, sl, r3
 8004324:	f109 0301 	add.w	r3, r9, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	9308      	str	r3, [sp, #32]
 800432c:	bfb8      	it	lt
 800432e:	2301      	movlt	r3, #1
 8004330:	e7dd      	b.n	80042ee <_dtoa_r+0x266>
 8004332:	2301      	movs	r3, #1
 8004334:	e7f2      	b.n	800431c <_dtoa_r+0x294>
 8004336:	bf00      	nop
 8004338:	636f4361 	.word	0x636f4361
 800433c:	3fd287a7 	.word	0x3fd287a7
 8004340:	8b60c8b3 	.word	0x8b60c8b3
 8004344:	3fc68a28 	.word	0x3fc68a28
 8004348:	509f79fb 	.word	0x509f79fb
 800434c:	3fd34413 	.word	0x3fd34413
 8004350:	08005ba5 	.word	0x08005ba5
 8004354:	08005d77 	.word	0x08005d77
 8004358:	7ff00000 	.word	0x7ff00000
 800435c:	08005d71 	.word	0x08005d71
 8004360:	08005d68 	.word	0x08005d68
 8004364:	08005d76 	.word	0x08005d76
 8004368:	3ff80000 	.word	0x3ff80000
 800436c:	08005c58 	.word	0x08005c58
 8004370:	08005c18 	.word	0x08005c18
 8004374:	2401      	movs	r4, #1
 8004376:	2300      	movs	r3, #0
 8004378:	940b      	str	r4, [sp, #44]	; 0x2c
 800437a:	9322      	str	r3, [sp, #136]	; 0x88
 800437c:	f04f 39ff 	mov.w	r9, #4294967295
 8004380:	2200      	movs	r2, #0
 8004382:	2312      	movs	r3, #18
 8004384:	f8cd 9020 	str.w	r9, [sp, #32]
 8004388:	9223      	str	r2, [sp, #140]	; 0x8c
 800438a:	e7b0      	b.n	80042ee <_dtoa_r+0x266>
 800438c:	2301      	movs	r3, #1
 800438e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004390:	e7f4      	b.n	800437c <_dtoa_r+0x2f4>
 8004392:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004396:	464b      	mov	r3, r9
 8004398:	f8cd 9020 	str.w	r9, [sp, #32]
 800439c:	e7a7      	b.n	80042ee <_dtoa_r+0x266>
 800439e:	3101      	adds	r1, #1
 80043a0:	6041      	str	r1, [r0, #4]
 80043a2:	0052      	lsls	r2, r2, #1
 80043a4:	e7a7      	b.n	80042f6 <_dtoa_r+0x26e>
 80043a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043a8:	9a03      	ldr	r2, [sp, #12]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	9b08      	ldr	r3, [sp, #32]
 80043ae:	2b0e      	cmp	r3, #14
 80043b0:	f200 80a8 	bhi.w	8004504 <_dtoa_r+0x47c>
 80043b4:	2c00      	cmp	r4, #0
 80043b6:	f000 80a5 	beq.w	8004504 <_dtoa_r+0x47c>
 80043ba:	f1ba 0f00 	cmp.w	sl, #0
 80043be:	dd34      	ble.n	800442a <_dtoa_r+0x3a2>
 80043c0:	4a9a      	ldr	r2, [pc, #616]	; (800462c <_dtoa_r+0x5a4>)
 80043c2:	f00a 030f 	and.w	r3, sl, #15
 80043c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80043ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80043da:	d016      	beq.n	800440a <_dtoa_r+0x382>
 80043dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043e0:	4b93      	ldr	r3, [pc, #588]	; (8004630 <_dtoa_r+0x5a8>)
 80043e2:	2703      	movs	r7, #3
 80043e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043e8:	f7fc f998 	bl	800071c <__aeabi_ddiv>
 80043ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043f0:	f004 040f 	and.w	r4, r4, #15
 80043f4:	4e8e      	ldr	r6, [pc, #568]	; (8004630 <_dtoa_r+0x5a8>)
 80043f6:	b954      	cbnz	r4, 800440e <_dtoa_r+0x386>
 80043f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004400:	f7fc f98c 	bl	800071c <__aeabi_ddiv>
 8004404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004408:	e029      	b.n	800445e <_dtoa_r+0x3d6>
 800440a:	2702      	movs	r7, #2
 800440c:	e7f2      	b.n	80043f4 <_dtoa_r+0x36c>
 800440e:	07e1      	lsls	r1, r4, #31
 8004410:	d508      	bpl.n	8004424 <_dtoa_r+0x39c>
 8004412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004416:	e9d6 2300 	ldrd	r2, r3, [r6]
 800441a:	f7fc f855 	bl	80004c8 <__aeabi_dmul>
 800441e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004422:	3701      	adds	r7, #1
 8004424:	1064      	asrs	r4, r4, #1
 8004426:	3608      	adds	r6, #8
 8004428:	e7e5      	b.n	80043f6 <_dtoa_r+0x36e>
 800442a:	f000 80a5 	beq.w	8004578 <_dtoa_r+0x4f0>
 800442e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004432:	f1ca 0400 	rsb	r4, sl, #0
 8004436:	4b7d      	ldr	r3, [pc, #500]	; (800462c <_dtoa_r+0x5a4>)
 8004438:	f004 020f 	and.w	r2, r4, #15
 800443c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f7fc f840 	bl	80004c8 <__aeabi_dmul>
 8004448:	2702      	movs	r7, #2
 800444a:	2300      	movs	r3, #0
 800444c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004450:	4e77      	ldr	r6, [pc, #476]	; (8004630 <_dtoa_r+0x5a8>)
 8004452:	1124      	asrs	r4, r4, #4
 8004454:	2c00      	cmp	r4, #0
 8004456:	f040 8084 	bne.w	8004562 <_dtoa_r+0x4da>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1d2      	bne.n	8004404 <_dtoa_r+0x37c>
 800445e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 808b 	beq.w	800457c <_dtoa_r+0x4f4>
 8004466:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800446a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800446e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004472:	2200      	movs	r2, #0
 8004474:	4b6f      	ldr	r3, [pc, #444]	; (8004634 <_dtoa_r+0x5ac>)
 8004476:	f7fc fa99 	bl	80009ac <__aeabi_dcmplt>
 800447a:	2800      	cmp	r0, #0
 800447c:	d07e      	beq.n	800457c <_dtoa_r+0x4f4>
 800447e:	9b08      	ldr	r3, [sp, #32]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d07b      	beq.n	800457c <_dtoa_r+0x4f4>
 8004484:	f1b9 0f00 	cmp.w	r9, #0
 8004488:	dd38      	ble.n	80044fc <_dtoa_r+0x474>
 800448a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800448e:	2200      	movs	r2, #0
 8004490:	4b69      	ldr	r3, [pc, #420]	; (8004638 <_dtoa_r+0x5b0>)
 8004492:	f7fc f819 	bl	80004c8 <__aeabi_dmul>
 8004496:	464c      	mov	r4, r9
 8004498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800449c:	f10a 38ff 	add.w	r8, sl, #4294967295
 80044a0:	3701      	adds	r7, #1
 80044a2:	4638      	mov	r0, r7
 80044a4:	f7fb ffa6 	bl	80003f4 <__aeabi_i2d>
 80044a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044ac:	f7fc f80c 	bl	80004c8 <__aeabi_dmul>
 80044b0:	2200      	movs	r2, #0
 80044b2:	4b62      	ldr	r3, [pc, #392]	; (800463c <_dtoa_r+0x5b4>)
 80044b4:	f7fb fe52 	bl	800015c <__adddf3>
 80044b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80044bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044c0:	9611      	str	r6, [sp, #68]	; 0x44
 80044c2:	2c00      	cmp	r4, #0
 80044c4:	d15d      	bne.n	8004582 <_dtoa_r+0x4fa>
 80044c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ca:	2200      	movs	r2, #0
 80044cc:	4b5c      	ldr	r3, [pc, #368]	; (8004640 <_dtoa_r+0x5b8>)
 80044ce:	f7fb fe43 	bl	8000158 <__aeabi_dsub>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044da:	4633      	mov	r3, r6
 80044dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044de:	f7fc fa83 	bl	80009e8 <__aeabi_dcmpgt>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 829c 	bne.w	8004a20 <_dtoa_r+0x998>
 80044e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80044f2:	f7fc fa5b 	bl	80009ac <__aeabi_dcmplt>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	f040 8290 	bne.w	8004a1c <_dtoa_r+0x994>
 80044fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004500:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004506:	2b00      	cmp	r3, #0
 8004508:	f2c0 8152 	blt.w	80047b0 <_dtoa_r+0x728>
 800450c:	f1ba 0f0e 	cmp.w	sl, #14
 8004510:	f300 814e 	bgt.w	80047b0 <_dtoa_r+0x728>
 8004514:	4b45      	ldr	r3, [pc, #276]	; (800462c <_dtoa_r+0x5a4>)
 8004516:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800451a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800451e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004524:	2b00      	cmp	r3, #0
 8004526:	f280 80db 	bge.w	80046e0 <_dtoa_r+0x658>
 800452a:	9b08      	ldr	r3, [sp, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f300 80d7 	bgt.w	80046e0 <_dtoa_r+0x658>
 8004532:	f040 8272 	bne.w	8004a1a <_dtoa_r+0x992>
 8004536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800453a:	2200      	movs	r2, #0
 800453c:	4b40      	ldr	r3, [pc, #256]	; (8004640 <_dtoa_r+0x5b8>)
 800453e:	f7fb ffc3 	bl	80004c8 <__aeabi_dmul>
 8004542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004546:	f7fc fa45 	bl	80009d4 <__aeabi_dcmpge>
 800454a:	9c08      	ldr	r4, [sp, #32]
 800454c:	4626      	mov	r6, r4
 800454e:	2800      	cmp	r0, #0
 8004550:	f040 8248 	bne.w	80049e4 <_dtoa_r+0x95c>
 8004554:	2331      	movs	r3, #49	; 0x31
 8004556:	9f03      	ldr	r7, [sp, #12]
 8004558:	f10a 0a01 	add.w	sl, sl, #1
 800455c:	f807 3b01 	strb.w	r3, [r7], #1
 8004560:	e244      	b.n	80049ec <_dtoa_r+0x964>
 8004562:	07e2      	lsls	r2, r4, #31
 8004564:	d505      	bpl.n	8004572 <_dtoa_r+0x4ea>
 8004566:	e9d6 2300 	ldrd	r2, r3, [r6]
 800456a:	f7fb ffad 	bl	80004c8 <__aeabi_dmul>
 800456e:	2301      	movs	r3, #1
 8004570:	3701      	adds	r7, #1
 8004572:	1064      	asrs	r4, r4, #1
 8004574:	3608      	adds	r6, #8
 8004576:	e76d      	b.n	8004454 <_dtoa_r+0x3cc>
 8004578:	2702      	movs	r7, #2
 800457a:	e770      	b.n	800445e <_dtoa_r+0x3d6>
 800457c:	46d0      	mov	r8, sl
 800457e:	9c08      	ldr	r4, [sp, #32]
 8004580:	e78f      	b.n	80044a2 <_dtoa_r+0x41a>
 8004582:	9903      	ldr	r1, [sp, #12]
 8004584:	4b29      	ldr	r3, [pc, #164]	; (800462c <_dtoa_r+0x5a4>)
 8004586:	4421      	add	r1, r4
 8004588:	9112      	str	r1, [sp, #72]	; 0x48
 800458a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800458c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004590:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004594:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004598:	2900      	cmp	r1, #0
 800459a:	d055      	beq.n	8004648 <_dtoa_r+0x5c0>
 800459c:	2000      	movs	r0, #0
 800459e:	4929      	ldr	r1, [pc, #164]	; (8004644 <_dtoa_r+0x5bc>)
 80045a0:	f7fc f8bc 	bl	800071c <__aeabi_ddiv>
 80045a4:	463b      	mov	r3, r7
 80045a6:	4632      	mov	r2, r6
 80045a8:	f7fb fdd6 	bl	8000158 <__aeabi_dsub>
 80045ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045b0:	9f03      	ldr	r7, [sp, #12]
 80045b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045b6:	f7fc fa21 	bl	80009fc <__aeabi_d2iz>
 80045ba:	4604      	mov	r4, r0
 80045bc:	f7fb ff1a 	bl	80003f4 <__aeabi_i2d>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c8:	f7fb fdc6 	bl	8000158 <__aeabi_dsub>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	3430      	adds	r4, #48	; 0x30
 80045d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045da:	f807 4b01 	strb.w	r4, [r7], #1
 80045de:	f7fc f9e5 	bl	80009ac <__aeabi_dcmplt>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d174      	bne.n	80046d0 <_dtoa_r+0x648>
 80045e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045ea:	2000      	movs	r0, #0
 80045ec:	4911      	ldr	r1, [pc, #68]	; (8004634 <_dtoa_r+0x5ac>)
 80045ee:	f7fb fdb3 	bl	8000158 <__aeabi_dsub>
 80045f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045f6:	f7fc f9d9 	bl	80009ac <__aeabi_dcmplt>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	f040 80b7 	bne.w	800476e <_dtoa_r+0x6e6>
 8004600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004602:	429f      	cmp	r7, r3
 8004604:	f43f af7a 	beq.w	80044fc <_dtoa_r+0x474>
 8004608:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800460c:	2200      	movs	r2, #0
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <_dtoa_r+0x5b0>)
 8004610:	f7fb ff5a 	bl	80004c8 <__aeabi_dmul>
 8004614:	2200      	movs	r2, #0
 8004616:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800461a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <_dtoa_r+0x5b0>)
 8004620:	f7fb ff52 	bl	80004c8 <__aeabi_dmul>
 8004624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004628:	e7c3      	b.n	80045b2 <_dtoa_r+0x52a>
 800462a:	bf00      	nop
 800462c:	08005c58 	.word	0x08005c58
 8004630:	08005c30 	.word	0x08005c30
 8004634:	3ff00000 	.word	0x3ff00000
 8004638:	40240000 	.word	0x40240000
 800463c:	401c0000 	.word	0x401c0000
 8004640:	40140000 	.word	0x40140000
 8004644:	3fe00000 	.word	0x3fe00000
 8004648:	4630      	mov	r0, r6
 800464a:	4639      	mov	r1, r7
 800464c:	f7fb ff3c 	bl	80004c8 <__aeabi_dmul>
 8004650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004652:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004656:	9c03      	ldr	r4, [sp, #12]
 8004658:	9314      	str	r3, [sp, #80]	; 0x50
 800465a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800465e:	f7fc f9cd 	bl	80009fc <__aeabi_d2iz>
 8004662:	9015      	str	r0, [sp, #84]	; 0x54
 8004664:	f7fb fec6 	bl	80003f4 <__aeabi_i2d>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004670:	f7fb fd72 	bl	8000158 <__aeabi_dsub>
 8004674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004676:	4606      	mov	r6, r0
 8004678:	3330      	adds	r3, #48	; 0x30
 800467a:	f804 3b01 	strb.w	r3, [r4], #1
 800467e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004680:	460f      	mov	r7, r1
 8004682:	429c      	cmp	r4, r3
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	d124      	bne.n	80046d4 <_dtoa_r+0x64c>
 800468a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800468e:	4bb0      	ldr	r3, [pc, #704]	; (8004950 <_dtoa_r+0x8c8>)
 8004690:	f7fb fd64 	bl	800015c <__adddf3>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4630      	mov	r0, r6
 800469a:	4639      	mov	r1, r7
 800469c:	f7fc f9a4 	bl	80009e8 <__aeabi_dcmpgt>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d163      	bne.n	800476c <_dtoa_r+0x6e4>
 80046a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046a8:	2000      	movs	r0, #0
 80046aa:	49a9      	ldr	r1, [pc, #676]	; (8004950 <_dtoa_r+0x8c8>)
 80046ac:	f7fb fd54 	bl	8000158 <__aeabi_dsub>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	f7fc f978 	bl	80009ac <__aeabi_dcmplt>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f43f af1d 	beq.w	80044fc <_dtoa_r+0x474>
 80046c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80046c4:	1e7b      	subs	r3, r7, #1
 80046c6:	9314      	str	r3, [sp, #80]	; 0x50
 80046c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d0f8      	beq.n	80046c2 <_dtoa_r+0x63a>
 80046d0:	46c2      	mov	sl, r8
 80046d2:	e03b      	b.n	800474c <_dtoa_r+0x6c4>
 80046d4:	4b9f      	ldr	r3, [pc, #636]	; (8004954 <_dtoa_r+0x8cc>)
 80046d6:	f7fb fef7 	bl	80004c8 <__aeabi_dmul>
 80046da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046de:	e7bc      	b.n	800465a <_dtoa_r+0x5d2>
 80046e0:	9f03      	ldr	r7, [sp, #12]
 80046e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80046e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fc f815 	bl	800071c <__aeabi_ddiv>
 80046f2:	f7fc f983 	bl	80009fc <__aeabi_d2iz>
 80046f6:	4604      	mov	r4, r0
 80046f8:	f7fb fe7c 	bl	80003f4 <__aeabi_i2d>
 80046fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004700:	f7fb fee2 	bl	80004c8 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4640      	mov	r0, r8
 800470a:	4649      	mov	r1, r9
 800470c:	f7fb fd24 	bl	8000158 <__aeabi_dsub>
 8004710:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004714:	f807 6b01 	strb.w	r6, [r7], #1
 8004718:	9e03      	ldr	r6, [sp, #12]
 800471a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800471e:	1bbe      	subs	r6, r7, r6
 8004720:	45b4      	cmp	ip, r6
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	d136      	bne.n	8004796 <_dtoa_r+0x70e>
 8004728:	f7fb fd18 	bl	800015c <__adddf3>
 800472c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004730:	4680      	mov	r8, r0
 8004732:	4689      	mov	r9, r1
 8004734:	f7fc f958 	bl	80009e8 <__aeabi_dcmpgt>
 8004738:	bb58      	cbnz	r0, 8004792 <_dtoa_r+0x70a>
 800473a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	f7fc f929 	bl	8000998 <__aeabi_dcmpeq>
 8004746:	b108      	cbz	r0, 800474c <_dtoa_r+0x6c4>
 8004748:	07e1      	lsls	r1, r4, #31
 800474a:	d422      	bmi.n	8004792 <_dtoa_r+0x70a>
 800474c:	4628      	mov	r0, r5
 800474e:	4659      	mov	r1, fp
 8004750:	f7fe ffd2 	bl	80036f8 <_Bfree>
 8004754:	2300      	movs	r3, #0
 8004756:	703b      	strb	r3, [r7, #0]
 8004758:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800475a:	f10a 0001 	add.w	r0, sl, #1
 800475e:	6018      	str	r0, [r3, #0]
 8004760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004762:	2b00      	cmp	r3, #0
 8004764:	f43f acde 	beq.w	8004124 <_dtoa_r+0x9c>
 8004768:	601f      	str	r7, [r3, #0]
 800476a:	e4db      	b.n	8004124 <_dtoa_r+0x9c>
 800476c:	4627      	mov	r7, r4
 800476e:	463b      	mov	r3, r7
 8004770:	461f      	mov	r7, r3
 8004772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004776:	2a39      	cmp	r2, #57	; 0x39
 8004778:	d107      	bne.n	800478a <_dtoa_r+0x702>
 800477a:	9a03      	ldr	r2, [sp, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d1f7      	bne.n	8004770 <_dtoa_r+0x6e8>
 8004780:	2230      	movs	r2, #48	; 0x30
 8004782:	9903      	ldr	r1, [sp, #12]
 8004784:	f108 0801 	add.w	r8, r8, #1
 8004788:	700a      	strb	r2, [r1, #0]
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	3201      	adds	r2, #1
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e79e      	b.n	80046d0 <_dtoa_r+0x648>
 8004792:	46d0      	mov	r8, sl
 8004794:	e7eb      	b.n	800476e <_dtoa_r+0x6e6>
 8004796:	2200      	movs	r2, #0
 8004798:	4b6e      	ldr	r3, [pc, #440]	; (8004954 <_dtoa_r+0x8cc>)
 800479a:	f7fb fe95 	bl	80004c8 <__aeabi_dmul>
 800479e:	2200      	movs	r2, #0
 80047a0:	2300      	movs	r3, #0
 80047a2:	4680      	mov	r8, r0
 80047a4:	4689      	mov	r9, r1
 80047a6:	f7fc f8f7 	bl	8000998 <__aeabi_dcmpeq>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d09b      	beq.n	80046e6 <_dtoa_r+0x65e>
 80047ae:	e7cd      	b.n	800474c <_dtoa_r+0x6c4>
 80047b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	f000 80d0 	beq.w	8004958 <_dtoa_r+0x8d0>
 80047b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80047ba:	2a01      	cmp	r2, #1
 80047bc:	f300 80ae 	bgt.w	800491c <_dtoa_r+0x894>
 80047c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	f000 80a6 	beq.w	8004914 <_dtoa_r+0x88c>
 80047c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80047ce:	9f06      	ldr	r7, [sp, #24]
 80047d0:	9a06      	ldr	r2, [sp, #24]
 80047d2:	2101      	movs	r1, #1
 80047d4:	441a      	add	r2, r3
 80047d6:	9206      	str	r2, [sp, #24]
 80047d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047da:	4628      	mov	r0, r5
 80047dc:	441a      	add	r2, r3
 80047de:	9209      	str	r2, [sp, #36]	; 0x24
 80047e0:	f7ff f840 	bl	8003864 <__i2b>
 80047e4:	4606      	mov	r6, r0
 80047e6:	2f00      	cmp	r7, #0
 80047e8:	dd0c      	ble.n	8004804 <_dtoa_r+0x77c>
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dd09      	ble.n	8004804 <_dtoa_r+0x77c>
 80047f0:	42bb      	cmp	r3, r7
 80047f2:	bfa8      	it	ge
 80047f4:	463b      	movge	r3, r7
 80047f6:	9a06      	ldr	r2, [sp, #24]
 80047f8:	1aff      	subs	r7, r7, r3
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	9206      	str	r2, [sp, #24]
 80047fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	9309      	str	r3, [sp, #36]	; 0x24
 8004804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004806:	b1f3      	cbz	r3, 8004846 <_dtoa_r+0x7be>
 8004808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a8 	beq.w	8004960 <_dtoa_r+0x8d8>
 8004810:	2c00      	cmp	r4, #0
 8004812:	dd10      	ble.n	8004836 <_dtoa_r+0x7ae>
 8004814:	4631      	mov	r1, r6
 8004816:	4622      	mov	r2, r4
 8004818:	4628      	mov	r0, r5
 800481a:	f7ff f8e1 	bl	80039e0 <__pow5mult>
 800481e:	465a      	mov	r2, fp
 8004820:	4601      	mov	r1, r0
 8004822:	4606      	mov	r6, r0
 8004824:	4628      	mov	r0, r5
 8004826:	f7ff f833 	bl	8003890 <__multiply>
 800482a:	4680      	mov	r8, r0
 800482c:	4659      	mov	r1, fp
 800482e:	4628      	mov	r0, r5
 8004830:	f7fe ff62 	bl	80036f8 <_Bfree>
 8004834:	46c3      	mov	fp, r8
 8004836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004838:	1b1a      	subs	r2, r3, r4
 800483a:	d004      	beq.n	8004846 <_dtoa_r+0x7be>
 800483c:	4659      	mov	r1, fp
 800483e:	4628      	mov	r0, r5
 8004840:	f7ff f8ce 	bl	80039e0 <__pow5mult>
 8004844:	4683      	mov	fp, r0
 8004846:	2101      	movs	r1, #1
 8004848:	4628      	mov	r0, r5
 800484a:	f7ff f80b 	bl	8003864 <__i2b>
 800484e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004850:	4604      	mov	r4, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f340 8086 	ble.w	8004964 <_dtoa_r+0x8dc>
 8004858:	461a      	mov	r2, r3
 800485a:	4601      	mov	r1, r0
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff f8bf 	bl	80039e0 <__pow5mult>
 8004862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004864:	4604      	mov	r4, r0
 8004866:	2b01      	cmp	r3, #1
 8004868:	dd7f      	ble.n	800496a <_dtoa_r+0x8e2>
 800486a:	f04f 0800 	mov.w	r8, #0
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004874:	6918      	ldr	r0, [r3, #16]
 8004876:	f7fe ffa7 	bl	80037c8 <__hi0bits>
 800487a:	f1c0 0020 	rsb	r0, r0, #32
 800487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004880:	4418      	add	r0, r3
 8004882:	f010 001f 	ands.w	r0, r0, #31
 8004886:	f000 8092 	beq.w	80049ae <_dtoa_r+0x926>
 800488a:	f1c0 0320 	rsb	r3, r0, #32
 800488e:	2b04      	cmp	r3, #4
 8004890:	f340 808a 	ble.w	80049a8 <_dtoa_r+0x920>
 8004894:	f1c0 001c 	rsb	r0, r0, #28
 8004898:	9b06      	ldr	r3, [sp, #24]
 800489a:	4407      	add	r7, r0
 800489c:	4403      	add	r3, r0
 800489e:	9306      	str	r3, [sp, #24]
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	4403      	add	r3, r0
 80048a4:	9309      	str	r3, [sp, #36]	; 0x24
 80048a6:	9b06      	ldr	r3, [sp, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dd05      	ble.n	80048b8 <_dtoa_r+0x830>
 80048ac:	4659      	mov	r1, fp
 80048ae:	461a      	mov	r2, r3
 80048b0:	4628      	mov	r0, r5
 80048b2:	f7ff f8ef 	bl	8003a94 <__lshift>
 80048b6:	4683      	mov	fp, r0
 80048b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	dd05      	ble.n	80048ca <_dtoa_r+0x842>
 80048be:	4621      	mov	r1, r4
 80048c0:	461a      	mov	r2, r3
 80048c2:	4628      	mov	r0, r5
 80048c4:	f7ff f8e6 	bl	8003a94 <__lshift>
 80048c8:	4604      	mov	r4, r0
 80048ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d070      	beq.n	80049b2 <_dtoa_r+0x92a>
 80048d0:	4621      	mov	r1, r4
 80048d2:	4658      	mov	r0, fp
 80048d4:	f7ff f94e 	bl	8003b74 <__mcmp>
 80048d8:	2800      	cmp	r0, #0
 80048da:	da6a      	bge.n	80049b2 <_dtoa_r+0x92a>
 80048dc:	2300      	movs	r3, #0
 80048de:	4659      	mov	r1, fp
 80048e0:	220a      	movs	r2, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f7fe ff2a 	bl	800373c <__multadd>
 80048e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048ea:	4683      	mov	fp, r0
 80048ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8194 	beq.w	8004c1e <_dtoa_r+0xb96>
 80048f6:	4631      	mov	r1, r6
 80048f8:	2300      	movs	r3, #0
 80048fa:	220a      	movs	r2, #10
 80048fc:	4628      	mov	r0, r5
 80048fe:	f7fe ff1d 	bl	800373c <__multadd>
 8004902:	f1b9 0f00 	cmp.w	r9, #0
 8004906:	4606      	mov	r6, r0
 8004908:	f300 8093 	bgt.w	8004a32 <_dtoa_r+0x9aa>
 800490c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800490e:	2b02      	cmp	r3, #2
 8004910:	dc57      	bgt.n	80049c2 <_dtoa_r+0x93a>
 8004912:	e08e      	b.n	8004a32 <_dtoa_r+0x9aa>
 8004914:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800491a:	e757      	b.n	80047cc <_dtoa_r+0x744>
 800491c:	9b08      	ldr	r3, [sp, #32]
 800491e:	1e5c      	subs	r4, r3, #1
 8004920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004922:	42a3      	cmp	r3, r4
 8004924:	bfb7      	itett	lt
 8004926:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004928:	1b1c      	subge	r4, r3, r4
 800492a:	1ae2      	sublt	r2, r4, r3
 800492c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800492e:	bfbe      	ittt	lt
 8004930:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004932:	189b      	addlt	r3, r3, r2
 8004934:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004936:	9b08      	ldr	r3, [sp, #32]
 8004938:	bfb8      	it	lt
 800493a:	2400      	movlt	r4, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bfbb      	ittet	lt
 8004940:	9b06      	ldrlt	r3, [sp, #24]
 8004942:	9a08      	ldrlt	r2, [sp, #32]
 8004944:	9f06      	ldrge	r7, [sp, #24]
 8004946:	1a9f      	sublt	r7, r3, r2
 8004948:	bfac      	ite	ge
 800494a:	9b08      	ldrge	r3, [sp, #32]
 800494c:	2300      	movlt	r3, #0
 800494e:	e73f      	b.n	80047d0 <_dtoa_r+0x748>
 8004950:	3fe00000 	.word	0x3fe00000
 8004954:	40240000 	.word	0x40240000
 8004958:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800495a:	9f06      	ldr	r7, [sp, #24]
 800495c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800495e:	e742      	b.n	80047e6 <_dtoa_r+0x75e>
 8004960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004962:	e76b      	b.n	800483c <_dtoa_r+0x7b4>
 8004964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004966:	2b01      	cmp	r3, #1
 8004968:	dc19      	bgt.n	800499e <_dtoa_r+0x916>
 800496a:	9b04      	ldr	r3, [sp, #16]
 800496c:	b9bb      	cbnz	r3, 800499e <_dtoa_r+0x916>
 800496e:	9b05      	ldr	r3, [sp, #20]
 8004970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004974:	b99b      	cbnz	r3, 800499e <_dtoa_r+0x916>
 8004976:	9b05      	ldr	r3, [sp, #20]
 8004978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800497c:	0d1b      	lsrs	r3, r3, #20
 800497e:	051b      	lsls	r3, r3, #20
 8004980:	b183      	cbz	r3, 80049a4 <_dtoa_r+0x91c>
 8004982:	f04f 0801 	mov.w	r8, #1
 8004986:	9b06      	ldr	r3, [sp, #24]
 8004988:	3301      	adds	r3, #1
 800498a:	9306      	str	r3, [sp, #24]
 800498c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498e:	3301      	adds	r3, #1
 8004990:	9309      	str	r3, [sp, #36]	; 0x24
 8004992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f af6a 	bne.w	800486e <_dtoa_r+0x7e6>
 800499a:	2001      	movs	r0, #1
 800499c:	e76f      	b.n	800487e <_dtoa_r+0x7f6>
 800499e:	f04f 0800 	mov.w	r8, #0
 80049a2:	e7f6      	b.n	8004992 <_dtoa_r+0x90a>
 80049a4:	4698      	mov	r8, r3
 80049a6:	e7f4      	b.n	8004992 <_dtoa_r+0x90a>
 80049a8:	f43f af7d 	beq.w	80048a6 <_dtoa_r+0x81e>
 80049ac:	4618      	mov	r0, r3
 80049ae:	301c      	adds	r0, #28
 80049b0:	e772      	b.n	8004898 <_dtoa_r+0x810>
 80049b2:	9b08      	ldr	r3, [sp, #32]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	dc36      	bgt.n	8004a26 <_dtoa_r+0x99e>
 80049b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	dd33      	ble.n	8004a26 <_dtoa_r+0x99e>
 80049be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049c2:	f1b9 0f00 	cmp.w	r9, #0
 80049c6:	d10d      	bne.n	80049e4 <_dtoa_r+0x95c>
 80049c8:	4621      	mov	r1, r4
 80049ca:	464b      	mov	r3, r9
 80049cc:	2205      	movs	r2, #5
 80049ce:	4628      	mov	r0, r5
 80049d0:	f7fe feb4 	bl	800373c <__multadd>
 80049d4:	4601      	mov	r1, r0
 80049d6:	4604      	mov	r4, r0
 80049d8:	4658      	mov	r0, fp
 80049da:	f7ff f8cb 	bl	8003b74 <__mcmp>
 80049de:	2800      	cmp	r0, #0
 80049e0:	f73f adb8 	bgt.w	8004554 <_dtoa_r+0x4cc>
 80049e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049e6:	9f03      	ldr	r7, [sp, #12]
 80049e8:	ea6f 0a03 	mvn.w	sl, r3
 80049ec:	f04f 0800 	mov.w	r8, #0
 80049f0:	4621      	mov	r1, r4
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7fe fe80 	bl	80036f8 <_Bfree>
 80049f8:	2e00      	cmp	r6, #0
 80049fa:	f43f aea7 	beq.w	800474c <_dtoa_r+0x6c4>
 80049fe:	f1b8 0f00 	cmp.w	r8, #0
 8004a02:	d005      	beq.n	8004a10 <_dtoa_r+0x988>
 8004a04:	45b0      	cmp	r8, r6
 8004a06:	d003      	beq.n	8004a10 <_dtoa_r+0x988>
 8004a08:	4641      	mov	r1, r8
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f7fe fe74 	bl	80036f8 <_Bfree>
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fe fe70 	bl	80036f8 <_Bfree>
 8004a18:	e698      	b.n	800474c <_dtoa_r+0x6c4>
 8004a1a:	2400      	movs	r4, #0
 8004a1c:	4626      	mov	r6, r4
 8004a1e:	e7e1      	b.n	80049e4 <_dtoa_r+0x95c>
 8004a20:	46c2      	mov	sl, r8
 8004a22:	4626      	mov	r6, r4
 8004a24:	e596      	b.n	8004554 <_dtoa_r+0x4cc>
 8004a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80fd 	beq.w	8004c2c <_dtoa_r+0xba4>
 8004a32:	2f00      	cmp	r7, #0
 8004a34:	dd05      	ble.n	8004a42 <_dtoa_r+0x9ba>
 8004a36:	4631      	mov	r1, r6
 8004a38:	463a      	mov	r2, r7
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f7ff f82a 	bl	8003a94 <__lshift>
 8004a40:	4606      	mov	r6, r0
 8004a42:	f1b8 0f00 	cmp.w	r8, #0
 8004a46:	d05c      	beq.n	8004b02 <_dtoa_r+0xa7a>
 8004a48:	4628      	mov	r0, r5
 8004a4a:	6871      	ldr	r1, [r6, #4]
 8004a4c:	f7fe fe14 	bl	8003678 <_Balloc>
 8004a50:	4607      	mov	r7, r0
 8004a52:	b928      	cbnz	r0, 8004a60 <_dtoa_r+0x9d8>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004a5a:	4b7f      	ldr	r3, [pc, #508]	; (8004c58 <_dtoa_r+0xbd0>)
 8004a5c:	f7ff bb28 	b.w	80040b0 <_dtoa_r+0x28>
 8004a60:	6932      	ldr	r2, [r6, #16]
 8004a62:	f106 010c 	add.w	r1, r6, #12
 8004a66:	3202      	adds	r2, #2
 8004a68:	0092      	lsls	r2, r2, #2
 8004a6a:	300c      	adds	r0, #12
 8004a6c:	f000 f914 	bl	8004c98 <memcpy>
 8004a70:	2201      	movs	r2, #1
 8004a72:	4639      	mov	r1, r7
 8004a74:	4628      	mov	r0, r5
 8004a76:	f7ff f80d 	bl	8003a94 <__lshift>
 8004a7a:	46b0      	mov	r8, r6
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	9308      	str	r3, [sp, #32]
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	444b      	add	r3, r9
 8004a88:	930a      	str	r3, [sp, #40]	; 0x28
 8004a8a:	9b04      	ldr	r3, [sp, #16]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	9309      	str	r3, [sp, #36]	; 0x24
 8004a92:	9b08      	ldr	r3, [sp, #32]
 8004a94:	4621      	mov	r1, r4
 8004a96:	3b01      	subs	r3, #1
 8004a98:	4658      	mov	r0, fp
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	f7ff fa68 	bl	8003f70 <quorem>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	3330      	adds	r3, #48	; 0x30
 8004aa6:	9006      	str	r0, [sp, #24]
 8004aa8:	4658      	mov	r0, fp
 8004aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aac:	f7ff f862 	bl	8003b74 <__mcmp>
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4681      	mov	r9, r0
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7ff f878 	bl	8003bac <__mdiff>
 8004abc:	68c2      	ldr	r2, [r0, #12]
 8004abe:	4607      	mov	r7, r0
 8004ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac2:	bb02      	cbnz	r2, 8004b06 <_dtoa_r+0xa7e>
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	4658      	mov	r0, fp
 8004ac8:	f7ff f854 	bl	8003b74 <__mcmp>
 8004acc:	4602      	mov	r2, r0
 8004ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004ad8:	f7fe fe0e 	bl	80036f8 <_Bfree>
 8004adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ae0:	9f08      	ldr	r7, [sp, #32]
 8004ae2:	ea43 0102 	orr.w	r1, r3, r2
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aec:	d10d      	bne.n	8004b0a <_dtoa_r+0xa82>
 8004aee:	2b39      	cmp	r3, #57	; 0x39
 8004af0:	d029      	beq.n	8004b46 <_dtoa_r+0xabe>
 8004af2:	f1b9 0f00 	cmp.w	r9, #0
 8004af6:	dd01      	ble.n	8004afc <_dtoa_r+0xa74>
 8004af8:	9b06      	ldr	r3, [sp, #24]
 8004afa:	3331      	adds	r3, #49	; 0x31
 8004afc:	9a04      	ldr	r2, [sp, #16]
 8004afe:	7013      	strb	r3, [r2, #0]
 8004b00:	e776      	b.n	80049f0 <_dtoa_r+0x968>
 8004b02:	4630      	mov	r0, r6
 8004b04:	e7b9      	b.n	8004a7a <_dtoa_r+0x9f2>
 8004b06:	2201      	movs	r2, #1
 8004b08:	e7e2      	b.n	8004ad0 <_dtoa_r+0xa48>
 8004b0a:	f1b9 0f00 	cmp.w	r9, #0
 8004b0e:	db06      	blt.n	8004b1e <_dtoa_r+0xa96>
 8004b10:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004b12:	ea41 0909 	orr.w	r9, r1, r9
 8004b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b18:	ea59 0101 	orrs.w	r1, r9, r1
 8004b1c:	d120      	bne.n	8004b60 <_dtoa_r+0xad8>
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	ddec      	ble.n	8004afc <_dtoa_r+0xa74>
 8004b22:	4659      	mov	r1, fp
 8004b24:	2201      	movs	r2, #1
 8004b26:	4628      	mov	r0, r5
 8004b28:	9308      	str	r3, [sp, #32]
 8004b2a:	f7fe ffb3 	bl	8003a94 <__lshift>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4683      	mov	fp, r0
 8004b32:	f7ff f81f 	bl	8003b74 <__mcmp>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	9b08      	ldr	r3, [sp, #32]
 8004b3a:	dc02      	bgt.n	8004b42 <_dtoa_r+0xaba>
 8004b3c:	d1de      	bne.n	8004afc <_dtoa_r+0xa74>
 8004b3e:	07da      	lsls	r2, r3, #31
 8004b40:	d5dc      	bpl.n	8004afc <_dtoa_r+0xa74>
 8004b42:	2b39      	cmp	r3, #57	; 0x39
 8004b44:	d1d8      	bne.n	8004af8 <_dtoa_r+0xa70>
 8004b46:	2339      	movs	r3, #57	; 0x39
 8004b48:	9a04      	ldr	r2, [sp, #16]
 8004b4a:	7013      	strb	r3, [r2, #0]
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	461f      	mov	r7, r3
 8004b50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	2a39      	cmp	r2, #57	; 0x39
 8004b58:	d050      	beq.n	8004bfc <_dtoa_r+0xb74>
 8004b5a:	3201      	adds	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e747      	b.n	80049f0 <_dtoa_r+0x968>
 8004b60:	2a00      	cmp	r2, #0
 8004b62:	dd03      	ble.n	8004b6c <_dtoa_r+0xae4>
 8004b64:	2b39      	cmp	r3, #57	; 0x39
 8004b66:	d0ee      	beq.n	8004b46 <_dtoa_r+0xabe>
 8004b68:	3301      	adds	r3, #1
 8004b6a:	e7c7      	b.n	8004afc <_dtoa_r+0xa74>
 8004b6c:	9a08      	ldr	r2, [sp, #32]
 8004b6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b74:	428a      	cmp	r2, r1
 8004b76:	d02a      	beq.n	8004bce <_dtoa_r+0xb46>
 8004b78:	4659      	mov	r1, fp
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	220a      	movs	r2, #10
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f7fe fddc 	bl	800373c <__multadd>
 8004b84:	45b0      	cmp	r8, r6
 8004b86:	4683      	mov	fp, r0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	f04f 020a 	mov.w	r2, #10
 8004b90:	4641      	mov	r1, r8
 8004b92:	4628      	mov	r0, r5
 8004b94:	d107      	bne.n	8004ba6 <_dtoa_r+0xb1e>
 8004b96:	f7fe fdd1 	bl	800373c <__multadd>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	9b08      	ldr	r3, [sp, #32]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	9308      	str	r3, [sp, #32]
 8004ba4:	e775      	b.n	8004a92 <_dtoa_r+0xa0a>
 8004ba6:	f7fe fdc9 	bl	800373c <__multadd>
 8004baa:	4631      	mov	r1, r6
 8004bac:	4680      	mov	r8, r0
 8004bae:	2300      	movs	r3, #0
 8004bb0:	220a      	movs	r2, #10
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f7fe fdc2 	bl	800373c <__multadd>
 8004bb8:	4606      	mov	r6, r0
 8004bba:	e7f0      	b.n	8004b9e <_dtoa_r+0xb16>
 8004bbc:	f1b9 0f00 	cmp.w	r9, #0
 8004bc0:	bfcc      	ite	gt
 8004bc2:	464f      	movgt	r7, r9
 8004bc4:	2701      	movle	r7, #1
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	9a03      	ldr	r2, [sp, #12]
 8004bcc:	4417      	add	r7, r2
 8004bce:	4659      	mov	r1, fp
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	9308      	str	r3, [sp, #32]
 8004bd6:	f7fe ff5d 	bl	8003a94 <__lshift>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4683      	mov	fp, r0
 8004bde:	f7fe ffc9 	bl	8003b74 <__mcmp>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	dcb2      	bgt.n	8004b4c <_dtoa_r+0xac4>
 8004be6:	d102      	bne.n	8004bee <_dtoa_r+0xb66>
 8004be8:	9b08      	ldr	r3, [sp, #32]
 8004bea:	07db      	lsls	r3, r3, #31
 8004bec:	d4ae      	bmi.n	8004b4c <_dtoa_r+0xac4>
 8004bee:	463b      	mov	r3, r7
 8004bf0:	461f      	mov	r7, r3
 8004bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bf6:	2a30      	cmp	r2, #48	; 0x30
 8004bf8:	d0fa      	beq.n	8004bf0 <_dtoa_r+0xb68>
 8004bfa:	e6f9      	b.n	80049f0 <_dtoa_r+0x968>
 8004bfc:	9a03      	ldr	r2, [sp, #12]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d1a5      	bne.n	8004b4e <_dtoa_r+0xac6>
 8004c02:	2331      	movs	r3, #49	; 0x31
 8004c04:	f10a 0a01 	add.w	sl, sl, #1
 8004c08:	e779      	b.n	8004afe <_dtoa_r+0xa76>
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <_dtoa_r+0xbd4>)
 8004c0c:	f7ff baa8 	b.w	8004160 <_dtoa_r+0xd8>
 8004c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f47f aa81 	bne.w	800411a <_dtoa_r+0x92>
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <_dtoa_r+0xbd8>)
 8004c1a:	f7ff baa1 	b.w	8004160 <_dtoa_r+0xd8>
 8004c1e:	f1b9 0f00 	cmp.w	r9, #0
 8004c22:	dc03      	bgt.n	8004c2c <_dtoa_r+0xba4>
 8004c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	f73f aecb 	bgt.w	80049c2 <_dtoa_r+0x93a>
 8004c2c:	9f03      	ldr	r7, [sp, #12]
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4658      	mov	r0, fp
 8004c32:	f7ff f99d 	bl	8003f70 <quorem>
 8004c36:	9a03      	ldr	r2, [sp, #12]
 8004c38:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004c3c:	f807 3b01 	strb.w	r3, [r7], #1
 8004c40:	1aba      	subs	r2, r7, r2
 8004c42:	4591      	cmp	r9, r2
 8004c44:	ddba      	ble.n	8004bbc <_dtoa_r+0xb34>
 8004c46:	4659      	mov	r1, fp
 8004c48:	2300      	movs	r3, #0
 8004c4a:	220a      	movs	r2, #10
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f7fe fd75 	bl	800373c <__multadd>
 8004c52:	4683      	mov	fp, r0
 8004c54:	e7eb      	b.n	8004c2e <_dtoa_r+0xba6>
 8004c56:	bf00      	nop
 8004c58:	08005c18 	.word	0x08005c18
 8004c5c:	08005d75 	.word	0x08005d75
 8004c60:	08005d68 	.word	0x08005d68

08004c64 <fiprintf>:
 8004c64:	b40e      	push	{r1, r2, r3}
 8004c66:	b503      	push	{r0, r1, lr}
 8004c68:	4601      	mov	r1, r0
 8004c6a:	ab03      	add	r3, sp, #12
 8004c6c:	4805      	ldr	r0, [pc, #20]	; (8004c84 <fiprintf+0x20>)
 8004c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	f000 f899 	bl	8004dac <_vfiprintf_r>
 8004c7a:	b002      	add	sp, #8
 8004c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c80:	b003      	add	sp, #12
 8004c82:	4770      	bx	lr
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <malloc>:
 8004c88:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <malloc+0xc>)
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	f7ff b8c5 	b.w	8003e1c <_malloc_r>
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c

08004c98 <memcpy>:
 8004c98:	440a      	add	r2, r1
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca0:	d100      	bne.n	8004ca4 <memcpy+0xc>
 8004ca2:	4770      	bx	lr
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb0:	d1f9      	bne.n	8004ca6 <memcpy+0xe>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <__malloc_lock>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__malloc_lock+0x8>)
 8004cb6:	f000 bdbb 	b.w	8005830 <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	200001b0 	.word	0x200001b0

08004cc0 <__malloc_unlock>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__malloc_unlock+0x8>)
 8004cc2:	f000 bdb6 	b.w	8005832 <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	200001b0 	.word	0x200001b0

08004ccc <_free_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4605      	mov	r5, r0
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d040      	beq.n	8004d56 <_free_r+0x8a>
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f0c      	subs	r4, r1, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfb8      	it	lt
 8004cde:	18e4      	addlt	r4, r4, r3
 8004ce0:	f7ff ffe8 	bl	8004cb4 <__malloc_lock>
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <_free_r+0x8c>)
 8004ce6:	6813      	ldr	r3, [r2, #0]
 8004ce8:	b933      	cbnz	r3, 8004cf8 <_free_r+0x2c>
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	6014      	str	r4, [r2, #0]
 8004cee:	4628      	mov	r0, r5
 8004cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf4:	f7ff bfe4 	b.w	8004cc0 <__malloc_unlock>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d908      	bls.n	8004d0e <_free_r+0x42>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf01      	itttt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	1809      	addeq	r1, r1, r0
 8004d0a:	6021      	streq	r1, [r4, #0]
 8004d0c:	e7ed      	b.n	8004cea <_free_r+0x1e>
 8004d0e:	461a      	mov	r2, r3
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b10b      	cbz	r3, 8004d18 <_free_r+0x4c>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d9fa      	bls.n	8004d0e <_free_r+0x42>
 8004d18:	6811      	ldr	r1, [r2, #0]
 8004d1a:	1850      	adds	r0, r2, r1
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d10b      	bne.n	8004d38 <_free_r+0x6c>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4401      	add	r1, r0
 8004d24:	1850      	adds	r0, r2, r1
 8004d26:	4283      	cmp	r3, r0
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	d1e0      	bne.n	8004cee <_free_r+0x22>
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4401      	add	r1, r0
 8004d32:	6011      	str	r1, [r2, #0]
 8004d34:	6053      	str	r3, [r2, #4]
 8004d36:	e7da      	b.n	8004cee <_free_r+0x22>
 8004d38:	d902      	bls.n	8004d40 <_free_r+0x74>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	e7d6      	b.n	8004cee <_free_r+0x22>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428b      	cmp	r3, r1
 8004d46:	bf01      	itttt	eq
 8004d48:	6819      	ldreq	r1, [r3, #0]
 8004d4a:	685b      	ldreq	r3, [r3, #4]
 8004d4c:	1809      	addeq	r1, r1, r0
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	6054      	str	r4, [r2, #4]
 8004d54:	e7cb      	b.n	8004cee <_free_r+0x22>
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	200001a4 	.word	0x200001a4

08004d5c <__sfputc_r>:
 8004d5c:	6893      	ldr	r3, [r2, #8]
 8004d5e:	b410      	push	{r4}
 8004d60:	3b01      	subs	r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	6093      	str	r3, [r2, #8]
 8004d66:	da07      	bge.n	8004d78 <__sfputc_r+0x1c>
 8004d68:	6994      	ldr	r4, [r2, #24]
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	db01      	blt.n	8004d72 <__sfputc_r+0x16>
 8004d6e:	290a      	cmp	r1, #10
 8004d70:	d102      	bne.n	8004d78 <__sfputc_r+0x1c>
 8004d72:	bc10      	pop	{r4}
 8004d74:	f000 bae0 	b.w	8005338 <__swbuf_r>
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	1c58      	adds	r0, r3, #1
 8004d7c:	6010      	str	r0, [r2, #0]
 8004d7e:	7019      	strb	r1, [r3, #0]
 8004d80:	4608      	mov	r0, r1
 8004d82:	bc10      	pop	{r4}
 8004d84:	4770      	bx	lr

08004d86 <__sfputs_r>:
 8004d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d88:	4606      	mov	r6, r0
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	18d5      	adds	r5, r2, r3
 8004d90:	42ac      	cmp	r4, r5
 8004d92:	d101      	bne.n	8004d98 <__sfputs_r+0x12>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e007      	b.n	8004da8 <__sfputs_r+0x22>
 8004d98:	463a      	mov	r2, r7
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da0:	f7ff ffdc 	bl	8004d5c <__sfputc_r>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d1f3      	bne.n	8004d90 <__sfputs_r+0xa>
 8004da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dac <_vfiprintf_r>:
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	460d      	mov	r5, r1
 8004db2:	4614      	mov	r4, r2
 8004db4:	4698      	mov	r8, r3
 8004db6:	4606      	mov	r6, r0
 8004db8:	b09d      	sub	sp, #116	; 0x74
 8004dba:	b118      	cbz	r0, 8004dc4 <_vfiprintf_r+0x18>
 8004dbc:	6983      	ldr	r3, [r0, #24]
 8004dbe:	b90b      	cbnz	r3, 8004dc4 <_vfiprintf_r+0x18>
 8004dc0:	f000 fc98 	bl	80056f4 <__sinit>
 8004dc4:	4b89      	ldr	r3, [pc, #548]	; (8004fec <_vfiprintf_r+0x240>)
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	d11b      	bne.n	8004e02 <_vfiprintf_r+0x56>
 8004dca:	6875      	ldr	r5, [r6, #4]
 8004dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dce:	07d9      	lsls	r1, r3, #31
 8004dd0:	d405      	bmi.n	8004dde <_vfiprintf_r+0x32>
 8004dd2:	89ab      	ldrh	r3, [r5, #12]
 8004dd4:	059a      	lsls	r2, r3, #22
 8004dd6:	d402      	bmi.n	8004dde <_vfiprintf_r+0x32>
 8004dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dda:	f000 fd29 	bl	8005830 <__retarget_lock_acquire_recursive>
 8004dde:	89ab      	ldrh	r3, [r5, #12]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	d501      	bpl.n	8004de8 <_vfiprintf_r+0x3c>
 8004de4:	692b      	ldr	r3, [r5, #16]
 8004de6:	b9eb      	cbnz	r3, 8004e24 <_vfiprintf_r+0x78>
 8004de8:	4629      	mov	r1, r5
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 faf6 	bl	80053dc <__swsetup_r>
 8004df0:	b1c0      	cbz	r0, 8004e24 <_vfiprintf_r+0x78>
 8004df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004df4:	07dc      	lsls	r4, r3, #31
 8004df6:	d50e      	bpl.n	8004e16 <_vfiprintf_r+0x6a>
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	b01d      	add	sp, #116	; 0x74
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e02:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <_vfiprintf_r+0x244>)
 8004e04:	429d      	cmp	r5, r3
 8004e06:	d101      	bne.n	8004e0c <_vfiprintf_r+0x60>
 8004e08:	68b5      	ldr	r5, [r6, #8]
 8004e0a:	e7df      	b.n	8004dcc <_vfiprintf_r+0x20>
 8004e0c:	4b79      	ldr	r3, [pc, #484]	; (8004ff4 <_vfiprintf_r+0x248>)
 8004e0e:	429d      	cmp	r5, r3
 8004e10:	bf08      	it	eq
 8004e12:	68f5      	ldreq	r5, [r6, #12]
 8004e14:	e7da      	b.n	8004dcc <_vfiprintf_r+0x20>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	0598      	lsls	r0, r3, #22
 8004e1a:	d4ed      	bmi.n	8004df8 <_vfiprintf_r+0x4c>
 8004e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e1e:	f000 fd08 	bl	8005832 <__retarget_lock_release_recursive>
 8004e22:	e7e9      	b.n	8004df8 <_vfiprintf_r+0x4c>
 8004e24:	2300      	movs	r3, #0
 8004e26:	9309      	str	r3, [sp, #36]	; 0x24
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e2e:	2330      	movs	r3, #48	; 0x30
 8004e30:	f04f 0901 	mov.w	r9, #1
 8004e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004ff8 <_vfiprintf_r+0x24c>
 8004e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e40:	4623      	mov	r3, r4
 8004e42:	469a      	mov	sl, r3
 8004e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e48:	b10a      	cbz	r2, 8004e4e <_vfiprintf_r+0xa2>
 8004e4a:	2a25      	cmp	r2, #37	; 0x25
 8004e4c:	d1f9      	bne.n	8004e42 <_vfiprintf_r+0x96>
 8004e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e52:	d00b      	beq.n	8004e6c <_vfiprintf_r+0xc0>
 8004e54:	465b      	mov	r3, fp
 8004e56:	4622      	mov	r2, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff ff93 	bl	8004d86 <__sfputs_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	f000 80aa 	beq.w	8004fba <_vfiprintf_r+0x20e>
 8004e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e68:	445a      	add	r2, fp
 8004e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a2 	beq.w	8004fba <_vfiprintf_r+0x20e>
 8004e76:	2300      	movs	r3, #0
 8004e78:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e80:	f10a 0a01 	add.w	sl, sl, #1
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	9307      	str	r3, [sp, #28]
 8004e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2205      	movs	r2, #5
 8004e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e96:	4858      	ldr	r0, [pc, #352]	; (8004ff8 <_vfiprintf_r+0x24c>)
 8004e98:	f000 fd32 	bl	8005900 <memchr>
 8004e9c:	9a04      	ldr	r2, [sp, #16]
 8004e9e:	b9d8      	cbnz	r0, 8004ed8 <_vfiprintf_r+0x12c>
 8004ea0:	06d1      	lsls	r1, r2, #27
 8004ea2:	bf44      	itt	mi
 8004ea4:	2320      	movmi	r3, #32
 8004ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eaa:	0713      	lsls	r3, r2, #28
 8004eac:	bf44      	itt	mi
 8004eae:	232b      	movmi	r3, #43	; 0x2b
 8004eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eba:	d015      	beq.n	8004ee8 <_vfiprintf_r+0x13c>
 8004ebc:	4654      	mov	r4, sl
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f04f 0c0a 	mov.w	ip, #10
 8004ec4:	9a07      	ldr	r2, [sp, #28]
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ecc:	3b30      	subs	r3, #48	; 0x30
 8004ece:	2b09      	cmp	r3, #9
 8004ed0:	d94e      	bls.n	8004f70 <_vfiprintf_r+0x1c4>
 8004ed2:	b1b0      	cbz	r0, 8004f02 <_vfiprintf_r+0x156>
 8004ed4:	9207      	str	r2, [sp, #28]
 8004ed6:	e014      	b.n	8004f02 <_vfiprintf_r+0x156>
 8004ed8:	eba0 0308 	sub.w	r3, r0, r8
 8004edc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	46a2      	mov	sl, r4
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	e7d2      	b.n	8004e8e <_vfiprintf_r+0xe2>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	1d19      	adds	r1, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	9103      	str	r1, [sp, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bfbb      	ittet	lt
 8004ef4:	425b      	neglt	r3, r3
 8004ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8004efa:	9307      	strge	r3, [sp, #28]
 8004efc:	9307      	strlt	r3, [sp, #28]
 8004efe:	bfb8      	it	lt
 8004f00:	9204      	strlt	r2, [sp, #16]
 8004f02:	7823      	ldrb	r3, [r4, #0]
 8004f04:	2b2e      	cmp	r3, #46	; 0x2e
 8004f06:	d10c      	bne.n	8004f22 <_vfiprintf_r+0x176>
 8004f08:	7863      	ldrb	r3, [r4, #1]
 8004f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0c:	d135      	bne.n	8004f7a <_vfiprintf_r+0x1ce>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	3402      	adds	r4, #2
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9203      	str	r2, [sp, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f20:	9305      	str	r3, [sp, #20]
 8004f22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004ffc <_vfiprintf_r+0x250>
 8004f26:	2203      	movs	r2, #3
 8004f28:	4650      	mov	r0, sl
 8004f2a:	7821      	ldrb	r1, [r4, #0]
 8004f2c:	f000 fce8 	bl	8005900 <memchr>
 8004f30:	b140      	cbz	r0, 8004f44 <_vfiprintf_r+0x198>
 8004f32:	2340      	movs	r3, #64	; 0x40
 8004f34:	eba0 000a 	sub.w	r0, r0, sl
 8004f38:	fa03 f000 	lsl.w	r0, r3, r0
 8004f3c:	9b04      	ldr	r3, [sp, #16]
 8004f3e:	3401      	adds	r4, #1
 8004f40:	4303      	orrs	r3, r0
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f48:	2206      	movs	r2, #6
 8004f4a:	482d      	ldr	r0, [pc, #180]	; (8005000 <_vfiprintf_r+0x254>)
 8004f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f50:	f000 fcd6 	bl	8005900 <memchr>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d03f      	beq.n	8004fd8 <_vfiprintf_r+0x22c>
 8004f58:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <_vfiprintf_r+0x258>)
 8004f5a:	bb1b      	cbnz	r3, 8004fa4 <_vfiprintf_r+0x1f8>
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	3307      	adds	r3, #7
 8004f60:	f023 0307 	bic.w	r3, r3, #7
 8004f64:	3308      	adds	r3, #8
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6a:	443b      	add	r3, r7
 8004f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6e:	e767      	b.n	8004e40 <_vfiprintf_r+0x94>
 8004f70:	460c      	mov	r4, r1
 8004f72:	2001      	movs	r0, #1
 8004f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f78:	e7a5      	b.n	8004ec6 <_vfiprintf_r+0x11a>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f04f 0c0a 	mov.w	ip, #10
 8004f80:	4619      	mov	r1, r3
 8004f82:	3401      	adds	r4, #1
 8004f84:	9305      	str	r3, [sp, #20]
 8004f86:	4620      	mov	r0, r4
 8004f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f8c:	3a30      	subs	r2, #48	; 0x30
 8004f8e:	2a09      	cmp	r2, #9
 8004f90:	d903      	bls.n	8004f9a <_vfiprintf_r+0x1ee>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0c5      	beq.n	8004f22 <_vfiprintf_r+0x176>
 8004f96:	9105      	str	r1, [sp, #20]
 8004f98:	e7c3      	b.n	8004f22 <_vfiprintf_r+0x176>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa2:	e7f0      	b.n	8004f86 <_vfiprintf_r+0x1da>
 8004fa4:	ab03      	add	r3, sp, #12
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4630      	mov	r0, r6
 8004fac:	4b16      	ldr	r3, [pc, #88]	; (8005008 <_vfiprintf_r+0x25c>)
 8004fae:	a904      	add	r1, sp, #16
 8004fb0:	f3af 8000 	nop.w
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	1c78      	adds	r0, r7, #1
 8004fb8:	d1d6      	bne.n	8004f68 <_vfiprintf_r+0x1bc>
 8004fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fbc:	07d9      	lsls	r1, r3, #31
 8004fbe:	d405      	bmi.n	8004fcc <_vfiprintf_r+0x220>
 8004fc0:	89ab      	ldrh	r3, [r5, #12]
 8004fc2:	059a      	lsls	r2, r3, #22
 8004fc4:	d402      	bmi.n	8004fcc <_vfiprintf_r+0x220>
 8004fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc8:	f000 fc33 	bl	8005832 <__retarget_lock_release_recursive>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af12 	bmi.w	8004df8 <_vfiprintf_r+0x4c>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	e711      	b.n	8004dfc <_vfiprintf_r+0x50>
 8004fd8:	ab03      	add	r3, sp, #12
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	462a      	mov	r2, r5
 8004fde:	4630      	mov	r0, r6
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <_vfiprintf_r+0x25c>)
 8004fe2:	a904      	add	r1, sp, #16
 8004fe4:	f000 f882 	bl	80050ec <_printf_i>
 8004fe8:	e7e4      	b.n	8004fb4 <_vfiprintf_r+0x208>
 8004fea:	bf00      	nop
 8004fec:	08005e28 	.word	0x08005e28
 8004ff0:	08005e48 	.word	0x08005e48
 8004ff4:	08005e08 	.word	0x08005e08
 8004ff8:	08005dd2 	.word	0x08005dd2
 8004ffc:	08005dd8 	.word	0x08005dd8
 8005000:	08005ddc 	.word	0x08005ddc
 8005004:	00000000 	.word	0x00000000
 8005008:	08004d87 	.word	0x08004d87

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4699      	mov	r9, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	4607      	mov	r7, r0
 800501a:	4293      	cmp	r3, r2
 800501c:	bfb8      	it	lt
 800501e:	4613      	movlt	r3, r2
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005026:	460c      	mov	r4, r1
 8005028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc28      	bgt.n	80050a6 <_printf_common+0x9a>
 8005054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005058:	1e13      	subs	r3, r2, #0
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d42d      	bmi.n	80050c0 <_printf_common+0xb4>
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d020      	beq.n	80050b4 <_printf_common+0xa8>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	68e5      	ldr	r5, [r4, #12]
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf18      	it	ne
 800507e:	2500      	movne	r5, #0
 8005080:	6832      	ldr	r2, [r6, #0]
 8005082:	f04f 0600 	mov.w	r6, #0
 8005086:	68a3      	ldr	r3, [r4, #8]
 8005088:	bf08      	it	eq
 800508a:	1aad      	subeq	r5, r5, r2
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	bf08      	it	eq
 8005090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005094:	4293      	cmp	r3, r2
 8005096:	bfc4      	itt	gt
 8005098:	1a9b      	subgt	r3, r3, r2
 800509a:	18ed      	addgt	r5, r5, r3
 800509c:	341a      	adds	r4, #26
 800509e:	42b5      	cmp	r5, r6
 80050a0:	d11a      	bne.n	80050d8 <_printf_common+0xcc>
 80050a2:	2000      	movs	r0, #0
 80050a4:	e008      	b.n	80050b8 <_printf_common+0xac>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4652      	mov	r2, sl
 80050aa:	4649      	mov	r1, r9
 80050ac:	4638      	mov	r0, r7
 80050ae:	47c0      	blx	r8
 80050b0:	3001      	adds	r0, #1
 80050b2:	d103      	bne.n	80050bc <_printf_common+0xb0>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	3501      	adds	r5, #1
 80050be:	e7c4      	b.n	800504a <_printf_common+0x3e>
 80050c0:	2030      	movs	r0, #48	; 0x30
 80050c2:	18e1      	adds	r1, r4, r3
 80050c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ce:	4422      	add	r2, r4
 80050d0:	3302      	adds	r3, #2
 80050d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d6:	e7c5      	b.n	8005064 <_printf_common+0x58>
 80050d8:	2301      	movs	r3, #1
 80050da:	4622      	mov	r2, r4
 80050dc:	4649      	mov	r1, r9
 80050de:	4638      	mov	r0, r7
 80050e0:	47c0      	blx	r8
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0e6      	beq.n	80050b4 <_printf_common+0xa8>
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7d9      	b.n	800509e <_printf_common+0x92>
	...

080050ec <_printf_i>:
 80050ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f0:	7e0f      	ldrb	r7, [r1, #24]
 80050f2:	4691      	mov	r9, r2
 80050f4:	2f78      	cmp	r7, #120	; 0x78
 80050f6:	4680      	mov	r8, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	469a      	mov	sl, r3
 80050fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005102:	d807      	bhi.n	8005114 <_printf_i+0x28>
 8005104:	2f62      	cmp	r7, #98	; 0x62
 8005106:	d80a      	bhi.n	800511e <_printf_i+0x32>
 8005108:	2f00      	cmp	r7, #0
 800510a:	f000 80d9 	beq.w	80052c0 <_printf_i+0x1d4>
 800510e:	2f58      	cmp	r7, #88	; 0x58
 8005110:	f000 80a4 	beq.w	800525c <_printf_i+0x170>
 8005114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800511c:	e03a      	b.n	8005194 <_printf_i+0xa8>
 800511e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005122:	2b15      	cmp	r3, #21
 8005124:	d8f6      	bhi.n	8005114 <_printf_i+0x28>
 8005126:	a101      	add	r1, pc, #4	; (adr r1, 800512c <_printf_i+0x40>)
 8005128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800512c:	08005185 	.word	0x08005185
 8005130:	08005199 	.word	0x08005199
 8005134:	08005115 	.word	0x08005115
 8005138:	08005115 	.word	0x08005115
 800513c:	08005115 	.word	0x08005115
 8005140:	08005115 	.word	0x08005115
 8005144:	08005199 	.word	0x08005199
 8005148:	08005115 	.word	0x08005115
 800514c:	08005115 	.word	0x08005115
 8005150:	08005115 	.word	0x08005115
 8005154:	08005115 	.word	0x08005115
 8005158:	080052a7 	.word	0x080052a7
 800515c:	080051c9 	.word	0x080051c9
 8005160:	08005289 	.word	0x08005289
 8005164:	08005115 	.word	0x08005115
 8005168:	08005115 	.word	0x08005115
 800516c:	080052c9 	.word	0x080052c9
 8005170:	08005115 	.word	0x08005115
 8005174:	080051c9 	.word	0x080051c9
 8005178:	08005115 	.word	0x08005115
 800517c:	08005115 	.word	0x08005115
 8005180:	08005291 	.word	0x08005291
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	602a      	str	r2, [r5, #0]
 800518c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005194:	2301      	movs	r3, #1
 8005196:	e0a4      	b.n	80052e2 <_printf_i+0x1f6>
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	6829      	ldr	r1, [r5, #0]
 800519c:	0606      	lsls	r6, r0, #24
 800519e:	f101 0304 	add.w	r3, r1, #4
 80051a2:	d50a      	bpl.n	80051ba <_printf_i+0xce>
 80051a4:	680e      	ldr	r6, [r1, #0]
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	2e00      	cmp	r6, #0
 80051aa:	da03      	bge.n	80051b4 <_printf_i+0xc8>
 80051ac:	232d      	movs	r3, #45	; 0x2d
 80051ae:	4276      	negs	r6, r6
 80051b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b4:	230a      	movs	r3, #10
 80051b6:	485e      	ldr	r0, [pc, #376]	; (8005330 <_printf_i+0x244>)
 80051b8:	e019      	b.n	80051ee <_printf_i+0x102>
 80051ba:	680e      	ldr	r6, [r1, #0]
 80051bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	bf18      	it	ne
 80051c4:	b236      	sxthne	r6, r6
 80051c6:	e7ef      	b.n	80051a8 <_printf_i+0xbc>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	1d19      	adds	r1, r3, #4
 80051ce:	6029      	str	r1, [r5, #0]
 80051d0:	0601      	lsls	r1, r0, #24
 80051d2:	d501      	bpl.n	80051d8 <_printf_i+0xec>
 80051d4:	681e      	ldr	r6, [r3, #0]
 80051d6:	e002      	b.n	80051de <_printf_i+0xf2>
 80051d8:	0646      	lsls	r6, r0, #25
 80051da:	d5fb      	bpl.n	80051d4 <_printf_i+0xe8>
 80051dc:	881e      	ldrh	r6, [r3, #0]
 80051de:	2f6f      	cmp	r7, #111	; 0x6f
 80051e0:	bf0c      	ite	eq
 80051e2:	2308      	moveq	r3, #8
 80051e4:	230a      	movne	r3, #10
 80051e6:	4852      	ldr	r0, [pc, #328]	; (8005330 <_printf_i+0x244>)
 80051e8:	2100      	movs	r1, #0
 80051ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ee:	6865      	ldr	r5, [r4, #4]
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	bfa8      	it	ge
 80051f4:	6821      	ldrge	r1, [r4, #0]
 80051f6:	60a5      	str	r5, [r4, #8]
 80051f8:	bfa4      	itt	ge
 80051fa:	f021 0104 	bicge.w	r1, r1, #4
 80051fe:	6021      	strge	r1, [r4, #0]
 8005200:	b90e      	cbnz	r6, 8005206 <_printf_i+0x11a>
 8005202:	2d00      	cmp	r5, #0
 8005204:	d04d      	beq.n	80052a2 <_printf_i+0x1b6>
 8005206:	4615      	mov	r5, r2
 8005208:	fbb6 f1f3 	udiv	r1, r6, r3
 800520c:	fb03 6711 	mls	r7, r3, r1, r6
 8005210:	5dc7      	ldrb	r7, [r0, r7]
 8005212:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005216:	4637      	mov	r7, r6
 8005218:	42bb      	cmp	r3, r7
 800521a:	460e      	mov	r6, r1
 800521c:	d9f4      	bls.n	8005208 <_printf_i+0x11c>
 800521e:	2b08      	cmp	r3, #8
 8005220:	d10b      	bne.n	800523a <_printf_i+0x14e>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	07de      	lsls	r6, r3, #31
 8005226:	d508      	bpl.n	800523a <_printf_i+0x14e>
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	6861      	ldr	r1, [r4, #4]
 800522c:	4299      	cmp	r1, r3
 800522e:	bfde      	ittt	le
 8005230:	2330      	movle	r3, #48	; 0x30
 8005232:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005236:	f105 35ff 	addle.w	r5, r5, #4294967295
 800523a:	1b52      	subs	r2, r2, r5
 800523c:	6122      	str	r2, [r4, #16]
 800523e:	464b      	mov	r3, r9
 8005240:	4621      	mov	r1, r4
 8005242:	4640      	mov	r0, r8
 8005244:	f8cd a000 	str.w	sl, [sp]
 8005248:	aa03      	add	r2, sp, #12
 800524a:	f7ff fedf 	bl	800500c <_printf_common>
 800524e:	3001      	adds	r0, #1
 8005250:	d14c      	bne.n	80052ec <_printf_i+0x200>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	b004      	add	sp, #16
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	4834      	ldr	r0, [pc, #208]	; (8005330 <_printf_i+0x244>)
 800525e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005262:	6829      	ldr	r1, [r5, #0]
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f851 6b04 	ldr.w	r6, [r1], #4
 800526a:	6029      	str	r1, [r5, #0]
 800526c:	061d      	lsls	r5, r3, #24
 800526e:	d514      	bpl.n	800529a <_printf_i+0x1ae>
 8005270:	07df      	lsls	r7, r3, #31
 8005272:	bf44      	itt	mi
 8005274:	f043 0320 	orrmi.w	r3, r3, #32
 8005278:	6023      	strmi	r3, [r4, #0]
 800527a:	b91e      	cbnz	r6, 8005284 <_printf_i+0x198>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f023 0320 	bic.w	r3, r3, #32
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	2310      	movs	r3, #16
 8005286:	e7af      	b.n	80051e8 <_printf_i+0xfc>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	2378      	movs	r3, #120	; 0x78
 8005292:	4828      	ldr	r0, [pc, #160]	; (8005334 <_printf_i+0x248>)
 8005294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005298:	e7e3      	b.n	8005262 <_printf_i+0x176>
 800529a:	0659      	lsls	r1, r3, #25
 800529c:	bf48      	it	mi
 800529e:	b2b6      	uxthmi	r6, r6
 80052a0:	e7e6      	b.n	8005270 <_printf_i+0x184>
 80052a2:	4615      	mov	r5, r2
 80052a4:	e7bb      	b.n	800521e <_printf_i+0x132>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	6826      	ldr	r6, [r4, #0]
 80052aa:	1d18      	adds	r0, r3, #4
 80052ac:	6961      	ldr	r1, [r4, #20]
 80052ae:	6028      	str	r0, [r5, #0]
 80052b0:	0635      	lsls	r5, r6, #24
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	d501      	bpl.n	80052ba <_printf_i+0x1ce>
 80052b6:	6019      	str	r1, [r3, #0]
 80052b8:	e002      	b.n	80052c0 <_printf_i+0x1d4>
 80052ba:	0670      	lsls	r0, r6, #25
 80052bc:	d5fb      	bpl.n	80052b6 <_printf_i+0x1ca>
 80052be:	8019      	strh	r1, [r3, #0]
 80052c0:	2300      	movs	r3, #0
 80052c2:	4615      	mov	r5, r2
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	e7ba      	b.n	800523e <_printf_i+0x152>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	2100      	movs	r1, #0
 80052cc:	1d1a      	adds	r2, r3, #4
 80052ce:	602a      	str	r2, [r5, #0]
 80052d0:	681d      	ldr	r5, [r3, #0]
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 fb13 	bl	8005900 <memchr>
 80052da:	b108      	cbz	r0, 80052e0 <_printf_i+0x1f4>
 80052dc:	1b40      	subs	r0, r0, r5
 80052de:	6060      	str	r0, [r4, #4]
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	2300      	movs	r3, #0
 80052e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ea:	e7a8      	b.n	800523e <_printf_i+0x152>
 80052ec:	462a      	mov	r2, r5
 80052ee:	4649      	mov	r1, r9
 80052f0:	4640      	mov	r0, r8
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	47d0      	blx	sl
 80052f6:	3001      	adds	r0, #1
 80052f8:	d0ab      	beq.n	8005252 <_printf_i+0x166>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	079b      	lsls	r3, r3, #30
 80052fe:	d413      	bmi.n	8005328 <_printf_i+0x23c>
 8005300:	68e0      	ldr	r0, [r4, #12]
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	4298      	cmp	r0, r3
 8005306:	bfb8      	it	lt
 8005308:	4618      	movlt	r0, r3
 800530a:	e7a4      	b.n	8005256 <_printf_i+0x16a>
 800530c:	2301      	movs	r3, #1
 800530e:	4632      	mov	r2, r6
 8005310:	4649      	mov	r1, r9
 8005312:	4640      	mov	r0, r8
 8005314:	47d0      	blx	sl
 8005316:	3001      	adds	r0, #1
 8005318:	d09b      	beq.n	8005252 <_printf_i+0x166>
 800531a:	3501      	adds	r5, #1
 800531c:	68e3      	ldr	r3, [r4, #12]
 800531e:	9903      	ldr	r1, [sp, #12]
 8005320:	1a5b      	subs	r3, r3, r1
 8005322:	42ab      	cmp	r3, r5
 8005324:	dcf2      	bgt.n	800530c <_printf_i+0x220>
 8005326:	e7eb      	b.n	8005300 <_printf_i+0x214>
 8005328:	2500      	movs	r5, #0
 800532a:	f104 0619 	add.w	r6, r4, #25
 800532e:	e7f5      	b.n	800531c <_printf_i+0x230>
 8005330:	08005de3 	.word	0x08005de3
 8005334:	08005df4 	.word	0x08005df4

08005338 <__swbuf_r>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	460e      	mov	r6, r1
 800533c:	4614      	mov	r4, r2
 800533e:	4605      	mov	r5, r0
 8005340:	b118      	cbz	r0, 800534a <__swbuf_r+0x12>
 8005342:	6983      	ldr	r3, [r0, #24]
 8005344:	b90b      	cbnz	r3, 800534a <__swbuf_r+0x12>
 8005346:	f000 f9d5 	bl	80056f4 <__sinit>
 800534a:	4b21      	ldr	r3, [pc, #132]	; (80053d0 <__swbuf_r+0x98>)
 800534c:	429c      	cmp	r4, r3
 800534e:	d12b      	bne.n	80053a8 <__swbuf_r+0x70>
 8005350:	686c      	ldr	r4, [r5, #4]
 8005352:	69a3      	ldr	r3, [r4, #24]
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	071a      	lsls	r2, r3, #28
 800535a:	d52f      	bpl.n	80053bc <__swbuf_r+0x84>
 800535c:	6923      	ldr	r3, [r4, #16]
 800535e:	b36b      	cbz	r3, 80053bc <__swbuf_r+0x84>
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	b2f6      	uxtb	r6, r6
 8005366:	1ac0      	subs	r0, r0, r3
 8005368:	6963      	ldr	r3, [r4, #20]
 800536a:	4637      	mov	r7, r6
 800536c:	4283      	cmp	r3, r0
 800536e:	dc04      	bgt.n	800537a <__swbuf_r+0x42>
 8005370:	4621      	mov	r1, r4
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f92a 	bl	80055cc <_fflush_r>
 8005378:	bb30      	cbnz	r0, 80053c8 <__swbuf_r+0x90>
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	3001      	adds	r0, #1
 800537e:	3b01      	subs	r3, #1
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	6022      	str	r2, [r4, #0]
 8005388:	701e      	strb	r6, [r3, #0]
 800538a:	6963      	ldr	r3, [r4, #20]
 800538c:	4283      	cmp	r3, r0
 800538e:	d004      	beq.n	800539a <__swbuf_r+0x62>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	07db      	lsls	r3, r3, #31
 8005394:	d506      	bpl.n	80053a4 <__swbuf_r+0x6c>
 8005396:	2e0a      	cmp	r6, #10
 8005398:	d104      	bne.n	80053a4 <__swbuf_r+0x6c>
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f915 	bl	80055cc <_fflush_r>
 80053a2:	b988      	cbnz	r0, 80053c8 <__swbuf_r+0x90>
 80053a4:	4638      	mov	r0, r7
 80053a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <__swbuf_r+0x9c>)
 80053aa:	429c      	cmp	r4, r3
 80053ac:	d101      	bne.n	80053b2 <__swbuf_r+0x7a>
 80053ae:	68ac      	ldr	r4, [r5, #8]
 80053b0:	e7cf      	b.n	8005352 <__swbuf_r+0x1a>
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <__swbuf_r+0xa0>)
 80053b4:	429c      	cmp	r4, r3
 80053b6:	bf08      	it	eq
 80053b8:	68ec      	ldreq	r4, [r5, #12]
 80053ba:	e7ca      	b.n	8005352 <__swbuf_r+0x1a>
 80053bc:	4621      	mov	r1, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f80c 	bl	80053dc <__swsetup_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d0cb      	beq.n	8005360 <__swbuf_r+0x28>
 80053c8:	f04f 37ff 	mov.w	r7, #4294967295
 80053cc:	e7ea      	b.n	80053a4 <__swbuf_r+0x6c>
 80053ce:	bf00      	nop
 80053d0:	08005e28 	.word	0x08005e28
 80053d4:	08005e48 	.word	0x08005e48
 80053d8:	08005e08 	.word	0x08005e08

080053dc <__swsetup_r>:
 80053dc:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <__swsetup_r+0xcc>)
 80053de:	b570      	push	{r4, r5, r6, lr}
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	4606      	mov	r6, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	b125      	cbz	r5, 80053f2 <__swsetup_r+0x16>
 80053e8:	69ab      	ldr	r3, [r5, #24]
 80053ea:	b913      	cbnz	r3, 80053f2 <__swsetup_r+0x16>
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f981 	bl	80056f4 <__sinit>
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <__swsetup_r+0xd0>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d10f      	bne.n	8005418 <__swsetup_r+0x3c>
 80053f8:	686c      	ldr	r4, [r5, #4]
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005400:	0719      	lsls	r1, r3, #28
 8005402:	d42c      	bmi.n	800545e <__swsetup_r+0x82>
 8005404:	06dd      	lsls	r5, r3, #27
 8005406:	d411      	bmi.n	800542c <__swsetup_r+0x50>
 8005408:	2309      	movs	r3, #9
 800540a:	6033      	str	r3, [r6, #0]
 800540c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	81a3      	strh	r3, [r4, #12]
 8005416:	e03e      	b.n	8005496 <__swsetup_r+0xba>
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <__swsetup_r+0xd4>)
 800541a:	429c      	cmp	r4, r3
 800541c:	d101      	bne.n	8005422 <__swsetup_r+0x46>
 800541e:	68ac      	ldr	r4, [r5, #8]
 8005420:	e7eb      	b.n	80053fa <__swsetup_r+0x1e>
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <__swsetup_r+0xd8>)
 8005424:	429c      	cmp	r4, r3
 8005426:	bf08      	it	eq
 8005428:	68ec      	ldreq	r4, [r5, #12]
 800542a:	e7e6      	b.n	80053fa <__swsetup_r+0x1e>
 800542c:	0758      	lsls	r0, r3, #29
 800542e:	d512      	bpl.n	8005456 <__swsetup_r+0x7a>
 8005430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005432:	b141      	cbz	r1, 8005446 <__swsetup_r+0x6a>
 8005434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005438:	4299      	cmp	r1, r3
 800543a:	d002      	beq.n	8005442 <__swsetup_r+0x66>
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff fc45 	bl	8004ccc <_free_r>
 8005442:	2300      	movs	r3, #0
 8005444:	6363      	str	r3, [r4, #52]	; 0x34
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800544c:	81a3      	strh	r3, [r4, #12]
 800544e:	2300      	movs	r3, #0
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f043 0308 	orr.w	r3, r3, #8
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	b94b      	cbnz	r3, 8005476 <__swsetup_r+0x9a>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d003      	beq.n	8005476 <__swsetup_r+0x9a>
 800546e:	4621      	mov	r1, r4
 8005470:	4630      	mov	r0, r6
 8005472:	f000 fa05 	bl	8005880 <__smakebuf_r>
 8005476:	89a0      	ldrh	r0, [r4, #12]
 8005478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800547c:	f010 0301 	ands.w	r3, r0, #1
 8005480:	d00a      	beq.n	8005498 <__swsetup_r+0xbc>
 8005482:	2300      	movs	r3, #0
 8005484:	60a3      	str	r3, [r4, #8]
 8005486:	6963      	ldr	r3, [r4, #20]
 8005488:	425b      	negs	r3, r3
 800548a:	61a3      	str	r3, [r4, #24]
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	b943      	cbnz	r3, 80054a2 <__swsetup_r+0xc6>
 8005490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005494:	d1ba      	bne.n	800540c <__swsetup_r+0x30>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	0781      	lsls	r1, r0, #30
 800549a:	bf58      	it	pl
 800549c:	6963      	ldrpl	r3, [r4, #20]
 800549e:	60a3      	str	r3, [r4, #8]
 80054a0:	e7f4      	b.n	800548c <__swsetup_r+0xb0>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e7f7      	b.n	8005496 <__swsetup_r+0xba>
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c
 80054ac:	08005e28 	.word	0x08005e28
 80054b0:	08005e48 	.word	0x08005e48
 80054b4:	08005e08 	.word	0x08005e08

080054b8 <abort>:
 80054b8:	2006      	movs	r0, #6
 80054ba:	b508      	push	{r3, lr}
 80054bc:	f000 fa56 	bl	800596c <raise>
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7fc fae0 	bl	8001a86 <_exit>
	...

080054c8 <__sflush_r>:
 80054c8:	898a      	ldrh	r2, [r1, #12]
 80054ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054cc:	4605      	mov	r5, r0
 80054ce:	0710      	lsls	r0, r2, #28
 80054d0:	460c      	mov	r4, r1
 80054d2:	d457      	bmi.n	8005584 <__sflush_r+0xbc>
 80054d4:	684b      	ldr	r3, [r1, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	dc04      	bgt.n	80054e4 <__sflush_r+0x1c>
 80054da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dc01      	bgt.n	80054e4 <__sflush_r+0x1c>
 80054e0:	2000      	movs	r0, #0
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	d0fa      	beq.n	80054e0 <__sflush_r+0x18>
 80054ea:	2300      	movs	r3, #0
 80054ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054f0:	682f      	ldr	r7, [r5, #0]
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	d032      	beq.n	800555c <__sflush_r+0x94>
 80054f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	075a      	lsls	r2, r3, #29
 80054fc:	d505      	bpl.n	800550a <__sflush_r+0x42>
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	1ac0      	subs	r0, r0, r3
 8005502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005504:	b10b      	cbz	r3, 800550a <__sflush_r+0x42>
 8005506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005508:	1ac0      	subs	r0, r0, r3
 800550a:	2300      	movs	r3, #0
 800550c:	4602      	mov	r2, r0
 800550e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005510:	4628      	mov	r0, r5
 8005512:	6a21      	ldr	r1, [r4, #32]
 8005514:	47b0      	blx	r6
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	d106      	bne.n	800552a <__sflush_r+0x62>
 800551c:	6829      	ldr	r1, [r5, #0]
 800551e:	291d      	cmp	r1, #29
 8005520:	d82c      	bhi.n	800557c <__sflush_r+0xb4>
 8005522:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <__sflush_r+0x100>)
 8005524:	40ca      	lsrs	r2, r1
 8005526:	07d6      	lsls	r6, r2, #31
 8005528:	d528      	bpl.n	800557c <__sflush_r+0xb4>
 800552a:	2200      	movs	r2, #0
 800552c:	6062      	str	r2, [r4, #4]
 800552e:	6922      	ldr	r2, [r4, #16]
 8005530:	04d9      	lsls	r1, r3, #19
 8005532:	6022      	str	r2, [r4, #0]
 8005534:	d504      	bpl.n	8005540 <__sflush_r+0x78>
 8005536:	1c42      	adds	r2, r0, #1
 8005538:	d101      	bne.n	800553e <__sflush_r+0x76>
 800553a:	682b      	ldr	r3, [r5, #0]
 800553c:	b903      	cbnz	r3, 8005540 <__sflush_r+0x78>
 800553e:	6560      	str	r0, [r4, #84]	; 0x54
 8005540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005542:	602f      	str	r7, [r5, #0]
 8005544:	2900      	cmp	r1, #0
 8005546:	d0cb      	beq.n	80054e0 <__sflush_r+0x18>
 8005548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800554c:	4299      	cmp	r1, r3
 800554e:	d002      	beq.n	8005556 <__sflush_r+0x8e>
 8005550:	4628      	mov	r0, r5
 8005552:	f7ff fbbb 	bl	8004ccc <_free_r>
 8005556:	2000      	movs	r0, #0
 8005558:	6360      	str	r0, [r4, #52]	; 0x34
 800555a:	e7c2      	b.n	80054e2 <__sflush_r+0x1a>
 800555c:	6a21      	ldr	r1, [r4, #32]
 800555e:	2301      	movs	r3, #1
 8005560:	4628      	mov	r0, r5
 8005562:	47b0      	blx	r6
 8005564:	1c41      	adds	r1, r0, #1
 8005566:	d1c7      	bne.n	80054f8 <__sflush_r+0x30>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0c4      	beq.n	80054f8 <__sflush_r+0x30>
 800556e:	2b1d      	cmp	r3, #29
 8005570:	d001      	beq.n	8005576 <__sflush_r+0xae>
 8005572:	2b16      	cmp	r3, #22
 8005574:	d101      	bne.n	800557a <__sflush_r+0xb2>
 8005576:	602f      	str	r7, [r5, #0]
 8005578:	e7b2      	b.n	80054e0 <__sflush_r+0x18>
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	e7ae      	b.n	80054e2 <__sflush_r+0x1a>
 8005584:	690f      	ldr	r7, [r1, #16]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d0aa      	beq.n	80054e0 <__sflush_r+0x18>
 800558a:	0793      	lsls	r3, r2, #30
 800558c:	bf18      	it	ne
 800558e:	2300      	movne	r3, #0
 8005590:	680e      	ldr	r6, [r1, #0]
 8005592:	bf08      	it	eq
 8005594:	694b      	ldreq	r3, [r1, #20]
 8005596:	1bf6      	subs	r6, r6, r7
 8005598:	600f      	str	r7, [r1, #0]
 800559a:	608b      	str	r3, [r1, #8]
 800559c:	2e00      	cmp	r6, #0
 800559e:	dd9f      	ble.n	80054e0 <__sflush_r+0x18>
 80055a0:	4633      	mov	r3, r6
 80055a2:	463a      	mov	r2, r7
 80055a4:	4628      	mov	r0, r5
 80055a6:	6a21      	ldr	r1, [r4, #32]
 80055a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80055ac:	47e0      	blx	ip
 80055ae:	2800      	cmp	r0, #0
 80055b0:	dc06      	bgt.n	80055c0 <__sflush_r+0xf8>
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	e790      	b.n	80054e2 <__sflush_r+0x1a>
 80055c0:	4407      	add	r7, r0
 80055c2:	1a36      	subs	r6, r6, r0
 80055c4:	e7ea      	b.n	800559c <__sflush_r+0xd4>
 80055c6:	bf00      	nop
 80055c8:	20400001 	.word	0x20400001

080055cc <_fflush_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	4605      	mov	r5, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	b913      	cbnz	r3, 80055dc <_fflush_r+0x10>
 80055d6:	2500      	movs	r5, #0
 80055d8:	4628      	mov	r0, r5
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	b118      	cbz	r0, 80055e6 <_fflush_r+0x1a>
 80055de:	6983      	ldr	r3, [r0, #24]
 80055e0:	b90b      	cbnz	r3, 80055e6 <_fflush_r+0x1a>
 80055e2:	f000 f887 	bl	80056f4 <__sinit>
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <_fflush_r+0x6c>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d11b      	bne.n	8005624 <_fflush_r+0x58>
 80055ec:	686c      	ldr	r4, [r5, #4]
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0ef      	beq.n	80055d6 <_fflush_r+0xa>
 80055f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055f8:	07d0      	lsls	r0, r2, #31
 80055fa:	d404      	bmi.n	8005606 <_fflush_r+0x3a>
 80055fc:	0599      	lsls	r1, r3, #22
 80055fe:	d402      	bmi.n	8005606 <_fflush_r+0x3a>
 8005600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005602:	f000 f915 	bl	8005830 <__retarget_lock_acquire_recursive>
 8005606:	4628      	mov	r0, r5
 8005608:	4621      	mov	r1, r4
 800560a:	f7ff ff5d 	bl	80054c8 <__sflush_r>
 800560e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005610:	4605      	mov	r5, r0
 8005612:	07da      	lsls	r2, r3, #31
 8005614:	d4e0      	bmi.n	80055d8 <_fflush_r+0xc>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	059b      	lsls	r3, r3, #22
 800561a:	d4dd      	bmi.n	80055d8 <_fflush_r+0xc>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f000 f908 	bl	8005832 <__retarget_lock_release_recursive>
 8005622:	e7d9      	b.n	80055d8 <_fflush_r+0xc>
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <_fflush_r+0x70>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d101      	bne.n	800562e <_fflush_r+0x62>
 800562a:	68ac      	ldr	r4, [r5, #8]
 800562c:	e7df      	b.n	80055ee <_fflush_r+0x22>
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <_fflush_r+0x74>)
 8005630:	429c      	cmp	r4, r3
 8005632:	bf08      	it	eq
 8005634:	68ec      	ldreq	r4, [r5, #12]
 8005636:	e7da      	b.n	80055ee <_fflush_r+0x22>
 8005638:	08005e28 	.word	0x08005e28
 800563c:	08005e48 	.word	0x08005e48
 8005640:	08005e08 	.word	0x08005e08

08005644 <std>:
 8005644:	2300      	movs	r3, #0
 8005646:	b510      	push	{r4, lr}
 8005648:	4604      	mov	r4, r0
 800564a:	e9c0 3300 	strd	r3, r3, [r0]
 800564e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005652:	6083      	str	r3, [r0, #8]
 8005654:	8181      	strh	r1, [r0, #12]
 8005656:	6643      	str	r3, [r0, #100]	; 0x64
 8005658:	81c2      	strh	r2, [r0, #14]
 800565a:	6183      	str	r3, [r0, #24]
 800565c:	4619      	mov	r1, r3
 800565e:	2208      	movs	r2, #8
 8005660:	305c      	adds	r0, #92	; 0x5c
 8005662:	f7fd fe85 	bl	8003370 <memset>
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <std+0x38>)
 8005668:	6224      	str	r4, [r4, #32]
 800566a:	6263      	str	r3, [r4, #36]	; 0x24
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <std+0x3c>)
 800566e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005670:	4b04      	ldr	r3, [pc, #16]	; (8005684 <std+0x40>)
 8005672:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <std+0x44>)
 8005676:	6323      	str	r3, [r4, #48]	; 0x30
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	080059a5 	.word	0x080059a5
 8005680:	080059c7 	.word	0x080059c7
 8005684:	080059ff 	.word	0x080059ff
 8005688:	08005a23 	.word	0x08005a23

0800568c <_cleanup_r>:
 800568c:	4901      	ldr	r1, [pc, #4]	; (8005694 <_cleanup_r+0x8>)
 800568e:	f000 b8af 	b.w	80057f0 <_fwalk_reent>
 8005692:	bf00      	nop
 8005694:	080055cd 	.word	0x080055cd

08005698 <__sfmoreglue>:
 8005698:	2268      	movs	r2, #104	; 0x68
 800569a:	b570      	push	{r4, r5, r6, lr}
 800569c:	1e4d      	subs	r5, r1, #1
 800569e:	4355      	muls	r5, r2
 80056a0:	460e      	mov	r6, r1
 80056a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056a6:	f7fe fbb9 	bl	8003e1c <_malloc_r>
 80056aa:	4604      	mov	r4, r0
 80056ac:	b140      	cbz	r0, 80056c0 <__sfmoreglue+0x28>
 80056ae:	2100      	movs	r1, #0
 80056b0:	e9c0 1600 	strd	r1, r6, [r0]
 80056b4:	300c      	adds	r0, #12
 80056b6:	60a0      	str	r0, [r4, #8]
 80056b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056bc:	f7fd fe58 	bl	8003370 <memset>
 80056c0:	4620      	mov	r0, r4
 80056c2:	bd70      	pop	{r4, r5, r6, pc}

080056c4 <__sfp_lock_acquire>:
 80056c4:	4801      	ldr	r0, [pc, #4]	; (80056cc <__sfp_lock_acquire+0x8>)
 80056c6:	f000 b8b3 	b.w	8005830 <__retarget_lock_acquire_recursive>
 80056ca:	bf00      	nop
 80056cc:	200001b1 	.word	0x200001b1

080056d0 <__sfp_lock_release>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__sfp_lock_release+0x8>)
 80056d2:	f000 b8ae 	b.w	8005832 <__retarget_lock_release_recursive>
 80056d6:	bf00      	nop
 80056d8:	200001b1 	.word	0x200001b1

080056dc <__sinit_lock_acquire>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__sinit_lock_acquire+0x8>)
 80056de:	f000 b8a7 	b.w	8005830 <__retarget_lock_acquire_recursive>
 80056e2:	bf00      	nop
 80056e4:	200001b2 	.word	0x200001b2

080056e8 <__sinit_lock_release>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__sinit_lock_release+0x8>)
 80056ea:	f000 b8a2 	b.w	8005832 <__retarget_lock_release_recursive>
 80056ee:	bf00      	nop
 80056f0:	200001b2 	.word	0x200001b2

080056f4 <__sinit>:
 80056f4:	b510      	push	{r4, lr}
 80056f6:	4604      	mov	r4, r0
 80056f8:	f7ff fff0 	bl	80056dc <__sinit_lock_acquire>
 80056fc:	69a3      	ldr	r3, [r4, #24]
 80056fe:	b11b      	cbz	r3, 8005708 <__sinit+0x14>
 8005700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005704:	f7ff bff0 	b.w	80056e8 <__sinit_lock_release>
 8005708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800570c:	6523      	str	r3, [r4, #80]	; 0x50
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <__sinit+0x68>)
 8005710:	4a13      	ldr	r2, [pc, #76]	; (8005760 <__sinit+0x6c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	62a2      	str	r2, [r4, #40]	; 0x28
 8005716:	42a3      	cmp	r3, r4
 8005718:	bf08      	it	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	4620      	mov	r0, r4
 800571e:	bf08      	it	eq
 8005720:	61a3      	streq	r3, [r4, #24]
 8005722:	f000 f81f 	bl	8005764 <__sfp>
 8005726:	6060      	str	r0, [r4, #4]
 8005728:	4620      	mov	r0, r4
 800572a:	f000 f81b 	bl	8005764 <__sfp>
 800572e:	60a0      	str	r0, [r4, #8]
 8005730:	4620      	mov	r0, r4
 8005732:	f000 f817 	bl	8005764 <__sfp>
 8005736:	2200      	movs	r2, #0
 8005738:	2104      	movs	r1, #4
 800573a:	60e0      	str	r0, [r4, #12]
 800573c:	6860      	ldr	r0, [r4, #4]
 800573e:	f7ff ff81 	bl	8005644 <std>
 8005742:	2201      	movs	r2, #1
 8005744:	2109      	movs	r1, #9
 8005746:	68a0      	ldr	r0, [r4, #8]
 8005748:	f7ff ff7c 	bl	8005644 <std>
 800574c:	2202      	movs	r2, #2
 800574e:	2112      	movs	r1, #18
 8005750:	68e0      	ldr	r0, [r4, #12]
 8005752:	f7ff ff77 	bl	8005644 <std>
 8005756:	2301      	movs	r3, #1
 8005758:	61a3      	str	r3, [r4, #24]
 800575a:	e7d1      	b.n	8005700 <__sinit+0xc>
 800575c:	08005b7c 	.word	0x08005b7c
 8005760:	0800568d 	.word	0x0800568d

08005764 <__sfp>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	4607      	mov	r7, r0
 8005768:	f7ff ffac 	bl	80056c4 <__sfp_lock_acquire>
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <__sfp+0x84>)
 800576e:	681e      	ldr	r6, [r3, #0]
 8005770:	69b3      	ldr	r3, [r6, #24]
 8005772:	b913      	cbnz	r3, 800577a <__sfp+0x16>
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff ffbd 	bl	80056f4 <__sinit>
 800577a:	3648      	adds	r6, #72	; 0x48
 800577c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005780:	3b01      	subs	r3, #1
 8005782:	d503      	bpl.n	800578c <__sfp+0x28>
 8005784:	6833      	ldr	r3, [r6, #0]
 8005786:	b30b      	cbz	r3, 80057cc <__sfp+0x68>
 8005788:	6836      	ldr	r6, [r6, #0]
 800578a:	e7f7      	b.n	800577c <__sfp+0x18>
 800578c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005790:	b9d5      	cbnz	r5, 80057c8 <__sfp+0x64>
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <__sfp+0x88>)
 8005794:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005798:	60e3      	str	r3, [r4, #12]
 800579a:	6665      	str	r5, [r4, #100]	; 0x64
 800579c:	f000 f847 	bl	800582e <__retarget_lock_init_recursive>
 80057a0:	f7ff ff96 	bl	80056d0 <__sfp_lock_release>
 80057a4:	2208      	movs	r2, #8
 80057a6:	4629      	mov	r1, r5
 80057a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057b0:	6025      	str	r5, [r4, #0]
 80057b2:	61a5      	str	r5, [r4, #24]
 80057b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057b8:	f7fd fdda 	bl	8003370 <memset>
 80057bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057c4:	4620      	mov	r0, r4
 80057c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c8:	3468      	adds	r4, #104	; 0x68
 80057ca:	e7d9      	b.n	8005780 <__sfp+0x1c>
 80057cc:	2104      	movs	r1, #4
 80057ce:	4638      	mov	r0, r7
 80057d0:	f7ff ff62 	bl	8005698 <__sfmoreglue>
 80057d4:	4604      	mov	r4, r0
 80057d6:	6030      	str	r0, [r6, #0]
 80057d8:	2800      	cmp	r0, #0
 80057da:	d1d5      	bne.n	8005788 <__sfp+0x24>
 80057dc:	f7ff ff78 	bl	80056d0 <__sfp_lock_release>
 80057e0:	230c      	movs	r3, #12
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	e7ee      	b.n	80057c4 <__sfp+0x60>
 80057e6:	bf00      	nop
 80057e8:	08005b7c 	.word	0x08005b7c
 80057ec:	ffff0001 	.word	0xffff0001

080057f0 <_fwalk_reent>:
 80057f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f4:	4606      	mov	r6, r0
 80057f6:	4688      	mov	r8, r1
 80057f8:	2700      	movs	r7, #0
 80057fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005802:	f1b9 0901 	subs.w	r9, r9, #1
 8005806:	d505      	bpl.n	8005814 <_fwalk_reent+0x24>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	2c00      	cmp	r4, #0
 800580c:	d1f7      	bne.n	80057fe <_fwalk_reent+0xe>
 800580e:	4638      	mov	r0, r7
 8005810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005814:	89ab      	ldrh	r3, [r5, #12]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d907      	bls.n	800582a <_fwalk_reent+0x3a>
 800581a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800581e:	3301      	adds	r3, #1
 8005820:	d003      	beq.n	800582a <_fwalk_reent+0x3a>
 8005822:	4629      	mov	r1, r5
 8005824:	4630      	mov	r0, r6
 8005826:	47c0      	blx	r8
 8005828:	4307      	orrs	r7, r0
 800582a:	3568      	adds	r5, #104	; 0x68
 800582c:	e7e9      	b.n	8005802 <_fwalk_reent+0x12>

0800582e <__retarget_lock_init_recursive>:
 800582e:	4770      	bx	lr

08005830 <__retarget_lock_acquire_recursive>:
 8005830:	4770      	bx	lr

08005832 <__retarget_lock_release_recursive>:
 8005832:	4770      	bx	lr

08005834 <__swhatbuf_r>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	460e      	mov	r6, r1
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	4614      	mov	r4, r2
 800583e:	2900      	cmp	r1, #0
 8005840:	461d      	mov	r5, r3
 8005842:	b096      	sub	sp, #88	; 0x58
 8005844:	da08      	bge.n	8005858 <__swhatbuf_r+0x24>
 8005846:	2200      	movs	r2, #0
 8005848:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	061a      	lsls	r2, r3, #24
 8005850:	d410      	bmi.n	8005874 <__swhatbuf_r+0x40>
 8005852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005856:	e00e      	b.n	8005876 <__swhatbuf_r+0x42>
 8005858:	466a      	mov	r2, sp
 800585a:	f000 f909 	bl	8005a70 <_fstat_r>
 800585e:	2800      	cmp	r0, #0
 8005860:	dbf1      	blt.n	8005846 <__swhatbuf_r+0x12>
 8005862:	9a01      	ldr	r2, [sp, #4]
 8005864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800586c:	425a      	negs	r2, r3
 800586e:	415a      	adcs	r2, r3
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	e7ee      	b.n	8005852 <__swhatbuf_r+0x1e>
 8005874:	2340      	movs	r3, #64	; 0x40
 8005876:	2000      	movs	r0, #0
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	b016      	add	sp, #88	; 0x58
 800587c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005880 <__smakebuf_r>:
 8005880:	898b      	ldrh	r3, [r1, #12]
 8005882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005884:	079d      	lsls	r5, r3, #30
 8005886:	4606      	mov	r6, r0
 8005888:	460c      	mov	r4, r1
 800588a:	d507      	bpl.n	800589c <__smakebuf_r+0x1c>
 800588c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	6123      	str	r3, [r4, #16]
 8005894:	2301      	movs	r3, #1
 8005896:	6163      	str	r3, [r4, #20]
 8005898:	b002      	add	sp, #8
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	466a      	mov	r2, sp
 800589e:	ab01      	add	r3, sp, #4
 80058a0:	f7ff ffc8 	bl	8005834 <__swhatbuf_r>
 80058a4:	9900      	ldr	r1, [sp, #0]
 80058a6:	4605      	mov	r5, r0
 80058a8:	4630      	mov	r0, r6
 80058aa:	f7fe fab7 	bl	8003e1c <_malloc_r>
 80058ae:	b948      	cbnz	r0, 80058c4 <__smakebuf_r+0x44>
 80058b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b4:	059a      	lsls	r2, r3, #22
 80058b6:	d4ef      	bmi.n	8005898 <__smakebuf_r+0x18>
 80058b8:	f023 0303 	bic.w	r3, r3, #3
 80058bc:	f043 0302 	orr.w	r3, r3, #2
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	e7e3      	b.n	800588c <__smakebuf_r+0xc>
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <__smakebuf_r+0x7c>)
 80058c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	6020      	str	r0, [r4, #0]
 80058cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	9b00      	ldr	r3, [sp, #0]
 80058d4:	6120      	str	r0, [r4, #16]
 80058d6:	6163      	str	r3, [r4, #20]
 80058d8:	9b01      	ldr	r3, [sp, #4]
 80058da:	b15b      	cbz	r3, 80058f4 <__smakebuf_r+0x74>
 80058dc:	4630      	mov	r0, r6
 80058de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e2:	f000 f8d7 	bl	8005a94 <_isatty_r>
 80058e6:	b128      	cbz	r0, 80058f4 <__smakebuf_r+0x74>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	89a0      	ldrh	r0, [r4, #12]
 80058f6:	4305      	orrs	r5, r0
 80058f8:	81a5      	strh	r5, [r4, #12]
 80058fa:	e7cd      	b.n	8005898 <__smakebuf_r+0x18>
 80058fc:	0800568d 	.word	0x0800568d

08005900 <memchr>:
 8005900:	4603      	mov	r3, r0
 8005902:	b510      	push	{r4, lr}
 8005904:	b2c9      	uxtb	r1, r1
 8005906:	4402      	add	r2, r0
 8005908:	4293      	cmp	r3, r2
 800590a:	4618      	mov	r0, r3
 800590c:	d101      	bne.n	8005912 <memchr+0x12>
 800590e:	2000      	movs	r0, #0
 8005910:	e003      	b.n	800591a <memchr+0x1a>
 8005912:	7804      	ldrb	r4, [r0, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	428c      	cmp	r4, r1
 8005918:	d1f6      	bne.n	8005908 <memchr+0x8>
 800591a:	bd10      	pop	{r4, pc}

0800591c <_raise_r>:
 800591c:	291f      	cmp	r1, #31
 800591e:	b538      	push	{r3, r4, r5, lr}
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	d904      	bls.n	8005930 <_raise_r+0x14>
 8005926:	2316      	movs	r3, #22
 8005928:	6003      	str	r3, [r0, #0]
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005932:	b112      	cbz	r2, 800593a <_raise_r+0x1e>
 8005934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005938:	b94b      	cbnz	r3, 800594e <_raise_r+0x32>
 800593a:	4620      	mov	r0, r4
 800593c:	f000 f830 	bl	80059a0 <_getpid_r>
 8005940:	462a      	mov	r2, r5
 8005942:	4601      	mov	r1, r0
 8005944:	4620      	mov	r0, r4
 8005946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800594a:	f000 b817 	b.w	800597c <_kill_r>
 800594e:	2b01      	cmp	r3, #1
 8005950:	d00a      	beq.n	8005968 <_raise_r+0x4c>
 8005952:	1c59      	adds	r1, r3, #1
 8005954:	d103      	bne.n	800595e <_raise_r+0x42>
 8005956:	2316      	movs	r3, #22
 8005958:	6003      	str	r3, [r0, #0]
 800595a:	2001      	movs	r0, #1
 800595c:	e7e7      	b.n	800592e <_raise_r+0x12>
 800595e:	2400      	movs	r4, #0
 8005960:	4628      	mov	r0, r5
 8005962:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005966:	4798      	blx	r3
 8005968:	2000      	movs	r0, #0
 800596a:	e7e0      	b.n	800592e <_raise_r+0x12>

0800596c <raise>:
 800596c:	4b02      	ldr	r3, [pc, #8]	; (8005978 <raise+0xc>)
 800596e:	4601      	mov	r1, r0
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f7ff bfd3 	b.w	800591c <_raise_r>
 8005976:	bf00      	nop
 8005978:	2000000c 	.word	0x2000000c

0800597c <_kill_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	2300      	movs	r3, #0
 8005980:	4d06      	ldr	r5, [pc, #24]	; (800599c <_kill_r+0x20>)
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	4611      	mov	r1, r2
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	f7fc f86c 	bl	8001a66 <_kill>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d102      	bne.n	8005998 <_kill_r+0x1c>
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	b103      	cbz	r3, 8005998 <_kill_r+0x1c>
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	bd38      	pop	{r3, r4, r5, pc}
 800599a:	bf00      	nop
 800599c:	200001ac 	.word	0x200001ac

080059a0 <_getpid_r>:
 80059a0:	f7fc b85a 	b.w	8001a58 <_getpid>

080059a4 <__sread>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	460c      	mov	r4, r1
 80059a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ac:	f000 f894 	bl	8005ad8 <_read_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	bfab      	itete	ge
 80059b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059b6:	89a3      	ldrhlt	r3, [r4, #12]
 80059b8:	181b      	addge	r3, r3, r0
 80059ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059be:	bfac      	ite	ge
 80059c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059c2:	81a3      	strhlt	r3, [r4, #12]
 80059c4:	bd10      	pop	{r4, pc}

080059c6 <__swrite>:
 80059c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ca:	461f      	mov	r7, r3
 80059cc:	898b      	ldrh	r3, [r1, #12]
 80059ce:	4605      	mov	r5, r0
 80059d0:	05db      	lsls	r3, r3, #23
 80059d2:	460c      	mov	r4, r1
 80059d4:	4616      	mov	r6, r2
 80059d6:	d505      	bpl.n	80059e4 <__swrite+0x1e>
 80059d8:	2302      	movs	r3, #2
 80059da:	2200      	movs	r2, #0
 80059dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e0:	f000 f868 	bl	8005ab4 <_lseek_r>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	4632      	mov	r2, r6
 80059e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	4628      	mov	r0, r5
 80059f0:	463b      	mov	r3, r7
 80059f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	f000 b817 	b.w	8005a2c <_write_r>

080059fe <__sseek>:
 80059fe:	b510      	push	{r4, lr}
 8005a00:	460c      	mov	r4, r1
 8005a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a06:	f000 f855 	bl	8005ab4 <_lseek_r>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	bf15      	itete	ne
 8005a10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a1a:	81a3      	strheq	r3, [r4, #12]
 8005a1c:	bf18      	it	ne
 8005a1e:	81a3      	strhne	r3, [r4, #12]
 8005a20:	bd10      	pop	{r4, pc}

08005a22 <__sclose>:
 8005a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a26:	f000 b813 	b.w	8005a50 <_close_r>
	...

08005a2c <_write_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4604      	mov	r4, r0
 8005a30:	4608      	mov	r0, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	2200      	movs	r2, #0
 8005a36:	4d05      	ldr	r5, [pc, #20]	; (8005a4c <_write_r+0x20>)
 8005a38:	602a      	str	r2, [r5, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7fc f84a 	bl	8001ad4 <_write>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_write_r+0x1e>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_write_r+0x1e>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	200001ac 	.word	0x200001ac

08005a50 <_close_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	2300      	movs	r3, #0
 8005a54:	4d05      	ldr	r5, [pc, #20]	; (8005a6c <_close_r+0x1c>)
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fc f856 	bl	8001b0c <_close>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_close_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_close_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	200001ac 	.word	0x200001ac

08005a70 <_fstat_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	2300      	movs	r3, #0
 8005a74:	4d06      	ldr	r5, [pc, #24]	; (8005a90 <_fstat_r+0x20>)
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	f7fc f850 	bl	8001b22 <_fstat>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	d102      	bne.n	8005a8c <_fstat_r+0x1c>
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	b103      	cbz	r3, 8005a8c <_fstat_r+0x1c>
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	bf00      	nop
 8005a90:	200001ac 	.word	0x200001ac

08005a94 <_isatty_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	2300      	movs	r3, #0
 8005a98:	4d05      	ldr	r5, [pc, #20]	; (8005ab0 <_isatty_r+0x1c>)
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	f7fc f84e 	bl	8001b40 <_isatty>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_isatty_r+0x1a>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_isatty_r+0x1a>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	200001ac 	.word	0x200001ac

08005ab4 <_lseek_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	2200      	movs	r2, #0
 8005abe:	4d05      	ldr	r5, [pc, #20]	; (8005ad4 <_lseek_r+0x20>)
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f7fc f846 	bl	8001b54 <_lseek>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_lseek_r+0x1e>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_lseek_r+0x1e>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	200001ac 	.word	0x200001ac

08005ad8 <_read_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4d05      	ldr	r5, [pc, #20]	; (8005af8 <_read_r+0x20>)
 8005ae4:	602a      	str	r2, [r5, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f7fb ffd7 	bl	8001a9a <_read>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_read_r+0x1e>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_read_r+0x1e>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	200001ac 	.word	0x200001ac

08005afc <_init>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr

08005b08 <_fini>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr
